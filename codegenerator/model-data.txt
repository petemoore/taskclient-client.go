Generated: 1458241918
The following file is an auto-generated static dump of the API models at time of code generation.
It is provided here for reference purposes, but is not used by any code.

http://references.taskcluster.net/auth/v1/api.json
==================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Authentication API'
Description = 'Authentication related API end-points for TaskCluster and related
services. These API end-points are of interest if you wish to:
  * Authenticate request signed with TaskCluster credentials,
  * Manage clients and roles,
  * Inspect or audit clients and roles,
  * Gain access to various services guarded by this API.

### Clients
The authentication service manages _clients_, at a high-level each client
consists of a `clientId`, an `accessToken`, scopes, and some metadata.
The `clientId` and `accessToken` can be used for authentication when
calling TaskCluster APIs.

The client's scopes control the client's access to TaskCluster resources.
The scopes are *expanded* by substituting roles, as defined below.
Every client has an implicit scope named `assume:client-id:<clientId>`,
allowing additional access to be granted to the client without directly
editing the client's scopes.

### Roles
A _role_ consists of a `roleId`, a set of scopes and a description.
Each role constitutes a simple _expansion rule_ that says if you have
the scope: `assume:<roleId>` you get the set of scopes the role has.
Think of the `assume:<roleId>` as a scope that allows a client to assume
a role.

As in scopes the `*` kleene star also have special meaning if it is
located at the end of a `roleId`. If you have a role with the following
`roleId`: `my-prefix*`, then any client which has a scope staring with
`assume:my-prefix` will be allowed to assume the role.

As previously mentioned each client gets the scope:
`assume:client-id:<clientId>`, it trivially follows that you can create a
role with the `roleId`: `client-id:<clientId>` to assign additional
scopes to a client. You can also create a role `client-id:user-*`
if you wish to assign a set of scopes to all clients whose `clientId`
starts with `user-`.

### Guarded Services
The authentication service also has API end-points for delegating access
to some guarded service such as AWS S3, or Azure Table Storage.
Generally, we add API end-points to this server when we wish to use
TaskCluster credentials to grant access to a third-party service used
by many TaskCluster components.'
Base URL    = 'https://auth.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/clients/'
    Entry Args        = '[]'
    Entry Query        = '[prefix]'
    Entry Name        = 'listClients'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#'
    Entry Title       = 'List Clients'
    Entry Description = 'Get a list of all clients.  With `prefix`, only clients for which
it is a prefix of the clientId are returned.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'client'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Get Client'
    Entry Description = 'Get information about a single client.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'createClient'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:create-client:<clientId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'
    Entry Title       = 'Create Client'
    Entry Description = 'Create a new client and get the `accessToken` for this client.
You should store the `accessToken` from this API call as there is no
other way to retrieve it.

If you loose the `accessToken` you can call `resetAccessToken` to reset
it, and a new `accessToken` will be returned, but you cannot retrieve the
current `accessToken`.

If a client with the same `clientId` already exists this operation will
fail. Use `updateClient` if you wish to update an existing client.

The caller's scopes must satisfy `scopes`.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>/reset'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'resetAccessToken'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:reset-access-token:<clientId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'
    Entry Title       = 'Reset `accessToken`'
    Entry Description = 'Reset a clients `accessToken`, this will revoke the existing
`accessToken`, generate a new `accessToken` and return it from this
call.

There is no way to retrieve an existing `accessToken`, so if you loose it
you must reset the accessToken to acquire it again.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'updateClient'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:update-client:<clientId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Update Client'
    Entry Description = 'Update an exisiting client. The `clientId` and `accessToken` cannot be
updated, but `scopes` can be modified.  The caller's scopes must
satisfy all scopes being added to the client in the update operation.
If no scopes are given in the request, the client's scopes remain
unchanged'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>/enable'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'enableClient'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:enable-client:<clientId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Enable Client'
    Entry Description = 'Enable a client that was disabled with `disableClient`.  If the client
is already enabled, this does nothing.

This is typically used by identity providers to re-enable clients that
had been disabled when the corresponding identity's scopes changed.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>/disable'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'disableClient'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:disable-client:<clientId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Disable Client'
    Entry Description = 'Disable a client.  If the client is already disabled, this does nothing.

This is typically used by identity providers to disable clients when the
corresponding identity's scopes no longer satisfy the client's scopes.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'deleteClient'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:delete-client:<clientId>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Client'
    Entry Description = 'Delete a client, please note that any roles related to this client must
be deleted independently.'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/roles/'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listRoles'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#'
    Entry Title       = 'List Roles'
    Entry Description = 'Get a list of all roles, each role object also includes the list of
scopes it expands to.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'role'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
    Entry Title       = 'Get Role'
    Entry Description = 'Get information about a single role, including the set of scopes that the
role expands to.'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'createRole'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:create-role:<roleId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
    Entry Title       = 'Create Role'
    Entry Description = 'Create a new role.

The caller's scopes must satisfy the new role's scopes.

If there already exists a role with the same `roleId` this operation
will fail. Use `updateRole` to modify an existing role.'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'updateRole'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:update-role:<roleId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
    Entry Title       = 'Update Role'
    Entry Description = 'Update an existing role.

The caller's scopes must satisfy all of the new scopes being added, but
need not satisfy all of the client's existing scopes.'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'deleteRole'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:delete-role:<roleId>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Role'
    Entry Description = 'Delete a role. This operation will succeed regardless of whether or not
the role exists.'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/scopes/expand'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'expandScopes'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Title       = 'Expand Scopes'
    Entry Description = 'Return an expanded copy of the given scopeset, with scopes implied by any
roles included.'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/scopes/current'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'currentScopes'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Title       = 'Get Current Scopes'
    Entry Description = 'Return the expanded scopes available in the request, taking into account all sources
of scopes and scope restrictions (temporary credentials, assumeScopes, client scopes,
and roles).'
Entry 15    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/aws/s3/<level>/<bucket>/<prefix>'
    Entry Args        = '[level bucket prefix]'
    Entry Query        = '[]'
    Entry Name        = 'awsS3Credentials'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[auth:aws-s3:<level>:<bucket>/<prefix>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#'
    Entry Title       = 'Get Temporary Read/Write Credentials S3'
    Entry Description = 'Get temporary AWS credentials for `read-write` or `read-only` access to
a given `bucket` and `prefix` within that bucket.
The `level` parameter can be `read-write` or `read-only` and determines
which type of credentials are returned. Please note that the `level`
parameter is required in the scope guarding access.

The credentials are set to expire after an hour, but this behavior is
subject to change. Hence, you should always read the `expires` property
from the response, if you intend to maintain active credentials in your
application.

Please note that your `prefix` may not start with slash `/`. Such a prefix
is allowed on S3, but we forbid it here to discourage bad behavior.

Also note that if your `prefix` doesn't end in a slash `/`, the STS
credentials may allow access to unexpected keys, as S3 does not treat
slashes specially.  For example, a prefix of `my-folder` will allow
access to `my-folder/file.txt` as expected, but also to `my-folder.txt`,
which may not be intended.'
Entry 16    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/azure/<account>/table/<table>/read-write'
    Entry Args        = '[account table]'
    Entry Query        = '[]'
    Entry Name        = 'azureTableSAS'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[auth:azure-table-access:<account>/<table>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#'
    Entry Title       = 'Get Shared-Access-Signature for Azure Table'
    Entry Description = 'Get a shared access signature (SAS) string for use with a specific Azure
Table Storage table.  Note, this will create the table, if it doesn't
already exist.'
Entry 17    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/authenticate-hawk'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'authenticateHawk'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#'
    Entry Title       = 'Authenticate Hawk Request'
    Entry Description = 'Validate the request signature given on input and return list of scopes
that the authenticating client has.

This method is used by other services that wish rely on TaskCluster
credentials for authentication. This way we can use Hawk without having
the secret credentials leave this service.'
Entry 18    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/test-authenticate'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'testAuthenticate'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'
    Entry Title       = 'Test Authentication'
    Entry Description = 'Utility method to test client implementations of TaskCluster
authentication.

Rather than using real credentials, this endpoint accepts requests with
clientId `tester` and accessToken `no-secret`. That client's scopes are
based on `clientScopes` in the request body.

The request is validated, with any certificate, authorizedScopes, etc.
applied, and the resulting scopes are checked against `requiredScopes`
from the request body. On success, the response contains the clientId
and scopes as seen by the API method.'
Entry 19    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/test-authenticate-get/'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'testAuthenticateGet'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'
    Entry Title       = 'Test Authentication (GET)'
    Entry Description = 'Utility method similar to `testAuthenticate`, but with the GET method,
so it can be used with signed URLs (bewits).

Rather than using real credentials, this endpoint accepts requests with
clientId `tester` and accessToken `no-secret`. That client's scopes are
`['test:*', 'auth:create-client:test:*']`.  The call fails if the 
`test:authenticate-get` scope is not available.

The request is validated, with any certificate, authorizedScopes, etc.
applied, and the resulting scopes are checked, just like any API call.
On success, the response contains the clientId and scopes as seen by
the API method.

This method may later be extended to allow specification of client and
required scopes via query arguments.'
Entry 20    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Request to authenticate a hawk request.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#'
Properties
  Property 'authorization' =
    Description            = 'Authorization header, **must** only be specified if request being
    authenticated has a `Authorization` header.
    '
    Type                   = 'string'
    TypeName               = 'Authorization'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/authorization'
  Property 'host' =
    Description            = 'Host for which the request came in, this is typically the `Host` header
    excluding the port if any.
    '
    Format                 = 'hostname'
    Type                   = 'string'
    TypeName               = 'Host'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host'
  Property 'method' =
    Description            = 'HTTP method of the request being authenticated.
    '
    Enum                   = '[get post put head delete options trace copy lock mkcol move purge propfind proppatch unlock report mkactivity checkout merge m-search notify subscribe unsubscribe patch search connect]'
    Type                   = 'string'
    TypeName               = 'Method'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/method'
  Property 'port' =
    Description            = 'Port on which the request came in, this is typically `80` or `443`.
    If you are running behind a reverse proxy look for the `x-forwarded-port`
    header.
    '
    Maximum                = '65535'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'Port'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/port'
  Property 'resource' =
    Description            = 'Resource the request operates on including querystring. This is the
    string that follows the HTTP method.
    **Note,** order of querystring elements is important.
    '
    Type                   = 'string'
    TypeName               = 'Resource'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/resource'
Required               = '[method resource host port]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hawk Signature Authentication Request'
Type                   = 'object'
TypeName               = 'HawkSignatureAuthenticationRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#
=======================================================================
Any Of                 = 'Item '0' =
  Additional Properties  = 'false'
  Properties
    Property 'clientId' =
      Description            = 'The `clientId` that made this request.  This may be the `id` supplied in
      the Authorization header, or in the case of a named temporary credential
      may be embedded in the payload.  In any case, this clientId can be used
      for logging, auditing, and identifying the credential but **must** not be
      used for access control.  That's what scopes are for.
      '
      Type                   = 'string'
      TypeName               = 'ClientID'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/clientId'
    Property 'hash' =
      Description            = 'Payload as extracted from `Authentication` header. This property is
      only present if a hash is available. You are not required to validate
      this hash, but if you do, please check `scheme` to ensure that it's
      on a scheme you support.
      '
      Type HAS NOT BEEN SET!!!
      TypeName               = 'Hash'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/hash'
    Property 'scheme' =
      Description            = 'Authentication scheme the client used. Generally, you don't need to
      read this property unless `hash` is provided and you want to validate
      the payload hash. Additional values may be added in the future.
      '
      Enum                   = '[hawk]'
      Type                   = 'string'
      TypeName               = 'Scheme'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/scheme'
    Property 'scopes' =
      Description            = 'List of scopes the client is authorized to access.  Scopes must be
      composed of printable ASCII characters and spaces.
      '
      Items
        Pattern                = '^[ -~]*$'
        Type                   = 'string'
        TypeName               = ''
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/scopes/items'
      Type                   = 'array'
      TypeName               = 'Scopes'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/scopes'
    Property 'status' =
      Description            = 'The kind of response, `auth-failed` or `auth-success`.
      '
      Enum                   = '[auth-success]'
      Type                   = 'string'
      TypeName               = 'Status'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/status'
  Required               = '[status scopes scheme clientId]'
  Title                  = 'Authentication Successful Response'
  Type                   = 'object'
  TypeName               = 'AuthenticationSuccessfulResponse'
  SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]'
Item '1' =
  Additional Properties  = 'false'
  Properties
    Property 'message' =
      Description            = 'Message saying why the authentication failed.
      '
      Type                   = 'string'
      TypeName               = 'Message'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]/properties/message'
    Property 'status' =
      Description            = 'The kind of response, `auth-failed` or `auth-success`.
      '
      Enum                   = '[auth-failed]'
      Type                   = 'string'
      TypeName               = 'Status'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]/properties/status'
  Required               = '[status message]'
  Title                  = 'Authentication Failed Response'
  Type                   = 'object'
  TypeName               = 'AuthenticationFailedResponse'
  SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]'
'
Description            = 'Response from a request to authenticate a hawk request.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hawk Signature Authentication Response'
Type                   = 'object'
TypeName               = 'HawkSignatureAuthenticationResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]
================================================================================
Additional Properties  = 'false'
Properties
  Property 'clientId' =
    Description            = 'The `clientId` that made this request.  This may be the `id` supplied in
    the Authorization header, or in the case of a named temporary credential
    may be embedded in the payload.  In any case, this clientId can be used
    for logging, auditing, and identifying the credential but **must** not be
    used for access control.  That's what scopes are for.
    '
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/clientId'
  Property 'hash' =
    Description            = 'Payload as extracted from `Authentication` header. This property is
    only present if a hash is available. You are not required to validate
    this hash, but if you do, please check `scheme` to ensure that it's
    on a scheme you support.
    '
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Hash'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/hash'
  Property 'scheme' =
    Description            = 'Authentication scheme the client used. Generally, you don't need to
    read this property unless `hash` is provided and you want to validate
    the payload hash. Additional values may be added in the future.
    '
    Enum                   = '[hawk]'
    Type                   = 'string'
    TypeName               = 'Scheme'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/scheme'
  Property 'scopes' =
    Description            = 'List of scopes the client is authorized to access.  Scopes must be
    composed of printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/scopes'
  Property 'status' =
    Description            = 'The kind of response, `auth-failed` or `auth-success`.
    '
    Enum                   = '[auth-success]'
    Type                   = 'string'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]/properties/status'
Required               = '[status scopes scheme clientId]'
Title                  = 'Authentication Successful Response'
Type                   = 'object'
TypeName               = 'AuthenticationSuccessfulResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[0]'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]
================================================================================
Additional Properties  = 'false'
Properties
  Property 'message' =
    Description            = 'Message saying why the authentication failed.
    '
    Type                   = 'string'
    TypeName               = 'Message'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]/properties/message'
  Property 'status' =
    Description            = 'The kind of response, `auth-failed` or `auth-success`.
    '
    Enum                   = '[auth-failed]'
    Type                   = 'string'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]/properties/status'
Required               = '[status message]'
Title                  = 'Authentication Failed Response'
Type                   = 'object'
TypeName               = 'AuthenticationFailedResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/anyOf[1]'


http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Response for a request to get access to an S3 bucket.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#'
Properties
  Property 'credentials' =
    Description            = 'Temporary STS credentials for use when operating on S3
    '
    Properties
      Property 'accessKeyId' =
        Description            = 'Access key identifier that identifies the temporary security
        credentials.
        '
        Title                  = 'AccessKeyId'
        Type                   = 'string'
        TypeName               = 'AccessKeyID'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials/properties/accessKeyId'
      Property 'secretAccessKey' =
        Description            = 'Secret access key used to sign requests
        '
        Title                  = 'SecretAccessKey'
        Type                   = 'string'
        TypeName               = 'SecretAccessKey'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials/properties/secretAccessKey'
      Property 'sessionToken' =
        Description            = 'A token that must passed with request to use the temporary
        security credentials.
        '
        Title                  = 'SessionToken'
        Type                   = 'string'
        TypeName               = 'SessionToken'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials/properties/sessionToken'
    Required               = '[accessKeyId secretAccessKey sessionToken]'
    Title                  = 'Temporary Security Credentials'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials'
  Property 'expires' =
    Description            = 'Date and time of when the temporary credentials expires.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/expires'
Required               = '[credentials expires]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'AWS S3 Credentials Response'
Type                   = 'object'
TypeName               = 'AWSS3CredentialsResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#'


http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for an Shared-Access-Signature to access and Azure
Table Storage table.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#'
Properties
  Property 'expiry' =
    Description            = 'Date and time of when the Shared-Access-Signature expires.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expiry'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#/properties/expiry'
  Property 'sas' =
    Description            = 'Shared-Access-Signature string. This is the querystring parameters to
    be appened after `?` or `&` depending on whether or not a querystring is
    already present in the URL.
    '
    Type                   = 'string'
    TypeName               = 'Sas'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#/properties/sas'
Required               = '[sas expiry]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Azure Shared-Access-Signature Response'
Type                   = 'object'
TypeName               = 'AzureSharedAccessSignatureResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#'


http://schemas.taskcluster.net/auth/v1/create-client-request.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Properties to create a client.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'
Properties
  Property 'description' =
    Description            = 'Description of what these credentials are used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/description'
  Property 'expires' =
    Description            = 'Date and time where the clients access is set to expire
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/expires'
  Property 'scopes' =
    Description            = 'List of scopes the client has.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/scopes'
Required               = '[expires description]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Create Client Request'
Type                   = 'object'
TypeName               = 'CreateClientRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'


http://schemas.taskcluster.net/auth/v1/create-client-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'All details about a client including the `accessToken`
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'
Properties
  Property 'accessToken' =
    Description            = 'AccessToken used for authenticating requests, you should store this
    you won't be able to retrive it again!
    '
    Pattern                = '^[a-zA-Z0-9_-]{22,66}$'
    Type                   = 'string'
    TypeName               = 'AccessToken'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/accessToken'
  Property 'clientId' =
    Description            = 'ClientId of the client
    '
    Pattern                = '^[A-Za-z0-9@/:._-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/clientId'
  Property 'created' =
    Description            = 'Date and time when this client was created
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/created'
  Property 'description' =
    Description            = 'Description of what these credentials are used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/description'
  Property 'disabled' =
    Description            = 'If true, this client is disabled and cannot be used.  This usually occurs when the
    scopes avaialble to the user owning the client no longer satisfy the client.
    '
    Type                   = 'boolean'
    TypeName               = 'Disabled'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/disabled'
  Property 'expandedScopes' =
    Description            = 'List of scopes granted to this client by matching roles, including the
    client's scopes and the implicit role `client-id:<clientId>`.
    '
    Items
      Description            = 'Scope that client is granted
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/expandedScopes/items'
    Type                   = 'array'
    TypeName               = 'ExpandedScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/expandedScopes'
  Property 'expires' =
    Description            = 'Date and time where the clients access is set to expire
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/expires'
  Property 'lastDateUsed' =
    Description            = 'Date of last time this client was used. Will only be updated every 6 hours
    or so this may be off by up-to 6 hours. But it still gives a solid hint
    as to whether or not this client is in use.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastDateUsed'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/lastDateUsed'
  Property 'lastModified' =
    Description            = 'Date and time of last modification
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/lastModified'
  Property 'lastRotated' =
    Description            = 'Date and time of when the `accessToken` was reset last time.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastRotated'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/lastRotated'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes the client has (unexpanded).  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/scopes'
Required               = '[clientId accessToken expires description created lastModified lastDateUsed lastRotated scopes expandedScopes disabled]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Create Client Response'
Type                   = 'object'
TypeName               = 'CreateClientResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'


http://schemas.taskcluster.net/auth/v1/create-role-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Data to create or update a role.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'
Properties
  Property 'description' =
    Description            = 'Description of what this role is used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#/properties/description'
  Property 'scopes' =
    Description            = 'List of scopes the role grants access to.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope the role grants access to
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#/properties/scopes'
Required               = '[scopes description]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Create Role Request'
Type                   = 'object'
TypeName               = 'CreateRoleRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'


http://schemas.taskcluster.net/auth/v1/get-client-response.json#
================================================================
Additional Properties  = 'false'
Description            = 'Get all details about a client, useful for tools modifying a client
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
Properties
  Property 'clientId' =
    Description            = 'ClientId of the client scopes is requested about
    '
    Pattern                = '^[A-Za-z0-9@/:._-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/clientId'
  Property 'created' =
    Description            = 'Date and time when this client was created
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/created'
  Property 'description' =
    Description            = 'Description of what these credentials are used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/description'
  Property 'disabled' =
    Description            = 'If true, this client is disabled and cannot be used.  This usually occurs when the
    scopes avaialble to the user owning the client no longer satisfy the client.
    '
    Type                   = 'boolean'
    TypeName               = 'Disabled'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/disabled'
  Property 'expandedScopes' =
    Description            = 'List of scopes granted to this client by matching roles.  Scopes must be
    composed of printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope that client is granted by a role
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/expandedScopes/items'
    Type                   = 'array'
    TypeName               = 'ExpandedScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/expandedScopes'
  Property 'expires' =
    Description            = 'Date and time where the clients access is set to expire
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/expires'
  Property 'lastDateUsed' =
    Description            = 'Date of last time this client was used. Will only be updated every 6 hours
    or so this may be off by up-to 6 hours. But it still gives a solid hint
    as to whether or not this client is in use.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastDateUsed'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/lastDateUsed'
  Property 'lastModified' =
    Description            = 'Date and time of last modification
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/lastModified'
  Property 'lastRotated' =
    Description            = 'Date and time of when the `accessToken` was reset last time.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastRotated'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/lastRotated'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes the client has (unexpanded).  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/scopes'
Required               = '[clientId expires description created lastModified lastDateUsed lastRotated scopes expandedScopes disabled]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Client Response'
Type                   = 'object'
TypeName               = 'GetClientResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'


http://schemas.taskcluster.net/auth/v1/get-role-response.json#
==============================================================
Additional Properties  = 'false'
Description            = 'Get all details about a role
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
Properties
  Property 'created' =
    Description            = 'Date and time when this role was created
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/created'
  Property 'description' =
    Description            = 'Description of what this role is used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/description'
  Property 'expandedScopes' =
    Description            = 'List of scopes granted anyone who assumes this role, including anything
    granted by roles that can be assumed when you have this role.
    Hence, this includes any scopes in-directly granted as well.
    '
    Items
      Description            = 'Scope this role grants
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/expandedScopes/items'
    Type                   = 'array'
    TypeName               = 'ExpandedScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/expandedScopes'
  Property 'lastModified' =
    Description            = 'Date and time of last modification
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/lastModified'
  Property 'roleId' =
    Description            = 'roleId of the role requested
    '
    Pattern                = '^[\x20-\x7e]+$'
    Type                   = 'string'
    TypeName               = 'RoleID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/roleId'
  Property 'scopes' =
    Description            = 'List of scopes the role grants access to.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope the role grants access to
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/scopes'
Required               = '[roleId scopes description created lastModified expandedScopes]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Role Response'
Type                   = 'object'
TypeName               = 'GetRoleResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'


http://schemas.taskcluster.net/auth/v1/list-clients-response.json#
==================================================================
Description            = 'List of clients
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#'
Items
  Ref                    = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
  TypeName               = ''
  SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Client Response'
Type                   = 'array'
TypeName               = 'ListClientResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#'


http://schemas.taskcluster.net/auth/v1/list-roles-response.json#
================================================================
Description            = 'List of roles
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#'
Items
  Ref                    = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
  TypeName               = ''
  SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Roles Response'
Type                   = 'array'
TypeName               = 'ListRolesResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#'


http://schemas.taskcluster.net/auth/v1/scopeset.json#
=====================================================
Description            = 'A set of scopes
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
Properties
  Property 'scopes' =
    Description            = 'List of scopes.  Scopes must be composed of printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#/properties/scopes'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Set of scopes'
Type                   = 'object'
TypeName               = 'SetOfScopes'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'


http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#
======================================================================
Description            = 'Details on how the test request should be authenticated.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#'
Properties
  Property 'clientScopes' =
    Default                = '[]'
    Description            = 'List of scopes that should be client used should be given.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/clientScopes/items'
    Type                   = 'array'
    TypeName               = 'ClientScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/clientScopes'
  Property 'requiredScopes' =
    Default                = '[]'
    Description            = 'List of scopes the request should require.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/requiredScopes/items'
    Type                   = 'array'
    TypeName               = 'RequiredScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/requiredScopes'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Test Authenticate Request'
Type                   = 'object'
TypeName               = 'TestAuthenticateRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#'


http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#
=======================================================================
Description            = 'Details on how the test request was authenticated.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'
Properties
  Property 'clientId' =
    Description            = 'ClientId from the request as it will be logged
    '
    Pattern                = '^[A-Za-z0-9@/:._-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#/properties/clientId'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes the request was authorized.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#/properties/scopes'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Test Authenticate Response'
Type                   = 'object'
TypeName               = 'TestAuthenticateResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'


http://references.taskcluster.net/aws-provisioner/v1/api.json
=============================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'AWS Provisioner API Documentation'
Description = 'The AWS Provisioner is responsible for provisioning instances on EC2 for use in
TaskCluster.  The provisioner maintains a set of worker configurations which
can be managed with an API that is typically available at
aws-provisioner.taskcluster.net/v1.  This API can also perform basic instance
management tasks in addition to maintaining the internal state of worker type
configuration information.

The Provisioner runs at a configurable interval.  Each iteration of the
provisioner fetches a current copy the state that the AWS EC2 api reports.  In
each iteration, we ask the Queue how many tasks are pending for that worker
type.  Based on the number of tasks pending and the scaling ratio, we may
submit requests for new instances.  We use pricing information, capacity and
utility factor information to decide which instance type in which region would
be the optimal configuration.

Each EC2 instance type will declare a capacity and utility factor.  Capacity is
the number of tasks that a given machine is capable of running concurrently.
Utility factor is a relative measure of performance between two instance types.
We multiply the utility factor by the spot price to compare instance types and
regions when making the bidding choices.

When a new EC2 instance is instantiated, its user data contains a token in
`securityToken` that can be used with the `getSecret` method to retrieve
the worker's credentials and any needed passwords or other restricted
information.  The worker is responsible for deleting the secret after
retrieving it, to prevent dissemination of the secret to other proceses
which can read the instance user data.
'
Base URL    = 'https://aws-provisioner.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/worker-type/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'createWorkerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:manage-worker-type:<workerType>]]'
    Entry Input       = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
    Entry Title       = 'Create new Worker Type'
    Entry Description = 'Create a worker type.  A worker type contains all the configuration
needed for the provisioner to manage the instances.  Each worker type
knows which regions and which instance types are allowed for that
worker type.  Remember that Capacity is the number of concurrent tasks
that can be run on a given EC2 resource and that Utility is the relative
performance rate between different instance types.  There is no way to
configure different regions to have different sets of instance types
so ensure that all instance types are available in all regions.
This function is idempotent.

Once a worker type is in the provisioner, a back ground process will
begin creating instances for it based on its capacity bounds and its
pending task count from the Queue.  It is the worker's responsibility
to shut itself down.  The provisioner has a limit (currently 96hours)
for all instances to prevent zombie instances from running indefinitely.

The provisioner will ensure that all instances created are tagged with
aws resource tags containing the provisioner id and the worker type.

If provided, the secrets in the global, region and instance type sections
are available using the secrets api.  If specified, the scopes provided
will be used to generate a set of temporary credentials available with
the other secrets.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/worker-type/<workerType>/update'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'updateWorkerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:manage-worker-type:<workerType>]]'
    Entry Input       = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
    Entry Title       = 'Update Worker Type'
    Entry Description = 'Provide a new copy of a worker type to replace the existing one.
This will overwrite the existing worker type definition if there
is already a worker type of that name.  This method will return a
200 response along with a copy of the worker type definition created
Note that if you are using the result of a GET on the worker-type
end point that you will need to delete the lastModified and workerType
keys from the object returned, since those fields are not allowed
the request body for this method

Otherwise, all input requirements and actions are the same as the
create method.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-type/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:view-worker-type:<workerType>] [aws-provisioner:manage-worker-type:<workerType>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
    Entry Title       = 'Get Worker Type'
    Entry Description = 'Retreive a copy of the requested worker type definition.
This copy contains a lastModified field as well as the worker
type name.  As such, it will require manipulation to be able to
use the results of this method to submit date to the update
method.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/worker-type/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'removeWorkerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:manage-worker-type:<workerType>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Worker Type'
    Entry Description = 'Delete a worker type definition.  This method will only delete
the worker type definition from the storage table.  The actual
deletion will be handled by a background worker.  As soon as this
method is called for a worker type, the background worker will
immediately submit requests to cancel all spot requests for this
worker type as well as killing all instances regardless of their
state.  If you want to gracefully remove a worker type, you must
either ensure that no tasks are created with that worker type name
or you could theoretically set maxCapacity to 0, though, this is
not a supported or tested action'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/list-worker-types'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listWorkerTypes'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#'
    Entry Title       = 'List Worker Types'
    Entry Description = 'Return a list of string worker type names.  These are the names
of all managed worker types known to the provisioner.  This does
not include worker types which are left overs from a deleted worker
type definition but are still running in AWS.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/secret/<token>'
    Entry Args        = '[token]'
    Entry Query        = '[]'
    Entry Name        = 'createSecret'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:create-secret]]'
    Entry Input       = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#'
    Entry Output      = ''
    Entry Title       = 'Create new Secret'
    Entry Description = 'Insert a secret into the secret storage.  The supplied secrets will
be provided verbatime via `getSecret`, while the supplied scopes will
be converted into credentials by `getSecret`.

This method is not ordinarily used in production; instead, the provisioner
creates a new secret directly for each spot bid.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/secret/<token>'
    Entry Args        = '[token]'
    Entry Query        = '[]'
    Entry Name        = 'getSecret'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#'
    Entry Title       = 'Get a Secret'
    Entry Description = 'Retrieve a secret from storage.  The result contains any passwords or
other restricted information verbatim as well as a temporary credential
based on the scopes specified when the secret was created.

It is important that this secret is deleted by the consumer (`removeSecret`),
or else the secrets will be visible to any process which can access the
user data associated with the instance.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/instance-started/<instanceId>/<token>'
    Entry Args        = '[instanceId token]'
    Entry Query        = '[]'
    Entry Name        = 'instanceStarted'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Report an instance starting'
    Entry Description = 'An instance will report in by giving its instance id as well
as its security token.  The token is given and checked to ensure
that it matches a real token that exists to ensure that random
machines do not check in.  We could generate a different token
but that seems like overkill'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/secret/<token>'
    Entry Args        = '[token]'
    Entry Query        = '[]'
    Entry Name        = 'removeSecret'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Remove a Secret'
    Entry Description = 'Remove a secret.  After this call, a call to `getSecret` with the given
token will return no information.

It is very important that the consumer of a 
secret delete the secret from storage before handing over control
to untrusted processes to prevent credential and/or secret leakage.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-type/<workerType>/launch-specifications'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'getLaunchSpecs'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:view-worker-type:<workerType>] [aws-provisioner:manage-worker-type:<workerType>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#'
    Entry Title       = 'Get All Launch Specifications for WorkerType'
    Entry Description = 'This method returns a preview of all possible launch specifications
that this worker type definition could submit to EC2.  It is used to
test worker types, nothing more

**This API end-point is experimental and may be subject to change without warning.**'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/aws-state'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'awsState'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:aws-state]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get AWS State for all worker types'
    Entry Description = 'This method is a left over and will be removed as soon as the
tools.tc.net UI is updated to use the per-worker state

**DEPRECATED.**'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/state/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'state'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[aws-provisioner:view-worker-type:<workerType>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get AWS State for a worker type'
    Entry Description = 'Return the state of a given workertype as stored by the provisioner. 
This state is stored as three lists: 1 for all instances, 1 for requests
which show in the ec2 api and 1 list for those only tracked internally
in the provisioner.'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/backend-status'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'backendStatus'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Backend Status'
    Entry Description = '**Warning** this api end-point is **not stable**.'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/api-reference'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'apiReference'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'api reference'
    Entry Description = 'Get an API reference!

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#
=============================================================================
Additional Properties  = 'false'
Description            = 'A Secret
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#'
Properties
  Property 'expiration' =
    Description            = 'The date at which the secret is no longer guarunteed to exist
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/expiration'
  Property 'scopes' =
    Description            = 'List of strings which are scopes for temporary credentials to give
    to the worker through the secret system.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/scopes'
  Property 'secrets' =
    Description            = 'Free form object which contains the secrets stored
    '
    Type                   = 'object'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/secrets'
  Property 'token' =
    Description            = 'A Slug ID which is the uniquely addressable token to access this
    set of secrets
    '
    Type                   = 'string'
    TypeName               = 'Token'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/token'
  Property 'workerType' =
    Description            = 'A string describing what the secret will be used for
    '
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/workerType'
Required               = '[workerType secrets scopes token expiration]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Secret Request'
Type                   = 'object'
TypeName               = 'GetSecretRequest'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#
==================================================================================
Additional Properties  = 'false'
Description            = 'A worker launchSpecification and required metadata
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'
Properties
  Property 'canUseOndemand' =
    Description            = 'True if this worker type is allowed on demand instances.  Currently
    ignored
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseOndemand'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/canUseOndemand'
  Property 'canUseSpot' =
    Description            = 'True if this worker type is allowed spot instances.  Currently ignored
    as all instances are Spot
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseSpot'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/canUseSpot'
  Property 'instanceTypes' =
    Items
      Additional Properties  = 'false'
      Description            = 'Instance Type configuration'
      Properties
        Property 'capacity' =
          Description            = 'This number represents the number of tasks that this instance type
          is capable of running concurrently.  This is used by the provisioner
          to know how many pending tasks to offset a pending instance of this
          type by
          '
          Type                   = 'number'
          TypeName               = 'Capacity'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/capacity'
        Property 'instanceType' =
          Description            = 'InstanceType name for Amazon.
          '
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/instanceType'
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/launchSpec'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this InstanceType.  Scopes must
          be composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/userData'
        Property 'utility' =
          Description            = 'This number is a relative measure of performance between two instance
          types.  It is multiplied by the spot price from Amazon to figure out
          which instance type is the cheapest one
          '
          Type                   = 'number'
          TypeName               = 'Utility'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/utility'
      Required               = '[instanceType capacity utility launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items'
    Type                   = 'array'
    TypeName               = 'InstanceTypes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes'
  Property 'launchSpec' =
    Description            = 'Launch Specification entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'LaunchSpec'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/launchSpec'
  Property 'maxCapacity' =
    Description            = 'Maximum number of capacity units to be provisioned.
    '
    Type                   = 'number'
    TypeName               = 'MaxCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/maxCapacity'
  Property 'maxPrice' =
    Description            = 'Maximum price we'll pay.  Like minPrice, this takes into account the
    utility factor when figuring out what the actual SpotPrice submitted
    to Amazon will be
    '
    Type                   = 'number'
    TypeName               = 'MaxPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/maxPrice'
  Property 'minCapacity' =
    Description            = 'Minimum number of capacity units to be provisioned.  A capacity unit
    is an abstract unit of capacity, where one capacity unit is roughly
    one task which should be taken off the queue
    '
    Type                   = 'number'
    TypeName               = 'MinCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/minCapacity'
  Property 'minPrice' =
    Description            = 'Minimum price to pay for an instance.  A Price is considered to be the
    Amazon Spot Price multiplied by the utility factor of the InstantType
    as specified in the instanceTypes list.  For example, if the minPrice
    is set to $0.5 and the utility factor is 2, the actual minimum bid
    used will be $0.25
    '
    Type                   = 'number'
    TypeName               = 'MinPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/minPrice'
  Property 'regions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Region configuration'
      Properties
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this Region
          '
          Properties
            Property 'ImageId' =
              Description            = 'Per-region AMI ImageId'
              Type                   = 'string'
              TypeName               = 'ImageID'
              SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/launchSpec/properties/ImageId'
          Required               = '[ImageId]'
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/launchSpec'
        Property 'region' =
          Description            = 'The Amazon AWS Region being configured.  Example: us-west-1
          '
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/region'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this Region.  Scopes must be
          composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/userData'
      Required               = '[launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items'
    Type                   = 'array'
    TypeName               = 'Regions'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions'
  Property 'scalingRatio' =
    Description            = 'A scaling ratio of `0.2` means that the provisioner will attempt to keep
    the number of pending tasks around 20% of the provisioned capacity.
    This results in pending tasks waiting 20% of the average task execution
    time before starting to run.
    A higher scaling ratio often results in better utilization and longer
    waiting times. For workerTypes running long tasks a short scaling ratio
    may be prefered, but for workerTypes running quick tasks a higher scaling
    ratio may increase utilization without major delays.
    If using a scaling ratio of 0, the provisioner will attempt to keep the
    capacity of pending spot requests equal to the number of pending tasks.
    '
    Type                   = 'number'
    TypeName               = 'ScalingRatio'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/scalingRatio'
  Property 'scopes' =
    Description            = 'Scopes to issue credentials to for all regions Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/scopes'
  Property 'secrets' =
    Description            = 'Static secrets entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/secrets'
  Property 'userData' =
    Description            = 'UserData entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'UserData'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/userData'
Required               = '[launchSpec userData secrets scopes maxCapacity scalingRatio minPrice maxPrice instanceTypes regions]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Create Worker Type Request'
Type                   = 'object'
TypeName               = 'CreateWorkerTypeRequest'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#
=================================================================================
Description            = 'All of the launch specifications for a worker type
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get All Launch Specs Response'
Type                   = 'object'
TypeName               = 'GetAllLaunchSpecsResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#
===========================================================================
Description            = 'Secrets from the provisioner
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#'
Properties
  Property 'credentials' =
    Description            = 'Generated Temporary credentials from the Provisioner
    '
    Properties
      Property 'accessToken' =
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken certificate]'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials'
  Property 'data' =
    Description            = 'Free-form object which contains secrets from the worker type definition
    '
    Type                   = 'object'
    TypeName               = 'Data'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/data'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Secret Response'
Type                   = 'object'
TypeName               = 'GetSecretResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#
================================================================================
Additional Properties  = 'false'
Description            = 'A worker launchSpecification and required metadata
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
Properties
  Property 'canUseOndemand' =
    Description            = 'True if this worker type is allowed on demand instances.  Currently
    ignored
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseOndemand'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/canUseOndemand'
  Property 'canUseSpot' =
    Description            = 'True if this worker type is allowed spot instances.  Currently ignored
    as all instances are Spot
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseSpot'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/canUseSpot'
  Property 'instanceTypes' =
    Items
      Additional Properties  = 'false'
      Description            = 'Instance Type configuration'
      Properties
        Property 'capacity' =
          Description            = 'This number represents the number of tasks that this instance type
          is capable of running concurrently.  This is used by the provisioner
          to know how many pending tasks to offset a pending instance of this
          type by
          '
          Type                   = 'number'
          TypeName               = 'Capacity'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/capacity'
        Property 'instanceType' =
          Description            = 'InstanceType name for Amazon.
          '
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/instanceType'
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/launchSpec'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this InstanceType.  Scopes must
          be composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/userData'
        Property 'utility' =
          Description            = 'This number is a relative measure of performance between two instance
          types.  It is multiplied by the spot price from Amazon to figure out
          which instance type is the cheapest one
          '
          Type                   = 'number'
          TypeName               = 'Utility'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/utility'
      Required               = '[instanceType capacity utility launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items'
    Type                   = 'array'
    TypeName               = 'InstanceTypes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes'
  Property 'lastModified' =
    Description            = 'ISO Date string (e.g. new Date().toISOString()) which represents the time
    when this worker type definition was last altered (inclusive of creation)
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/lastModified'
  Property 'launchSpec' =
    Description            = 'Launch Specification entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'LaunchSpec'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/launchSpec'
  Property 'maxCapacity' =
    Description            = 'Maximum number of capacity units to be provisioned.
    '
    Type                   = 'number'
    TypeName               = 'MaxCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/maxCapacity'
  Property 'maxPrice' =
    Description            = 'Maximum price we'll pay.  Like minPrice, this takes into account the
    utility factor when figuring out what the actual SpotPrice submitted
    to Amazon will be
    '
    Type                   = 'number'
    TypeName               = 'MaxPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/maxPrice'
  Property 'minCapacity' =
    Description            = 'Minimum number of capacity units to be provisioned.  A capacity unit
    is an abstract unit of capacity, where one capacity unit is roughly
    one task which should be taken off the queue
    '
    Type                   = 'number'
    TypeName               = 'MinCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/minCapacity'
  Property 'minPrice' =
    Description            = 'Minimum price to pay for an instance.  A Price is considered to be the
    Amazon Spot Price multiplied by the utility factor of the InstantType
    as specified in the instanceTypes list.  For example, if the minPrice
    is set to $0.5 and the utility factor is 2, the actual minimum bid
    used will be $0.25
    '
    Type                   = 'number'
    TypeName               = 'MinPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/minPrice'
  Property 'regions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Region configuration'
      Properties
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this Region
          '
          Properties
            Property 'ImageId' =
              Description            = 'Per-region AMI ImageId'
              Type                   = 'string'
              TypeName               = 'ImageID'
              SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/launchSpec/properties/ImageId'
          Required               = '[ImageId]'
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/launchSpec'
        Property 'region' =
          Description            = 'The Amazon AWS Region being configured.  Example: us-west-1
          '
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/region'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this Region.  Scopes must be
          composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/userData'
      Required               = '[region launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items'
    Type                   = 'array'
    TypeName               = 'Regions'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions'
  Property 'scalingRatio' =
    Description            = 'A scaling ratio of `0.2` means that the provisioner will attempt to keep
    the number of pending tasks around 20% of the provisioned capacity.
    This results in pending tasks waiting 20% of the average task execution
    time before starting to run.
    A higher scaling ratio often results in better utilization and longer
    waiting times. For workerTypes running long tasks a short scaling ratio
    may be prefered, but for workerTypes running quick tasks a higher scaling
    ratio may increase utilization without major delays.
    If using a scaling ratio of 0, the provisioner will attempt to keep the
    capacity of pending spot requests equal to the number of pending tasks.
    '
    Type                   = 'number'
    TypeName               = 'ScalingRatio'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/scalingRatio'
  Property 'scopes' =
    Description            = 'Scopes to issue credentials to for all regions.  Scopes must be composed
    of printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/scopes'
  Property 'secrets' =
    Description            = 'Static secrets entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/secrets'
  Property 'userData' =
    Description            = 'UserData entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'UserData'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/userData'
  Property 'workerType' =
    Description            = 'The ID of the workerType
    '
    Pattern                = '^[A-Za-z0-9+/=_-]{1,22}$'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/workerType'
Required               = '[workerType launchSpec userData secrets scopes minCapacity maxCapacity scalingRatio minPrice maxPrice lastModified instanceTypes regions]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Worker Type Request'
Type                   = 'object'
TypeName               = 'GetWorkerTypeRequest'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#
==================================================================================
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#'
Items
  Type                   = 'string'
  TypeName               = ''
  SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#/items'
Title                  = 'List Worker Types'
Type                   = 'array'
TypeName               = 'ListWorkerTypes'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#'


http://references.taskcluster.net/aws-provisioner/v1/exchanges.json
===================================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'AWS Provisioner Pulse Exchanges'
Description     = 'Exchanges from the provisioner... more docs later'
Exchange Prefix = 'exchange/taskcluster-aws-provisioner/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'worker-type-created'
    Entry Name        = 'workerTypeCreated'
    Entry Title       = 'WorkerType Created Message'
    Entry Description = 'When a new `workerType` is created a message will be published to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'workerType'
        Element Summary   = 'WorkerType that this message concerns.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'worker-type-updated'
    Entry Name        = 'workerTypeUpdated'
    Entry Title       = 'WorkerType Updated Message'
    Entry Description = 'When a `workerType` is updated a message will be published to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'workerType'
        Element Summary   = 'WorkerType that this message concerns.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'worker-type-removed'
    Entry Name        = 'workerTypeRemoved'
    Entry Title       = 'WorkerType Removed Message'
    Entry Description = 'When a `workerType` is removed a message will be published to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'workerType'
        Element Summary   = 'WorkerType that this message concerns.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#
===========================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that an action occured to a worker type'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'
Properties
  Property 'version' =
    Type                   = 'number'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#/properties/version'
  Property 'workerType' =
    Description            = 'Name of the worker type which was created
    '
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#/properties/workerType'
Required               = '[workerType version]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Worker Type Message'
Type                   = 'object'
TypeName               = 'WorkerTypeMessage'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'


http://references.taskcluster.net/github/v1/api.json
====================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'TaskCluster GitHub API Documentation'
Description = 'The github service, typically available at
`github.taskcluster.net`, is responsible for publishing pulse
messages in response to GitHub events.

This document describes the API end-point for consuming GitHub
web hooks'
Base URL    = 'https://github.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/github'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'githubWebHookConsumer'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Consume GitHub WebHook'
    Entry Description = 'Capture a GitHub event and publish it via pulse, if it's a push
or pull request.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://references.taskcluster.net/github/v1/exchanges.json
==========================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'TaskCluster-Github Exchanges'
Description     = 'The github service, typically available at
`github.taskcluster.net`, is responsible for publishing a pulse
message for supported github events.

This document describes the exchange offered by the taskcluster
github service'
Exchange Prefix = 'exchange/taskcluster-github/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'pull-request'
    Entry Name        = 'pullRequest'
    Entry Title       = 'GitHub Pull Request Event'
    Entry Description = 'When a GitHub pull request event is posted it will be broadcast on this
exchange with the designated `organization` and `repository`
in the routing-key along with event specific metadata in the payload.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'organization'
        Element Summary   = 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'repository'
        Element Summary   = 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'action'
        Element Summary   = 'The GitHub `action` which triggered an event. See for possible values see the payload actions property.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'push'
    Entry Name        = 'push'
    Entry Title       = 'GitHub push Event'
    Entry Description = 'When a GitHub push event is posted it will be broadcast on this
exchange with the designated `organization` and `repository`
in the routing-key along with event specific metadata in the payload.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'organization'
        Element Summary   = 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'repository'
        Element Summary   = 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#'


http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#
==========================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a GitHub pull request has occurred
'
ID                     = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'
Properties
  Property 'action' =
    Description            = 'The GitHub `action` which triggered an event.
    '
    Enum                   = '[assigned unassigned labeled unlabeled opened closed reopened synchronize]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Action'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/action'
  Property 'details' =
    Description            = 'Metadata describing the pull request.
    '
    Type                   = 'object'
    TypeName               = 'Details'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/details'
  Property 'organization' =
    Description            = 'The GitHub `organization` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Organization'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/organization'
  Property 'repository' =
    Description            = 'The GitHub `repository` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Repository'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/repository'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/version'
Required               = '[version organization repository action]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'GitHub Pull Request Message'
Type                   = 'object'
TypeName               = 'GitHubPullRequestMessage'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'


http://schemas.taskcluster.net/github/v1/github-push-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a GitHub push has occurred
'
ID                     = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#'
Properties
  Property 'details' =
    Description            = 'Metadata describing the push.
    '
    Type                   = 'object'
    TypeName               = 'Details'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/details'
  Property 'organization' =
    Description            = 'The GitHub `organization` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Organization'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/organization'
  Property 'repository' =
    Description            = 'The GitHub `repository` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Repository'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/repository'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/version'
Required               = '[version organization repository]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'GitHub Push Message'
Type                   = 'object'
TypeName               = 'GitHubPushMessage'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#'


http://references.taskcluster.net/hooks/v1/api.json
===================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Hooks API Documentation'
Description = 'Hooks are a mechanism for creating tasks in response to events.

Hooks are identified with a `hookGroupId` and a `hookId`.

When an event occurs, the resulting task is automatically created.  The
task is created using the scope `assume:hook-id:<hookGroupId>/<hookId>`,
which must have scopes to make the createTask call, including satisfying all
scopes in `task.scopes`.

Hooks can have a 'schedule' indicating specific times that new tasks should
be created.  Each schedule is in a simple cron format, per 
https://www.npmjs.com/package/cron-parser.  For example:
 * `["0 0 1 * * *"]` -- daily at 1:00 UTC
 * `["0 0 9,21 * * 1-5", "0 0 12 * * 0,6"]` -- weekdays at 9:00 and 21:00 UTC, weekends at noon'
Base URL    = 'https://hooks.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listHookGroups'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json'
    Entry Title       = 'List hook groups'
    Entry Description = 'This endpoint will return a list of all hook groups with at least one hook.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>'
    Entry Args        = '[hookGroupId]'
    Entry Query        = '[]'
    Entry Name        = 'listHooks'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json'
    Entry Title       = 'List hooks in a given group'
    Entry Description = 'This endpoint will return a list of all the hook definitions within a
given hook group.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'hook'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
    Entry Title       = 'Get hook definition'
    Entry Description = 'This endpoint will return the hook defintion for the given `hookGroupId`
and hookId.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/status'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'getHookStatus'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json'
    Entry Title       = 'Get hook status'
    Entry Description = 'This endpoint will return the current status of the hook.  This represents a
snapshot in time and may vary from one call to the next.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/schedule'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'getHookSchedule'
    Entry Stability   = 'deprecated'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json'
    Entry Title       = 'Get hook schedule'
    Entry Description = 'This endpoint will return the schedule and next scheduled creation time
for the given hook.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'createHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[hooks:modify-hook:<hookGroupId>/<hookId> assume:hook-id:<hookGroupId>/<hookId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json'
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
    Entry Title       = 'Create a hook'
    Entry Description = 'This endpoint will create a new hook.

The caller's credentials must include the role that will be used to
create the task.  That role must satisfy task.scopes as well as the
necessary scopes to add the task to the queue.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'updateHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[hooks:modify-hook:<hookGroupId>/<hookId> assume:hook-id:<hookGroupId>/<hookId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json'
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
    Entry Title       = 'Update a hook'
    Entry Description = 'This endpoint will update an existing hook.  All fields except
`hookGroupId` and `hookId` can be modified.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'removeHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[hooks:modify-hook:<hookGroupId>/<hookId>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete a hook'
    Entry Description = 'This endpoint will remove a hook definition.'


http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Definition of a hook that can create tasks at defined times.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#'
Properties
  Property 'deadline' =
    Default                = '1 day'
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future.
    
    Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/deadline'
  Property 'expires' =
    Default                = '3 months'
    Description            = 'Task expiration, time at which task definition and status is deleted. Notice that all artifacts for the must have an expiration that is no later than this.
    
    Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/expires'
  Property 'metadata' =
    Additional Properties  = 'false'
    Properties
      Property 'description' =
        Description            = 'Long-form of the hook's purpose and behavior'
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/description'
      Property 'emailOnError' =
        Default                = 'true'
        Description            = 'Whether to email the owner on an error creating the task.'
        Title                  = 'Email on error'
        Type                   = 'boolean'
        TypeName               = 'EmailOnError'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/emailOnError'
      Property 'name' =
        Description            = 'Human readable name of the hook'
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'Email of the person or group responsible for this hook.'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/owner'
    Required               = '[name description owner]'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata'
  Property 'schedule' =
    Default                = '[]'
    Description            = 'Definition of the times at which a hook will result in creation of a task.
    If several patterns are specified, tasks will be created at any time
    specified by one or more patterns.
    '
    Items
      Description            = 'Cron-like specification for when tasks should be created.  The pattern is
      parsed in a UTC context.
      See [cron-parser on npm](https://www.npmjs.com/package/cron-parser).
      Note that tasks may not be created at exactly the time specified.
      '
      Title                  = 'Cron Pattern'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/schedule/items'
    Type                   = 'array'
    TypeName               = 'Schedule'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/schedule'
  Property 'task' =
    Ref                    = 'http://schemas.taskcluster.net/hooks/v1/task-template.json'
    TypeName               = 'Task'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/task'
Required               = '[metadata task deadline]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hook creation request'
Type                   = 'object'
TypeName               = 'HookCreationRequest'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#'


http://schemas.taskcluster.net/hooks/v1/hook-definition.json#
=============================================================
Additional Properties  = 'false'
Description            = 'Definition of a hook that will create tasks when defined events occur.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#'
Properties
  Property 'deadline' =
    Default                = '1 day'
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future.
    
    Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/deadline'
  Property 'expires' =
    Default                = '3 months'
    Description            = 'Task expiration, time at which task definition and status is deleted. Notice that all artifacts for the must have an expiration that is no later than this.
    
    Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/expires'
  Property 'hookGroupId' =
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'HookGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/hookGroupId'
  Property 'hookId' =
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'HookID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/hookId'
  Property 'metadata' =
    Additional Properties  = 'false'
    Properties
      Property 'description' =
        Description            = 'Long-form of the hook's purpose and behavior'
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/description'
      Property 'emailOnError' =
        Default                = 'true'
        Description            = 'Whether to email the owner on an error creating the task.'
        Title                  = 'Email on error'
        Type                   = 'boolean'
        TypeName               = 'EmailOnError'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/emailOnError'
      Property 'name' =
        Description            = 'Human readable name of the hook'
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'Email of the person or group responsible for this hook.'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/owner'
    Required               = '[name description owner]'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata'
  Property 'schedule' =
    Description            = 'Definition of the times at which a hook will result in creation of a task.
    If several patterns are specified, tasks will be created at any time
    specified by one or more patterns.  Note that tasks may not be created
    at exactly the time specified.
                        {$ref: "http://schemas.taskcluster.net/hooks/v1/schedule.json"}
    '
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Schedule'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/schedule'
  Property 'task' =
    Ref                    = 'http://schemas.taskcluster.net/hooks/v1/task-template.json'
    TypeName               = 'Task'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/task'
Required               = '[hookGroupId hookId metadata task schedule expires deadline]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hook definition'
Type                   = 'object'
TypeName               = 'HookDefinition'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#'


http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#
===========================================================
Additional Properties  = 'false'
Description            = 'A description of when a hook's task will be created, and the next scheduled time
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#'
Properties
  Property 'nextScheduledDate' =
    Description            = 'The next time this hook's task is scheduled to be created. This property
    is only present if there is a scheduled next time. Some hooks don't have
    any schedules.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'NextScheduledDate'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#/properties/nextScheduledDate'
  Property 'schedule' =
    Ref                    = 'http://schemas.taskcluster.net/hooks/v1/schedule.json'
    TypeName               = 'Schedule'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#/properties/schedule'
Required               = '[schedule]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hook schedule response'
Type                   = 'object'
TypeName               = 'HookScheduleResponse'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A snapshot of the current status of a hook.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#'
Properties
  Property 'lastFire' =
    Description            = 'Information about the last time this hook fired.  This property is only present
    if the hook has fired at least once.
    '
    OneOf
      Item '0' =
        Additional Properties  = 'false'
        Description            = 'Information about a successful firing of the hook'
        Properties
          Property 'result' =
            Enum                   = '[success]'
            Type                   = 'string'
            TypeName               = 'Result'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/result'
          Property 'taskId' =
            Description            = 'The task created'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Type                   = 'string'
            TypeName               = 'TaskID'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/taskId'
          Property 'time' =
            Description            = 'The time the task was created.  This will not necessarily match `task.created`.
            '
            Format                 = 'date-time'
            Type                   = 'string'
            TypeName               = 'Time'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/time'
        Required               = '[result taskId time]'
        Title                  = 'Successful Fire'
        Type                   = 'object'
        TypeName               = 'SuccessfulFire'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]'
      Item '1' =
        Additional Properties  = 'false'
        Description            = 'Information about an unsuccesful firing of the hook'
        Properties
          Property 'error' =
            Description            = 'The error that occurred when firing the task.  This is typically,
            but not always, an API error message.
            '
            Type                   = 'object'
            TypeName               = 'Error'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/error'
          Property 'result' =
            Enum                   = '[error]'
            Type                   = 'string'
            TypeName               = 'Result'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/result'
          Property 'time' =
            Description            = 'The time the task was created.  This will not necessarily match `task.created`.
            '
            Format                 = 'date-time'
            Type                   = 'string'
            TypeName               = 'Time'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/time'
        Required               = '[result error time]'
        Title                  = 'Failed Fire'
        Type                   = 'object'
        TypeName               = 'FailedFire'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]'
      Item '2' =
        Additional Properties  = 'false'
        Description            = 'Information about no firing of the hook (e.g., a new hook)'
        Properties
          Property 'result' =
            Enum                   = '[no-fire]'
            Type                   = 'string'
            TypeName               = 'Result'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]/properties/result'
        Required               = '[result]'
        Title                  = 'No Fire'
        Type                   = 'object'
        TypeName               = 'NoFire'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]'
    Type                   = 'object'
    TypeName               = 'LastFire'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire'
  Property 'nextScheduledDate' =
    Description            = 'The next time this hook's task is scheduled to be created. This property
    is only present if there is a scheduled next time. Some hooks don't have
    any schedules.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'NextScheduledDate'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/nextScheduledDate'
Required               = '[lastFire]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hook status response'
Type                   = 'object'
TypeName               = 'HookStatusResponse'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]
======================================================================================
Additional Properties  = 'false'
Description            = 'Information about a successful firing of the hook'
Properties
  Property 'result' =
    Enum                   = '[success]'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/result'
  Property 'taskId' =
    Description            = 'The task created'
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/taskId'
  Property 'time' =
    Description            = 'The time the task was created.  This will not necessarily match `task.created`.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Time'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/time'
Required               = '[result taskId time]'
Title                  = 'Successful Fire'
Type                   = 'object'
TypeName               = 'SuccessfulFire'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]
======================================================================================
Additional Properties  = 'false'
Description            = 'Information about an unsuccesful firing of the hook'
Properties
  Property 'error' =
    Description            = 'The error that occurred when firing the task.  This is typically,
    but not always, an API error message.
    '
    Type                   = 'object'
    TypeName               = 'Error'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/error'
  Property 'result' =
    Enum                   = '[error]'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/result'
  Property 'time' =
    Description            = 'The time the task was created.  This will not necessarily match `task.created`.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Time'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/time'
Required               = '[result error time]'
Title                  = 'Failed Fire'
Type                   = 'object'
TypeName               = 'FailedFire'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]
======================================================================================
Additional Properties  = 'false'
Description            = 'Information about no firing of the hook (e.g., a new hook)'
Properties
  Property 'result' =
    Enum                   = '[no-fire]'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]/properties/result'
Required               = '[result]'
Title                  = 'No Fire'
Type                   = 'object'
TypeName               = 'NoFire'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]'


http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'List of `hookGroupIds`.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#'
Properties
  Property 'groups' =
    Items
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#/properties/groups/items'
    Title                  = 'Groups'
    Type                   = 'array'
    TypeName               = 'Groups'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#/properties/groups'
Required               = '[groups]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hook groups'
Type                   = 'object'
TypeName               = 'HookGroups'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#'


http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'List of hooks
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#'
Properties
  Property 'hooks' =
    Items
      Ref                    = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#/properties/hooks/items'
    Title                  = 'Hooks'
    Type                   = 'array'
    TypeName               = 'Hooks'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#/properties/hooks'
Required               = '[hooks]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Hook list'
Type                   = 'object'
TypeName               = 'HookList'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#'


http://schemas.taskcluster.net/hooks/v1/schedule.json#
======================================================
Default                = '[]'
Description            = 'A list of cron-style definitions to represent a set of moments in (UTC) time.
If several patterns are specified, a given moment in time represented by
more than one pattern is considered only to be counted once, in other words
it is allowed for the cron patterns to overlap; duplicates are redundant.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/schedule.json#'
Items
  Description            = 'Cron-like specification for when tasks should be created.  The pattern is
  parsed in a UTC context.
  See [cron-parser on npm](https://www.npmjs.com/package/cron-parser).
  '
  Title                  = 'Cron Pattern'
  Type                   = 'string'
  TypeName               = ''
  SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/schedule.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Schedule'
Type                   = 'array'
TypeName               = 'Schedule'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/schedule.json#'


http://schemas.taskcluster.net/hooks/v1/task-template.json#
===========================================================
Additional Properties  = 'false'
Description            = 'Definition of a task embedded in a hook
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#'
Properties
  Property 'extra' =
    Default                = 'map[]'
    Description            = 'Object with properties that can hold any kind of extra data that should be
    associated with the task. This can be data for the task which doesn't
    fit into `payload`, or it can supplementary data for use in services
    listening for events from this task. For example this could be details to
    display on _treeherder_, or information for indexing the task. Please, try
    to put all related information under one property, so `extra` data keys
    for treeherder reporting and task indexing don't conflict, hence, we have
    reusable services. **Warning**, do not stuff large data-sets in here,
    task definitions should not take-up multiple MiBs.
    '
    Title                  = 'Extra Data'
    Type                   = 'object'
    TypeName               = 'Extra'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/extra'
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of the task, please **explain** what the
        task does. A few lines of documentation is not going to hurt you.
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task, used to very briefly given an idea about
        what the task does.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task, e.g. the person who did
        `hg push`. The person we should contact to ask why this task is here.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task, should specify a file, revision and
        repository. This should be place someone can go an do a git/hg blame
        to who came up with recipe for this task.
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/metadata'
  Property 'payload' =
    Description            = 'Task-specific payload following worker-specific format. For example the
    `docker-worker` requires keys like: `image`, `commands` and
    `features`. Refer to the documentation of `docker-worker` for details.
    '
    Title                  = 'Task Payload'
    Type                   = 'object'
    TypeName               = 'Payload'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/payload'
  Property 'priority' =
    Default                = 'normal'
    Description            = 'Priority of task, this defaults to `normal`. Additional levels may be
    added later.
    **Task submitter required scopes** `queue:task-priority:high` for high
    priority tasks.
    '
    Enum                   = '[high normal]'
    Title                  = 'Task Priority'
    Type                   = 'string'
    TypeName               = 'Priority'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/priority'
  Property 'provisionerId' =
    Description            = 'Unique identifier for a provisioner, that can supply specified
    `workerType`
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/provisionerId'
  Property 'retries' =
    Default                = '5'
    Description            = 'Number of times to retry the task in case of infrastructure issues.
    An _infrastructure issue_ is a worker node that crashes or is shutdown,
    these events are to be expected.
    '
    Maximum                = '49'
    Minimum                = '0'
    Title                  = 'Retries'
    Type                   = 'integer'
    TypeName               = 'Retries'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/retries'
  Property 'routes' =
    Default                = '[]'
    Description            = 'List of task specific routes, AMQP messages will be CC'ed to these routes.
    **Task submitter required scopes** `queue:route:<route>` for
    each route given.
    '
    Items
      Description            = 'A task specific route, AMQP messages will be CC'ed with a routing key
      matching `route.<task-specific route>`. It's possible to dot (`.`) in
      the task specific route to make sub-keys, etc. See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task Specific Route'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/routes/items'
    Title                  = 'Task Specific Routes'
    Type                   = 'array'
    TypeName               = 'Routes'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/routes'
  Property 'schedulerId' =
    Default                = '-'
    Description            = 'Identifier for the scheduler that _defined_ this task, this can be an
    identifier for a user or a service like the `"task-graph-scheduler"`.
    **Task submitter required scopes**
    `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
    This scope is also necessary to _schedule_ a defined task, or _rerun_ a
    task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/schedulerId'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes (or scope-patterns) that the task is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which the task is
      authorized to use. This can be a string or a string
      ending with `*` which will authorize all scopes for
      which the string is a prefix.  Scopes must be composed of
      printable ASCII characters and spaces.
      **Task submitter required scopes** The same scope-pattern(s) given
      (otherwise a task could be submitted to perform an action that the
      task submitter is not authorized to perform).
      '
      Pattern                = '^[\x20-\x7e]*$'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Default                = 'map[]'
    Description            = 'Arbitrary key-value tags (only strings limited to 4k). These can be used
    to attach informal meta-data to a task. Use this for informal tags that
    tasks can be classified by. You can also think of strings here as
    candidates for formal meta-data. Something like
    `purpose: 'build' || 'test'` is a good example.
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/tags'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
    property isn't specified.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/taskGroupId'
  Property 'workerType' =
    Description            = 'Unique identifier for a worker-type within a specific provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#/properties/workerType'
Required               = '[provisionerId workerType payload metadata]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Template'
Type                   = 'object'
TypeName               = 'TaskTemplate'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-template.json#'


http://references.taskcluster.net/index/v1/api.json
===================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Task Index API Documentation'
Description = 'The task index, typically available at `index.taskcluster.net`, is
responsible for indexing tasks. In order to ensure that tasks can be
located by recency and/or arbitrary strings. Common use-cases includes

 * Locate tasks by git or mercurial `<revision>`, or
 * Locate latest task from given `<branch>`, such as a release.

**Index hierarchy**, tasks are indexed in a dot `.` separated hierarchy
called a namespace. For example a task could be indexed in
`<revision>.linux-64.release-build`. In this case the following
namespaces is created.

 1. `<revision>`, and,
 2. `<revision>.linux-64`

The inside the namespace `<revision>` you can find the namespace
`<revision>.linux-64` inside which you can find the indexed task
`<revision>.linux-64.release-build`. In this example you'll be able to
find build for a given revision.

**Task Rank**, when a task is indexed, it is assigned a `rank` (defaults
to `0`). If another task is already indexed in the same namespace with
the same lower or equal `rank`, the task will be overwritten. For example
consider a task indexed as `mozilla-central.linux-64.release-build`, in
this case on might choose to use a unix timestamp or mercurial revision
number as `rank`. This way the latest completed linux 64 bit release
build is always available at `mozilla-central.linux-64.release-build`.

**Indexed Data**, when a task is located in the index you will get the
`taskId` and an additional user-defined JSON blob that was indexed with
task. You can use this to store additional information you would like to
get additional from the index.

**Entry Expiration**, all indexed entries must have an expiration date.
Typically this defaults to one year, if not specified. If you are
indexing tasks to make it easy to find artifacts, consider using the
expiration date that the artifacts is assigned.

**Valid Characters**, all keys in a namespace `<key1>.<key2>` must be
in the form `/[a-zA-Z0-9_!~*'()%-]+/`. Observe that this is URL-safe and
that if you strictly want to put another character you can URL encode it.

**Indexing Routes**, tasks can be indexed using the API below, but the
most common way to index tasks is adding a custom route on the following
form `index.<namespace>`. In-order to add this route to a task you'll
need the following scope `queue:route:index.<namespace>`. When a task has
this route, it'll be indexed when the task is **completed successfully**.
The task will be indexed with `rank`, `data` and `expires` as specified
in `task.extra.index`, see example below:

```js
{
  payload:  { /* ... */ },
  routes: [
    // index.<namespace> prefixed routes, tasks CC'ed such a route will
    // be indexed under the given <namespace>
    "index.mozilla-central.linux-64.release-build",
    "index.<revision>.linux-64.release-build"
  ],
  extra: {
    // Optional details for indexing service
    index: {
      // Ordering, this taskId will overwrite any thing that has
      // rank <= 4000 (defaults to zero)
      rank:       4000,

      // Specify when the entries expires (Defaults to 1 year)
      expires:          new Date().toJSON(),

      // A little informal data to store along with taskId
      // (less 16 kb when encoded as JSON)
      data: {
        hgRevision:   "...",
        commitMessae: "...",
        whatever...
      }
    },
    // Extra properties for other services...
  }
  // Other task properties...
}
```

**Remark**, when indexing tasks using custom routes, it's also possible
to listen for messages about these tasks. Which is quite convenient, for
example one could bind to `route.index.mozilla-central.*.release-build`,
and pick up all messages about release builds. Hence, it is a
good idea to document task index hierarchies, as these make up extension
points in their own.'
Base URL    = 'https://index.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'findTask'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'
    Entry Title       = 'Find Indexed Task'
    Entry Description = 'Find task by namespace, if no task existing for the given namespace, this
API end-point respond `404`.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/namespaces/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'listNamespaces'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'
    Entry Title       = 'List Namespaces'
    Entry Description = 'List the namespaces immediately under a given namespace. This end-point
list up to 1000 namespaces. If more namespaces are present a
`continuationToken` will be returned, which can be given in the next
request. For the initial request, the payload should be an empty JSON
object.

**Remark**, this end-point is designed for humans browsing for tasks, not
services, as that makes little sense.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/tasks/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'listTasks'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'
    Entry Title       = 'List Tasks'
    Entry Description = 'List the tasks immediately under a given namespace. This end-point
list up to 1000 tasks. If more tasks are present a
`continuationToken` will be returned, which can be given in the next
request. For the initial request, the payload should be an empty JSON
object.

**Remark**, this end-point is designed for humans browsing for tasks, not
services, as that makes little sense.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/task/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'insertTask'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[index:insert-task:<namespace>]]'
    Entry Input       = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'
    Entry Title       = 'Insert Task into Index'
    Entry Description = 'Insert a task into the index. Please see the introduction above, for how
to index successfully completed tasks automatically, using custom routes.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<namespace>/artifacts/<name>'
    Entry Args        = '[namespace name]'
    Entry Query        = '[]'
    Entry Name        = 'findArtifactFromTask'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[queue:get-artifact:<name>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get Artifact From Indexed Task'
    Entry Description = 'Find task by namespace and redirect to artifact with given `name`,
if no task existing for the given namespace, this API end-point respond
`404`.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/index/v1/indexed-task-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Representation of an indexed task.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'
Properties
  Property 'data' =
    Description            = 'Data that was reported with the task. This is an arbitrary JSON object.
    '
    Title                  = 'Task Specific Data'
    Type                   = 'object'
    TypeName               = 'Data'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/data'
  Property 'expires' =
    Description            = 'Date at which this entry expires from the task index.
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/expires'
  Property 'namespace' =
    Description            = 'Namespace of the indexed task, used to find the indexed task in the index.
    '
    MaxLength              = '255'
    Title                  = 'Namespace'
    Type                   = 'string'
    TypeName               = 'Namespace'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/namespace'
  Property 'rank' =
    Description            = 'If multiple tasks are indexed with the same `namespace` the task with the
    highest `rank` will be stored and returned in later requests. If two tasks
    has the same `rank` the latest task will be stored.
    '
    Title                  = 'Rank'
    Type                   = 'number'
    TypeName               = 'Rank'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/rank'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/taskId'
Required               = '[namespace taskId rank data expires]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Indexed Task Response'
Type                   = 'object'
TypeName               = 'IndexedTaskResponse'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'


http://schemas.taskcluster.net/index/v1/insert-task-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Representation of an a task to be indexed.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#'
Properties
  Property 'data' =
    Description            = 'This is an arbitrary JSON object. Feel free to put whatever data you want
    here, but do limit it, you'll get errors if you store more than 32KB.
    So stay well, below that limit.
    '
    Title                  = 'Task Specific Data'
    Type                   = 'object'
    TypeName               = 'Data'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/data'
  Property 'expires' =
    Description            = 'Date at which this entry expires from the task index.
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/expires'
  Property 'rank' =
    Description            = 'If multiple tasks are indexed with the same `namespace` the task with the
    highest `rank` will be stored and returned in later requests. If two tasks
    has the same `rank` the latest task will be stored.
    '
    Title                  = 'Rank'
    Type                   = 'number'
    TypeName               = 'Rank'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/rank'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/taskId'
Required               = '[taskId rank data expires]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Insert Task Request'
Type                   = 'object'
TypeName               = 'InsertTaskRequest'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#'


http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'Request to list namespaces within a given namespace.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token previously returned in a response to this list
    request. This property is optional and should not be provided for first
    requests.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#/properties/continuationToken'
  Property 'limit' =
    Default                = '1000'
    Description            = 'Maximum number of results per page. If there are more results than this
    a continuation token will be return.
    '
    Maximum                = '1000'
    Minimum                = '1'
    Title                  = 'Result limit'
    Type                   = 'integer'
    TypeName               = 'Limit'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#/properties/limit'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Namespaces Request'
Type                   = 'object'
TypeName               = 'ListNamespacesRequest'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#'


http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Response from a request to list namespaces within a given namespace.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token is returned if there are more results than listed
    here. You can optionally provide the token in the request payload to
    load the additional results.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/continuationToken'
  Property 'namespaces' =
    Description            = 'List of namespaces.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Representation of a namespace that contains indexed tasks.
      '
      Properties
        Property 'expires' =
          Description            = 'Date at which this entry, and by implication all entries below it,
          expires from the task index.
          '
          Format                 = 'date-time'
          Title                  = 'Expiration'
          Type                   = 'string'
          TypeName               = 'Expires'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items/properties/expires'
        Property 'name' =
          Description            = 'Name of namespace within it's parent namespace.
          '
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items/properties/name'
        Property 'namespace' =
          Description            = 'Fully qualified name of the namespace, you can use this to list
          namespaces or tasks under this namespace.
          '
          MaxLength              = '255'
          Title                  = 'Namespace'
          Type                   = 'string'
          TypeName               = 'Namespace'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items/properties/namespace'
      Required               = '[namespace name expires]'
      Title                  = 'Namespace'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items'
    Title                  = 'Namespaces'
    Type                   = 'array'
    TypeName               = 'Namespaces'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces'
Required               = '[namespaces]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Namespaces Response'
Type                   = 'object'
TypeName               = 'ListNamespacesResponse'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'


http://schemas.taskcluster.net/index/v1/list-tasks-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Request to list tasks within a given namespace.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token previously returned in a response to this list
    request. This property is optional and should not be provided for first
    requests.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#/properties/continuationToken'
  Property 'limit' =
    Default                = '1000'
    Description            = 'Maximum number of results per page. If there are more results than this
    a continuation token will be return.
    '
    Maximum                = '1000'
    Minimum                = '1'
    Title                  = 'Result limit'
    Type                   = 'integer'
    TypeName               = 'Limit'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#/properties/limit'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Tasks Request'
Type                   = 'object'
TypeName               = 'ListTasksRequest'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#'


http://schemas.taskcluster.net/index/v1/list-tasks-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Representation of an indexed task.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token is returned if there are more results than listed
    here. You can optionally provide the token in the request payload to
    load the additional results.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/continuationToken'
  Property 'tasks' =
    Description            = 'List of tasks.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Representation of a task.
      '
      Properties
        Property 'data' =
          Description            = 'Data that was reported with the task. This is an arbitrary JSON
          object.
          '
          Title                  = 'Task Specific Data'
          Type                   = 'object'
          TypeName               = 'Data'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/data'
        Property 'expires' =
          Description            = 'Date at which this entry expires from the task index.
          '
          Format                 = 'date-time'
          Title                  = 'Expiration'
          Type                   = 'string'
          TypeName               = 'Expires'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/expires'
        Property 'namespace' =
          Description            = 'Namespace of the indexed task, used to find the indexed task in the
          index.
          '
          MaxLength              = '255'
          Title                  = 'Namespace'
          Type                   = 'string'
          TypeName               = 'Namespace'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/namespace'
        Property 'rank' =
          Description            = 'If multiple tasks are indexed with the same `namespace` the task
          with the highest `rank` will be stored and returned in later
          requests. If two tasks has the same `rank` the latest task will be
          stored.
          '
          Title                  = 'Rank'
          Type                   = 'number'
          TypeName               = 'Rank'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/rank'
        Property 'taskId' =
          Description            = 'Unique task identifier, this is UUID encoded as
          [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
          stripped of `=` padding.
          '
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Title                  = 'Task Identifier'
          Type                   = 'string'
          TypeName               = 'TaskID'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/taskId'
      Required               = '[namespace taskId rank data expires]'
      Title                  = 'Task'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items'
    Title                  = 'Tasks'
    Type                   = 'array'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks'
Required               = '[tasks]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Tasks Response'
Type                   = 'object'
TypeName               = 'ListTasksResponse'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'


http://references.taskcluster.net/purge-cache/v1/api.json
=========================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Purge Cache API Documentation'
Description = 'The purge-cache service, typically available at
`purge-cache.taskcluster.net`, is responsible for publishing a pulse
message for workers, so they can purge cache upon request.

This document describes the API end-point for publishing the pulse
message. This is mainly intended to be used by tools.'
Base URL    = 'https://purge-cache.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/purge-cache/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'purgeCache'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[purge-cache:<provisionerId>/<workerType>:<cacheName>]]'
    Entry Input       = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#'
    Entry Output      = ''
    Entry Title       = 'Purge Worker Cache'
    Entry Description = 'Publish a purge-cache message to purge caches named `cacheName` with
`provisionerId` and `workerType` in the routing-key. Workers should
be listening for this message and purge caches when they see it.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Request that a message be published to purge a specific cache.
'
ID                     = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#'
Properties
  Property 'cacheName' =
    Description            = 'Name of cache to purge. Notice that if a `workerType` have multiple kinds
    of caches (with independent names), it should purge all caches identified
    by `cacheName` regardless of cache type.
    '
    Type                   = 'string'
    TypeName               = 'CacheName'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#/properties/cacheName'
Required               = '[cacheName]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Purge Cache Request'
Type                   = 'object'
TypeName               = 'PurgeCacheRequest'
SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#'


http://references.taskcluster.net/purge-cache/v1/exchanges.json
===============================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Purge-Cache Exchanges'
Description     = 'The purge-cache service, typically available at
`purge-cache.taskcluster.net`, is responsible for publishing a pulse
message for workers, so they can purge cache upon request.

This document describes the exchange offered for workers by the
cache-purge service.'
Exchange Prefix = 'exchange/taskcluster-purge-cache/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'purge-cache'
    Entry Name        = 'purgeCache'
    Entry Title       = 'Purge Cache Messages'
    Entry Description = 'When a cache purge is requested  a message will be posted on this
exchange with designated `provisionerId` and `workerType` in the
routing-key and the name of the `cacheFolder` as payload'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` under which to purge cache.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` for which to purge cache.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'


http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a specific cache should be purged
'
ID                     = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'
Properties
  Property 'cacheName' =
    Description            = 'Name of cache to purge. Notice that if a `workerType` have multiple kinds
    of caches (with independent names), it should purge all caches identified
    by `cacheName` regardless of cache type.
    '
    Type                   = 'string'
    TypeName               = 'CacheName'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/cacheName'
  Property 'provisionerId' =
    Description            = '`provisionerId` under which the `workerType` we want to purge for exists.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/provisionerId'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/version'
  Property 'workerType' =
    Description            = '`workerType` we wish to purge cache for.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/workerType'
Required               = '[version provisionerId workerType cacheName]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Purge Cache Message'
Type                   = 'object'
TypeName               = 'PurgeCacheMessage'
SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'


http://references.taskcluster.net/queue/v1/api.json
===================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Queue API Documentation'
Description = 'The queue, typically available at `queue.taskcluster.net`, is responsible
for accepting tasks and track their state as they are executed by
workers. In order ensure they are eventually resolved.

This document describes the API end-points offered by the queue. These 
end-points targets the following audience:
 * Schedulers, who create tasks to be executed,
 * Workers, who execute tasks, and
 * Tools, that wants to inspect the state of a task.'
Base URL    = 'https://queue.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'task'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task.json#'
    Entry Title       = 'Get Task Definition'
    Entry Description = 'This end-point will return the task-definition. Notice that the task
definition may have been modified by queue, if an optional property isn't
specified the queue may provide a default value.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/status'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'status'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Get task status'
    Entry Description = 'Get task status structure from `taskId`'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task-group/<taskGroupId>/list'
    Entry Args        = '[taskGroupId]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listTaskGroup'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#'
    Entry Title       = 'List Task Group'
    Entry Description = 'List taskIds of all tasks sharing the same `taskGroupId`.

As a task-group may contain an unbounded number of tasks, this end-point
may return a `continuationToken`. To continue listing tasks you must
`listTaskGroup` again with the `continuationToken` as the query-string
option `continuationToken`.

By default this end-point will try to return up to 1000 members in one
request. But it **may return less**, even if more tasks are available.
It may also return a `continuationToken` even though there are no more
results. However, you can only be sure to have seen all results if you
keep calling `listTaskGroup` with the last `continationToken` until you
get a result without a `continuationToken`.

If you're not interested in listing all the members at once, you may
use the query-string option `limit` to return fewer.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/task/<taskId>'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'createTask'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:create-task:<provisionerId>/<workerType>] [queue:define-task:<provisionerId>/<workerType> queue:task-group-id:<schedulerId>/<taskGroupId> queue:schedule-task:<schedulerId>/<taskGroupId>/<taskId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Create New Task'
    Entry Description = 'Create a new task, this is an **idempotent** operation, so repeat it if
you get an internal server error or network connection is dropped.

**Task `deadline´**, the deadline property can be no more than 5 days
into the future. This is to limit the amount of pending tasks not being
taken care of. Ideally, you should use a much shorter deadline.

**Task expiration**, the `expires` property must be greater than the
task `deadline`. If not provided it will default to `deadline` + one
year. Notice, that artifacts created by task must expire before the task.

**Task specific routing-keys**, using the `task.routes` property you may
define task specific routing-keys. If a task has a task specific 
routing-key: `<route>`, then when the AMQP message about the task is
published, the message will be CC'ed with the routing-key: 
`route.<route>`. This is useful if you want another component to listen
for completed tasks you have posted.  The caller must have scope
`queue:route:<route>` for each route.

**Important** Any scopes the task requires are also required for creating
the task. Please see the Request Payload (Task Definition) for details.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/define'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'defineTask'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:define-task:<provisionerId>/<workerType>] [queue:create-task:<provisionerId>/<workerType>] [queue:define-task:<provisionerId>/<workerType> queue:task-group-id:<schedulerId>/<taskGroupId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Define Task'
    Entry Description = 'Define a task without scheduling it. This API end-point allows you to
upload a task definition without having scheduled. The task won't be
reported as pending until it is scheduled, see the scheduleTask API 
end-point.

The purpose of this API end-point is allow schedulers to upload task
definitions without the tasks becoming _pending_ immediately. This useful
if you have a set of dependent tasks. Then you can upload all the tasks
and when the dependencies of a tasks have been resolved, you can schedule
the task by calling `/task/:taskId/schedule`. This eliminates the need to
store tasks somewhere else while waiting for dependencies to resolve.

**Important** Any scopes the task requires are also required for defining
the task. Please see the Request Payload (Task Definition) for details.

**Note** this operation is **idempotent**, as long as you upload the same
task definition as previously defined this operation is safe to retry.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/schedule'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'scheduleTask'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:schedule-task assume:scheduler-id:<schedulerId>/<taskGroupId>] [queue:schedule-task:<schedulerId>/<taskGroupId>/<taskId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Schedule Defined Task'
    Entry Description = 'If you have define a task using `defineTask` API end-point, then you
can schedule the task to be scheduled using this method.
This will announce the task as pending and workers will be allowed, to
claim it and resolved the task.

**Note** this operation is **idempotent** and will not fail or complain
if called with `taskId` that is already scheduled, or even resolved.
To reschedule a task previously resolved, use `rerunTask`.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/rerun'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'rerunTask'
    Entry Stability   = 'deprecated'
    Entry Scopes      = '[[queue:rerun-task assume:scheduler-id:<schedulerId>/<taskGroupId>] [queue:rerun-task:<schedulerId>/<taskGroupId>/<taskId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Rerun a Resolved Task'
    Entry Description = 'This method _reruns_ a previously resolved task, even if it was
_completed_. This is useful if your task completes unsuccessfully, and
you just want to run it from scratch again. This will also reset the
number of `retries` allowed.

Remember that `retries` in the task status counts the number of runs that
the queue have started because the worker stopped responding, for example
because a spot node died.

**Remark** this operation is idempotent, if you try to rerun a task that
isn't either `failed` or `completed`, this operation will just return the
current task status.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/cancel'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'cancelTask'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:cancel-task assume:scheduler-id:<schedulerId>/<taskGroupId>] [queue:cancel-task:<schedulerId>/<taskGroupId>/<taskId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Cancel Task'
    Entry Description = 'This method will cancel a task that is either `unscheduled`, `pending` or
`running`. It will resolve the current run as `exception` with
`reasonResolved` set to `canceled`. If the task isn't scheduled yet, ie.
it doesn't have any runs, an initial run will be added and resolved as
described above. Hence, after canceling a task, it cannot be scheduled
with `queue.scheduleTask`, but a new run can be created with
`queue.rerun`. These semantics is equivalent to calling
`queue.scheduleTask` immediately followed by `queue.cancelTask`.

**Remark** this operation is idempotent, if you try to cancel a task that
isn't `unscheduled`, `pending` or `running`, this operation will just
return the current task status.'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/poll-task-url/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'pollTaskUrls'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:poll-task-urls assume:worker-type:<provisionerId>/<workerType>] [queue:poll-task-urls:<provisionerId>/<workerType>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#'
    Entry Title       = 'Get Urls to Poll Pending Tasks'
    Entry Description = 'Get a signed URLs to get and delete messages from azure queue.
Once messages are polled from here, you can claim the referenced task
with `claimTask`, and afterwards you should always delete the message.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/claim'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'claimTask'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:claim-task assume:worker-type:<provisionerId>/<workerType> assume:worker-id:<workerGroup>/<workerId>] [queue:claim-task:<provisionerId>/<workerType> queue:worker-id:<workerGroup>/<workerId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#'
    Entry Title       = 'Claim task'
    Entry Description = 'claim a task, more to be added later...'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/reclaim'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reclaimTask'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:claim-task assume:worker-id:<workerGroup>/<workerId>] [queue:reclaim-task:<taskId>/<runId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#'
    Entry Title       = 'Reclaim task'
    Entry Description = 'reclaim a task more to be added later...'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/completed'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reportCompleted'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:resolve-task assume:worker-id:<workerGroup>/<workerId>] [queue:resolve-task:<taskId>/<runId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Report Run Completed'
    Entry Description = 'Report a task completed, resolving the run as `completed`.'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/failed'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reportFailed'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:resolve-task assume:worker-id:<workerGroup>/<workerId>] [queue:resolve-task:<taskId>/<runId>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Report Run Failed'
    Entry Description = 'Report a run failed, resolving the run as `failed`. Use this to resolve
a run that failed because the task specific code behaved unexpectedly.
For example the task exited non-zero, or didn't produce expected output.

Don't use this if the task couldn't be run because if malformed payload,
or other unexpected condition. In these cases we have a task exception,
which should be reported with `reportException`.'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/exception'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reportException'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:resolve-task assume:worker-id:<workerGroup>/<workerId>] [queue:resolve-task:<taskId>/<runId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Report Task Exception'
    Entry Description = 'Resolve a run as _exception_. Generally, you will want to report tasks as
failed instead of exception. You should `reportException` if,

  * The `task.payload` is invalid,
  * Non-existent resources are referenced,
  * Declared actions cannot be executed due to unavailable resources,
  * The worker had to shutdown prematurely, or,
  * The worker experienced an unknown error.

Do not use this to signal that some user-specified code crashed for any
reason specific to this code. If user-specific code hits a resource that
is temporarily unavailable worker should report task _failed_.'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts/<name>'
    Entry Args        = '[taskId runId name]'
    Entry Query        = '[]'
    Entry Name        = 'createArtifact'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:create-artifact:<name> assume:worker-id:<workerGroup>/<workerId>] [queue:create-artifact:<taskId>/<runId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#'
    Entry Title       = 'Create Artifact'
    Entry Description = 'This API end-point creates an artifact for a specific run of a task. This
should **only** be used by a worker currently operating on this task, or
from a process running within the task (ie. on the worker).

All artifacts must specify when they `expires`, the queue will
automatically take care of deleting artifacts past their
expiration point. This features makes it feasible to upload large
intermediate artifacts from data processing applications, as the
artifacts can be set to expire a few days later.

We currently support 4 different `storageType`s, each storage type have
slightly different features and in some cases difference semantics.

**S3 artifacts**, is useful for static files which will be stored on S3.
When creating an S3 artifact the queue will return a pre-signed URL
to which you can do a `PUT` request to upload your artifact. Note
that `PUT` request **must** specify the `content-length` header and
**must** give the `content-type` header the same value as in the request
to `createArtifact`.

**Azure artifacts**, are stored in _Azure Blob Storage_ service, which
given the consistency guarantees and API interface offered by Azure is
more suitable for artifacts that will be modified during the execution
of the task. For example docker-worker has a feature that persists the
task log to Azure Blob Storage every few seconds creating a somewhat
live log. A request to create an Azure artifact will return a URL
featuring a [Shared-Access-Signature](http://msdn.microsoft.com/en-us/library/azure/dn140256.aspx),
refer to MSDN for further information on how to use these.
**Warning: azure artifact is currently an experimental feature subject
to changes and data-drops.**

**Reference artifacts**, only consists of meta-data which the queue will
store for you. These artifacts really only have a `url` property and
when the artifact is requested the client will be redirect the URL
provided with a `303` (See Other) redirect. Please note that we cannot
delete artifacts you upload to other service, we can only delete the
reference to the artifact, when it expires.

**Error artifacts**, only consists of meta-data which the queue will
store for you. These artifacts are only meant to indicate that you the
worker or the task failed to generate a specific artifact, that you
would otherwise have uploaded. For example docker-worker will upload an
error artifact, if the file it was supposed to upload doesn't exists or
turns out to be a directory. Clients requesting an error artifact will
get a `403` (Forbidden) response. This is mainly designed to ensure that
dependent tasks can distinguish between artifacts that were suppose to
be generated and artifacts for which the name is misspelled.

**Artifact immutability**, generally speaking you cannot overwrite an
artifact when created. But if you repeat the request with the same
properties the request will succeed as the operation is idempotent.
This is useful if you need to refresh a signed URL while uploading.
Do not abuse this to overwrite artifacts created by another entity!
Such as worker-host overwriting artifact created by worker-code.

As a special case the `url` property on _reference artifacts_ can be
updated. You should only use this to update the `url` property for
reference artifacts your process has created.'
Entry 15    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts/<name>'
    Entry Args        = '[taskId runId name]'
    Entry Query        = '[]'
    Entry Name        = 'getArtifact'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:get-artifact:<name>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get Artifact from Run'
    Entry Description = 'Get artifact by `<name>` from a specific run.

**Public Artifacts**, in-order to get an artifact you need the scope
`queue:get-artifact:<name>`, where `<name>` is the name of the artifact.
But if the artifact `name` starts with `public/`, authentication and
authorization is not necessary to fetch the artifact.

**API Clients**, this method will redirect you to the artifact, if it is
stored externally. Either way, the response may not be JSON. So API
client users might want to generate a signed URL for this end-point and
use that URL with a normal HTTP client.'
Entry 16    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/artifacts/<name>'
    Entry Args        = '[taskId name]'
    Entry Query        = '[]'
    Entry Name        = 'getLatestArtifact'
    Entry Stability   = 'stable'
    Entry Scopes      = '[[queue:get-artifact:<name>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get Artifact from Latest Run'
    Entry Description = 'Get artifact by `<name>` from the last run of a task.

**Public Artifacts**, in-order to get an artifact you need the scope
`queue:get-artifact:<name>`, where `<name>` is the name of the artifact.
But if the artifact `name` starts with `public/`, authentication and
authorization is not necessary to fetch the artifact.

**API Clients**, this method will redirect you to the artifact, if it is
stored externally. Either way, the response may not be JSON. So API
client users might want to generate a signed URL for this end-point and
use that URL with a normal HTTP client.

**Remark**, this end-point is slightly slower than
`queue.getArtifact`, so consider that if you already know the `runId` of
the latest run. Otherwise, just us the most convenient API end-point.'
Entry 17    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'listArtifacts'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'
    Entry Title       = 'Get Artifacts from Run'
    Entry Description = 'Returns a list of artifacts and associated meta-data for a given run.'
Entry 18    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/artifacts'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'listLatestArtifacts'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'
    Entry Title       = 'Get Artifacts from Latest Run'
    Entry Description = 'Returns a list of artifacts and associated meta-data for the latest run
from the given task.'
Entry 19    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/pending/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'pendingTasks'
    Entry Stability   = 'stable'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#'
    Entry Title       = 'Get Number of Pending Tasks'
    Entry Description = 'Get an approximate number of pending tasks for the given `provisionerId`
and `workerType`.

The underlying Azure Storage Queues only promises to give us an estimate.
Furthermore, we cache the result in memory for 20 seconds. So consumers
should be no means expect this to be an accurate number.
It is, however, a solid estimate of the number of pending tasks.'
Entry 20    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/queue/v1/create-task-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Definition of a task that can be scheduled
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
Properties
  Property 'created' =
    Description            = 'Creation time of task'
    Format                 = 'date-time'
    Title                  = 'Created'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/created'
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future'
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted.
    Notice that all artifacts for the must have an expiration that is no
    later than this. If this property isn't it will be set to `deadline`
    plus one year (this default may subject to change).
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/expires'
  Property 'extra' =
    Default                = 'map[]'
    Description            = 'Object with properties that can hold any kind of extra data that should be
    associated with the task. This can be data for the task which doesn't
    fit into `payload`, or it can supplementary data for use in services
    listening for events from this task. For example this could be details to
    display on _treeherder_, or information for indexing the task. Please, try
    to put all related information under one property, so `extra` data keys
    for treeherder reporting and task indexing don't conflict, hence, we have
    reusable services. **Warning**, do not stuff large data-sets in here,
    task definitions should not take-up multiple MiBs.
    '
    Title                  = 'Extra Data'
    Type                   = 'object'
    TypeName               = 'Extra'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/extra'
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of the task, please **explain** what the
        task does. A few lines of documentation is not going to hurt you.
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task, used to very briefly given an idea about
        what the task does.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task, e.g. the person who did
        `hg push`. The person we should contact to ask why this task is here.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task, should specify a file, revision and
        repository. This should be place someone can go an do a git/hg blame
        to who came up with recipe for this task.
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata'
  Property 'payload' =
    Description            = 'Task-specific payload following worker-specific format. For example the
    `docker-worker` requires keys like: `image`, `commands` and
    `features`. Refer to the documentation of `docker-worker` for details.
    '
    Title                  = 'Task Payload'
    Type                   = 'object'
    TypeName               = 'Payload'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/payload'
  Property 'priority' =
    Default                = 'normal'
    Description            = 'Priority of task, this defaults to `normal`. Additional levels may be
    added later.
    **Task submitter required scopes** `queue:task-priority:high` for high
    priority tasks.
    '
    Enum                   = '[high normal]'
    Title                  = 'Task Priority'
    Type                   = 'string'
    TypeName               = 'Priority'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/priority'
  Property 'provisionerId' =
    Description            = 'Unique identifier for a provisioner, that can supply specified
    `workerType`
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/provisionerId'
  Property 'retries' =
    Default                = '5'
    Description            = 'Number of times to retry the task in case of infrastructure issues.
    An _infrastructure issue_ is a worker node that crashes or is shutdown,
    these events are to be expected.
    '
    Maximum                = '49'
    Minimum                = '0'
    Title                  = 'Retries'
    Type                   = 'integer'
    TypeName               = 'Retries'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/retries'
  Property 'routes' =
    Default                = '[]'
    Description            = 'List of task specific routes, AMQP messages will be CC'ed to these routes.
    **Task submitter required scopes** `queue:route:<route>` for
    each route given.
    '
    Items
      Description            = 'A task specific route, AMQP messages will be CC'ed with a routing key
      matching `route.<task-specific route>`. It's possible to dot (`.`) in
      the task specific route to make sub-keys, etc. See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task Specific Route'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/routes/items'
    Title                  = 'Task Specific Routes'
    Type                   = 'array'
    TypeName               = 'Routes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/routes'
  Property 'schedulerId' =
    Default                = '-'
    Description            = 'Identifier for the scheduler that _defined_ this task, this can be an
    identifier for a user or a service like the `"task-graph-scheduler"`.
    **Task submitter required scopes**
    `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
    This scope is also necessary to _schedule_ a defined task, or _rerun_ a
    task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/schedulerId'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes (or scope-patterns) that the task is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which the task is
      authorized to use. This can be a string or a string
      ending with `*` which will authorize all scopes for
      which the string is a prefix.  Scopes must be composed of
      printable ASCII characters and spaces.
      **Task submitter required scopes** The same scope-pattern(s) given
      (otherwise a task could be submitted to perform an action that the
      task submitter is not authorized to perform).
      '
      Pattern                = '^[\x20-\x7e]*$'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Default                = 'map[]'
    Description            = 'Arbitrary key-value tags (only strings limited to 4k). These can be used
    to attach informal meta-data to a task. Use this for informal tags that
    tasks can be classified by. You can also think of strings here as
    candidates for formal meta-data. Something like
    `purpose: 'build' || 'test'` is a good example.
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/tags'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
    property isn't specified.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/taskGroupId'
  Property 'workerType' =
    Description            = 'Unique identifier for a worker-type within a specific provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/workerType'
Required               = '[provisionerId workerType created deadline payload metadata]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Definition Request'
Type                   = 'object'
TypeName               = 'TaskDefinitionRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'


http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'List of artifacts for a given `taskId` and `runId`.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'
Properties
  Property 'artifacts' =
    Description            = 'List of artifacts for given `taskId` and `runId`.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Information about an artifact for the given `taskId` and `runId`.
      '
      Properties
        Property 'contentType' =
          Description            = 'Mimetype for the artifact that was created.
          '
          MaxLength              = '255'
          Title                  = 'Content-Type'
          Type                   = 'string'
          TypeName               = 'ContentType'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/contentType'
        Property 'expires' =
          Description            = 'Date and time after which the artifact created will be automatically
          deleted by the queue.
          '
          Format                 = 'date-time'
          Title                  = 'Artifact Expiration'
          Type                   = 'string'
          TypeName               = 'Expires'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/expires'
        Property 'name' =
          Description            = 'Name of the artifact that was created, this is useful if you want to
          attempt to fetch the artifact.
          '
          MaxLength              = '1024'
          Title                  = 'Artifact Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/name'
        Property 'storageType' =
          Description            = 'This is the `storageType` for the request that was used to create
          the artifact.
          '
          Enum                   = '[s3 azure reference error]'
          Title                  = 'Artifact Storage-Type'
          Type                   = 'string'
          TypeName               = 'StorageType'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/storageType'
      Required               = '[storageType name expires contentType]'
      Title                  = 'Artifact'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items'
    Title                  = 'Artifact List'
    Type                   = 'array'
    TypeName               = 'Artifacts'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts'
Required               = '[artifacts]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Artifacts Response'
Type                   = 'object'
TypeName               = 'ListArtifactsResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'


http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#
======================================================================
Description            = 'Response from a `listTaskGroup` request.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option if all the
    tasks in the task-group wasn't included in this result.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called `listTaskGroup` with `continuationToken`
    until you got a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/continuationToken'
  Property 'members' =
    Description            = 'List of `taskId` for tasks in this task-group.
    '
    Items
      Description            = '`TaskId` for a task in the task-group being listed.
      '
      Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
      Title                  = 'Task Identifier'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/members/items'
    Title                  = 'Members of the Task-Group'
    Type                   = 'array'
    TypeName               = 'Members'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/members'
  Property 'taskGroupId' =
    Description            = 'Identifier for the task-group being listed.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/taskGroupId'
Required               = '[taskGroupId members]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Task-Group Response'
Type                   = 'object'
TypeName               = 'ListTaskGroupResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#'


http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#
====================================================================
Description            = 'Response to a request for the number of pending tasks for a given
`provisionerId` and `workerType`.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#'
Properties
  Property 'pendingTasks' =
    Description            = 'An approximate number of pending tasks for the given `provisionerId` and
    `workerType`. This is based on Azure Queue Storage meta-data API, thus,
    number of reported here may be higher than actual number of pending tasks.
    But there cannot be more pending tasks reported here. Ie. this is an
    **upper-bound** on the number of pending tasks.
    '
    Minimum                = '0'
    Title                  = 'Number of Pending Tasks'
    Type                   = 'integer'
    TypeName               = 'PendingTasks'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#/properties/pendingTasks'
  Property 'provisionerId' =
    Description            = 'Unique identifier for the provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#/properties/provisionerId'
  Property 'workerType' =
    Description            = 'Identifier for worker type within the specified provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#/properties/workerType'
Required               = '[provisionerId workerType pendingTasks]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Count Pending Tasks Response'
Type                   = 'object'
TypeName               = 'CountPendingTasksResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#'


http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#
=====================================================================
Description            = 'Response to request for poll task urls.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#'
Properties
  Property 'expires' =
    Description            = 'Date and time after which the signed URLs provided in this response
    expires and not longer works for authentication.
    '
    Format                 = 'date-time'
    Title                  = 'Signed URL Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/expires'
  Property 'queues' =
    Description            = 'List of signed URLs for queues to poll tasks from, they must be called
    in the order they are given. As the first entry in this array **may**
    have higher priority.
    '
    Items
      Description            = 'Object holding two signed URLs for an azure queue, one for fetching
      messages, and another for deleting messages. Remember to `claimTask`
      before deleting the message, and delete message even if the `claimTask`
      operation fails with a 400 status code. Don't delete it on other status
      codes!
      '
      Properties
        Property 'signedDeleteUrl' =
          Description            = 'Signed URL to delete messages that have been received using the
          `signedPollUrl`. You **must** do this to avoid receiving the same
          message again.
          To use this URL you must substitute `{{messageId}}` and
          `{{popReceipt}}` with `MessageId` and `PopReceipt` from the XML
          response the `signedPollUrl` gave you. It is important that you
          `encodeURIComponent` both `MessageId` and `PopReceipt` prior to
          substitution, otherwise you will experience intermittent failures!
          Note this URL only works with `DELETE` request.
          '
          Format                 = 'uri'
          Title                  = 'Signed Delete Message URL'
          Type                   = 'string'
          TypeName               = 'SignedDeleteURL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues/items/properties/signedDeleteUrl'
        Property 'signedPollUrl' =
          Description            = 'Signed URL to get message from the Azure Queue Storage queue,
          that holds messages for the given `provisionerId` and `workerType`.
          Note that this URL returns XML, see documentation for the Azure
          Queue Storage
          [REST API](http://msdn.microsoft.com/en-us/library/azure/dd179474.aspx)
          for details.
          When you have a message you can use `claimTask` to claim the task.
          You will need to parse the XML reponse and base64 decode and
          JSON parse the `MessageText`.
          After you have called `claimTask` you **must** us the
          `signedDeleteUrl` to delete the message.
          **Remark**, you are allowed to append `&numofmessages=N`,
          where N < 32, to the URLs if you wish to obtain more than one
          message at the time.
          '
          Format                 = 'uri'
          Title                  = 'Signed Get Message URL'
          Type                   = 'string'
          TypeName               = 'SignedPollURL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues/items/properties/signedPollUrl'
      Required               = '[signedPollUrl signedDeleteUrl]'
      Title                  = 'Signed URLs for a queue'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues/items'
    Title                  = 'Queues To Poll From'
    Type                   = 'array'
    TypeName               = 'Queues'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues'
Required               = '[queues expires]'
Schema                 = 'http://json-schema.org/draft-04/schema#"'
Title                  = 'Poll Task Urls Response'
Type                   = 'object'
TypeName               = 'PollTaskUrlsResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#
===================================================================
Description            = 'Request a authorization to put and artifact or posting of a URL as an artifact. Note that the `storageType` property is referenced in the response as well.'
ID                     = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#'
OneOf
  Item '0' =
    Additional Properties  = 'false'
    Description            = 'Request for a signed PUT URL that will allow you to upload an artifact
    to an S3 bucket managed by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, when uploading artifact to the signed
        `PUT` URL returned from this request this must given with the
         `ContentType` header. Please, provide correct mime-type,
         this make tooling a lot easier, specifically,
         always using `application/json` for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the artifact should be deleted. Note, that
        these will be collected over time, and artifacts may remain
        available after expiration. S3 based artifacts are identified in
        azure table storage and explicitly deleted on S3 after expiration.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/expires'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `'s3'`
        '
        Enum                   = '[s3]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/storageType'
    Required               = '[storageType expires contentType]'
    Title                  = 'S3 Artifact Request'
    Type                   = 'object'
    TypeName               = 'S3ArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]'
  Item '1' =
    Additional Properties  = 'false'
    Description            = 'Request for an Azure Shared Access Signature (SAS) that will allow
    you to upload an artifact to an Azure blob storage container managed
    by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, when uploading artifact please use the same
        `Content-Type`, consistently using the correct mime-type make
        tooling a lot easier, specifically, always using `application/json`
        for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the artifact should be deleted.
        Note, that these will be collected over time, and artifacts may
        remain available after expiration. Azure based artifacts are
        identified in azure table storage and explicitly deleted in the
        azure storage container after expiration.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/expires'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `azure`
        '
        Enum                   = '[azure]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/storageType'
    Required               = '[storageType expires contentType]'
    Title                  = 'Azure Artifact Request'
    Type                   = 'object'
    TypeName               = 'AzureArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]'
  Item '2' =
    Additional Properties  = 'false'
    Description            = 'Request the queue to redirect to a URL for a given artifact.
    This allows you to reference artifacts that aren't managed by the queue.
    The queue will still authenticate the request, so depending on the level
    of secrecy required, secret URLs **might** work. Note, this is mainly
    useful for public artifacts, for example temporary files directly
    stored on the worker host and only available there for a specific
    amount of time.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type for the resource to which the queue should
        redirect. Please use the same `Content-Type`, consistently using
        the correct mime-type make tooling a lot easier, specifically,
        always using `application/json` for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the queue should no longer redirect to this URL.
        Note, that the queue will and cannot delete the resource your URL
        references, you are responsible for doing that yourself.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/expires'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `reference`
        '
        Enum                   = '[reference]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/storageType'
      Property 'url' =
        Description            = 'URL to which the queue should redirect using a `303` (See other)
        redirect.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'URL'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/url'
    Required               = '[storageType expires url contentType]'
    Title                  = 'Redirect Artifact Request'
    Type                   = 'object'
    TypeName               = 'RedirectArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]'
  Item '3' =
    Additional Properties  = 'false'
    Description            = 'Request the queue to reply `403` (forbidden) with `reason` and `message`
    to any `GET` request for this artifact. This is mainly useful as a way
    for a task to declare that it failed to provide an artifact it wanted
    to upload.
    '
    Properties
      Property 'expires' =
        Description            = 'Date-time after which the queue should stop replying with the error
        and forget about the artifact.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/expires'
      Property 'message' =
        Description            = 'Human readable explanation of why the artifact is missing
        '
        MaxLength              = '4096'
        Type                   = 'string'
        TypeName               = 'Message'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/message'
      Property 'reason' =
        Description            = 'Reason why the artifact doesn't exist.
        '
        Enum                   = '[file-missing-on-worker invalid-resource-on-worker too-large-file-on-worker]'
        Type                   = 'string'
        TypeName               = 'Reason'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/reason'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `error`
        '
        Enum                   = '[error]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/storageType'
    Required               = '[storageType expires reason message]'
    Title                  = 'Error Artifact Request'
    Type                   = 'object'
    TypeName               = 'ErrorArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Post Artifact Request'
Type                   = 'object'
TypeName               = 'PostArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]
============================================================================
Additional Properties  = 'false'
Description            = 'Request for a signed PUT URL that will allow you to upload an artifact
to an S3 bucket managed by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, when uploading artifact to the signed
    `PUT` URL returned from this request this must given with the
     `ContentType` header. Please, provide correct mime-type,
     this make tooling a lot easier, specifically,
     always using `application/json` for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the artifact should be deleted. Note, that
    these will be collected over time, and artifacts may remain
    available after expiration. S3 based artifacts are identified in
    azure table storage and explicitly deleted on S3 after expiration.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/expires'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `'s3'`
    '
    Enum                   = '[s3]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/storageType'
Required               = '[storageType expires contentType]'
Title                  = 'S3 Artifact Request'
Type                   = 'object'
TypeName               = 'S3ArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]
============================================================================
Additional Properties  = 'false'
Description            = 'Request for an Azure Shared Access Signature (SAS) that will allow
you to upload an artifact to an Azure blob storage container managed
by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, when uploading artifact please use the same
    `Content-Type`, consistently using the correct mime-type make
    tooling a lot easier, specifically, always using `application/json`
    for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the artifact should be deleted.
    Note, that these will be collected over time, and artifacts may
    remain available after expiration. Azure based artifacts are
    identified in azure table storage and explicitly deleted in the
    azure storage container after expiration.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/expires'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `azure`
    '
    Enum                   = '[azure]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/storageType'
Required               = '[storageType expires contentType]'
Title                  = 'Azure Artifact Request'
Type                   = 'object'
TypeName               = 'AzureArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]
============================================================================
Additional Properties  = 'false'
Description            = 'Request the queue to redirect to a URL for a given artifact.
This allows you to reference artifacts that aren't managed by the queue.
The queue will still authenticate the request, so depending on the level
of secrecy required, secret URLs **might** work. Note, this is mainly
useful for public artifacts, for example temporary files directly
stored on the worker host and only available there for a specific
amount of time.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type for the resource to which the queue should
    redirect. Please use the same `Content-Type`, consistently using
    the correct mime-type make tooling a lot easier, specifically,
    always using `application/json` for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the queue should no longer redirect to this URL.
    Note, that the queue will and cannot delete the resource your URL
    references, you are responsible for doing that yourself.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/expires'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `reference`
    '
    Enum                   = '[reference]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/storageType'
  Property 'url' =
    Description            = 'URL to which the queue should redirect using a `303` (See other)
    redirect.
    '
    Format                 = 'uri'
    Type                   = 'string'
    TypeName               = 'URL'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/url'
Required               = '[storageType expires url contentType]'
Title                  = 'Redirect Artifact Request'
Type                   = 'object'
TypeName               = 'RedirectArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]
============================================================================
Additional Properties  = 'false'
Description            = 'Request the queue to reply `403` (forbidden) with `reason` and `message`
to any `GET` request for this artifact. This is mainly useful as a way
for a task to declare that it failed to provide an artifact it wanted
to upload.
'
Properties
  Property 'expires' =
    Description            = 'Date-time after which the queue should stop replying with the error
    and forget about the artifact.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/expires'
  Property 'message' =
    Description            = 'Human readable explanation of why the artifact is missing
    '
    MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = 'Message'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/message'
  Property 'reason' =
    Description            = 'Reason why the artifact doesn't exist.
    '
    Enum                   = '[file-missing-on-worker invalid-resource-on-worker too-large-file-on-worker]'
    Type                   = 'string'
    TypeName               = 'Reason'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/reason'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `error`
    '
    Enum                   = '[error]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/storageType'
Required               = '[storageType expires reason message]'
Title                  = 'Error Artifact Request'
Type                   = 'object'
TypeName               = 'ErrorArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#
====================================================================
Description            = 'Response to a request for posting an artifact.
Note that the `storageType` property is referenced in the request as well.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#'
OneOf
  Item '0' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for a signed PUT URL that will allow you to
    upload an artifact to an S3 bucket managed by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, must be specified as header when uploading with
        the signed `putUrl`.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the signed `putUrl` no longer works
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/expires'
      Property 'putUrl' =
        Description            = 'URL to which a `PUT` request can be made to upload the artifact
        requested. Note, the `Content-Length` must be specified correctly,
        and the `ContentType` header must be set the value specified below.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'PutURL'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/putUrl'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `'s3'`
        '
        Enum                   = '[s3]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/storageType'
    Required               = '[storageType putUrl expires contentType]'
    Title                  = 'S3 Artifact Response'
    Type                   = 'object'
    TypeName               = 'S3ArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]'
  Item '1' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for an Azure Shared Access Signature (SAS)
    that will allow you to upload an artifact to an Azure blob storage
    container managed by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, should be specified with the
        `x-ms-blob-content-type` when committing the block.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which Shared Access Signature (SAS) will
        seize to work.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/expires'
      Property 'putUrl' =
        Description            = 'Shared Access Signature (SAS) with write permissions, see
        [Azure REST API]
        (http://msdn.microsoft.com/en-US/library/azure/dn140256.aspx)
        reference for details on how to use this.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'PutURL'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/putUrl'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `azure`
        '
        Enum                   = '[azure]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/storageType'
    Required               = '[storageType expires contentType putUrl]'
    Title                  = 'Azure Artifact Response'
    Type                   = 'object'
    TypeName               = 'AzureArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]'
  Item '2' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for the queue to redirect to a URL for a given
    artifact.
    '
    Properties
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `reference`
        '
        Enum                   = '[reference]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/storageType'
    Required               = '[storageType]'
    Title                  = 'Redirect Artifact Response'
    Type                   = 'object'
    TypeName               = 'RedirectArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]'
  Item '3' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for the queue to reply `403` (forbidden) with
    `reason` and `message` to any `GET` request for this artifact.
    '
    Properties
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `error`
        '
        Enum                   = '[error]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]/properties/storageType'
    Required               = '[storageType]'
    Title                  = 'Error Artifact Response'
    Type                   = 'object'
    TypeName               = 'ErrorArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Post Artifact Response'
Type                   = 'object'
TypeName               = 'PostArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for a signed PUT URL that will allow you to
upload an artifact to an S3 bucket managed by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, must be specified as header when uploading with
    the signed `putUrl`.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the signed `putUrl` no longer works
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/expires'
  Property 'putUrl' =
    Description            = 'URL to which a `PUT` request can be made to upload the artifact
    requested. Note, the `Content-Length` must be specified correctly,
    and the `ContentType` header must be set the value specified below.
    '
    Format                 = 'uri'
    Type                   = 'string'
    TypeName               = 'PutURL'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/putUrl'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `'s3'`
    '
    Enum                   = '[s3]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/storageType'
Required               = '[storageType putUrl expires contentType]'
Title                  = 'S3 Artifact Response'
Type                   = 'object'
TypeName               = 'S3ArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for an Azure Shared Access Signature (SAS)
that will allow you to upload an artifact to an Azure blob storage
container managed by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, should be specified with the
    `x-ms-blob-content-type` when committing the block.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which Shared Access Signature (SAS) will
    seize to work.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/expires'
  Property 'putUrl' =
    Description            = 'Shared Access Signature (SAS) with write permissions, see
    [Azure REST API]
    (http://msdn.microsoft.com/en-US/library/azure/dn140256.aspx)
    reference for details on how to use this.
    '
    Format                 = 'uri'
    Type                   = 'string'
    TypeName               = 'PutURL'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/putUrl'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `azure`
    '
    Enum                   = '[azure]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/storageType'
Required               = '[storageType expires contentType putUrl]'
Title                  = 'Azure Artifact Response'
Type                   = 'object'
TypeName               = 'AzureArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for the queue to redirect to a URL for a given
artifact.
'
Properties
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `reference`
    '
    Enum                   = '[reference]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/storageType'
Required               = '[storageType]'
Title                  = 'Redirect Artifact Response'
Type                   = 'object'
TypeName               = 'RedirectArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for the queue to reply `403` (forbidden) with
`reason` and `message` to any `GET` request for this artifact.
'
Properties
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `error`
    '
    Enum                   = '[error]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]/properties/storageType'
Required               = '[storageType]'
Title                  = 'Error Artifact Response'
Type                   = 'object'
TypeName               = 'ErrorArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]'


http://schemas.taskcluster.net/queue/v1/task-claim-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Request to claim (or reclaim) a task
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#'
Properties
  Property 'workerGroup' =
    Description            = 'Identifier for group that worker claiming the task is a part of.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for worker within the given workerGroup
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#/properties/workerId'
Required               = '[workerGroup workerId]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Claim Request'
Type                   = 'object'
TypeName               = 'TaskClaimRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#'


http://schemas.taskcluster.net/queue/v1/task-claim-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Response to a successful task claim
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#'
Properties
  Property 'credentials' =
    Description            = 'Temporary credentials granting `task.scopes` and the scope:
    `queue:claim-task:<taskId>/<runId>` which allows the worker to reclaim
    the task, upload artifacts and report task resolution.
    
    The temporary credentials are set to expire after `takenUntil`. They
    won't expire exactly at `takenUntil` but shortly after, hence, requests
    coming close `takenUntil` won't have problems even if there is a little
    clock drift.
    
    Workers should use these credentials when making requests on behalf of
    a task. This includes requests to create artifacts, reclaiming the task
    reporting the task `completed`, `failed` or `exception`.
    
    Note, a new set of temporary credentials is issued when the worker
    reclaims the task.'
    Properties
      Property 'accessToken' =
        Description            = 'The `accessToken` for the temporary credentials.'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Description            = 'The `certificate` for the temporary credentials, these are required
        for the temporary credentials to work.'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Description            = 'The `clientId` for the temporary credentials.'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken certificate]'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials'
  Property 'runId' =
    Description            = '`run-id` assigned to this run of the task
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/status'
  Property 'takenUntil' =
    Description            = 'Time at which the run expires and is resolved as `exception`,
    with reason `claim-expired` if the run haven't been reclaimed.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TakenUntil'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/takenUntil'
  Property 'task' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task.json#'
    TypeName               = 'Task'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/task'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker executing this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/workerId'
Required               = '[status runId workerGroup workerId takenUntil task credentials]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Claim Response'
Type                   = 'object'
TypeName               = 'TaskClaimResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#'


http://schemas.taskcluster.net/queue/v1/task-exception-request.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Request for a run of a task to be resolved with an exception
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#'
Properties
  Property 'reason' =
    Description            = 'Reason that the task is resolved with an exception. This is a subset
    of the values for `resolvedReason` given in the task status structure.
    **Report `worker-shutdown`** if the run failed because the worker
    had to shutdown (spot node disappearing). In case of `worker-shutdown`
    the queue will immediately **retry** the task, by making a new run.
    This is much faster than ignoreing the issue and letting the task _retry_
    by claim expiration. For any other _reason_ reported the queue will not
    retry the task.
    **Report `malformed-payload`** if the `task.payload` doesn't match the
    schema for the worker payload, or referenced resource doesn't exists.
    In either case, you should still log the error to a log file for the
    specific run.
    **Report `resource-unavailable`** if a resource/service needed or
    referenced in `task.payload` is _temporarily_ unavailable. Do not use this
    unless you know the resource exists, if the resource doesn't exist you
    should report `malformed-payload`. Example use-case if you contact the
    index (a service) on behalf of the task, because of a declaration in
    `task.payload`, and the service (index) is temporarily down. Don't use
    this if a URL returns 404, but if it returns 503 or hits a timeout when
    you retry the request, then this _may_ be a valid exception. The queue
    assumes that workers have applied retries as needed, and will not retry
     the task.
    **Report `internal-error`** if the worker experienced an unhandled internal
    error from which it couldn't recover. The queue will not retry runs
    resolved with this reason, but you are clearly signaling that this is a
    bug in the worker code.
    **Report `superseded`** if the task was determined to have been
    superseded by another task, and its results are no longer needed.  It is
    convention in this case to create an artifact entitled
    `public/superseded-by` containing the taskId of the task that superseded
    this one.
    '
    Enum                   = '[worker-shutdown malformed-payload resource-unavailable internal-error superseded]'
    Type                   = 'string'
    TypeName               = 'Reason'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#/properties/reason'
Required               = '[reason]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Exception Request'
Type                   = 'object'
TypeName               = 'TaskExceptionRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#'


http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Response to a successful task claim
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#'
Properties
  Property 'credentials' =
    Description            = 'Temporary credentials granting `task.scopes` and the scope:
    `queue:claim-task:<taskId>/<runId>` which allows the worker to reclaim
    the task, upload artifacts and report task resolution.
    
    The temporary credentials are set to expire after `takenUntil`. They
    won't expire exactly at `takenUntil` but shortly after, hence, requests
    coming close `takenUntil` won't have problems even if there is a little
    clock drift.
    
    Workers should use these credentials when making requests on behalf of
    a task. This includes requests to create artifacts, reclaiming the task
    reporting the task `completed`, `failed` or `exception`.
    
    Note, a new set of temporary credentials is issued when the worker
    reclaims the task.'
    Properties
      Property 'accessToken' =
        Description            = 'The `accessToken` for the temporary credentials.'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Description            = 'The `certificate` for the temporary credentials, these are required
        for the temporary credentials to work.'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Description            = 'The `clientId` for the temporary credentials.'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken certificate]'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials'
  Property 'runId' =
    Description            = '`run-id` assigned to this run of the task
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/status'
  Property 'takenUntil' =
    Description            = 'Time at which the run expires and is resolved as `exception`,
    with reason `claim-expired` if the run haven't been reclaimed.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TakenUntil'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/takenUntil'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker executing this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/workerId'
Required               = '[status runId workerGroup workerId takenUntil credentials]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Reclaim Response'
Type                   = 'object'
TypeName               = 'TaskReclaimResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#'


http://schemas.taskcluster.net/queue/v1/task-status-response.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Response to a task status request
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#/properties/status'
Required               = '[status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Status Response'
Type                   = 'object'
TypeName               = 'TaskStatusResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'


http://schemas.taskcluster.net/queue/v1/task-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A representation of **task status** as known by the queue
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
Properties
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future'
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted. Notice that all artifacts for the must have an expiration that is no later than this.'
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/expires'
  Property 'provisionerId' =
    Description            = 'Unique identifier for the provisioner that this task must be scheduled on
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/provisionerId'
  Property 'retriesLeft' =
    Description            = 'Number of retries left for the task in case of infrastructure issues
    '
    Maximum                = '999'
    Minimum                = '0'
    Title                  = 'Retries Left'
    Type                   = 'integer'
    TypeName               = 'RetriesLeft'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/retriesLeft'
  Property 'runs' =
    Description            = 'List of runs, ordered so that index `i` has `runId == i`
    '
    Items
      Additional Properties  = 'false'
      Description            = 'JSON object with information about a run
      '
      Properties
        Property 'reasonCreated' =
          Description            = 'Reason for the creation of this run,
          **more reasons may be added in the future**.
          '
          Enum                   = '[scheduled retry rerun exception]'
          Title                  = 'Reason Created'
          Type                   = 'string'
          TypeName               = 'ReasonCreated'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonCreated'
        Property 'reasonResolved' =
          Description            = 'Reason that run was resolved, this is mainly
          useful for runs resolved as `exception`.
          Note, **more reasons may be added in the future**, also this
          property is only available after the run is resolved.
          '
          Enum                   = '[completed failed deadline-exceeded canceled superseded claim-expired worker-shutdown malformed-payload resource-unavailable internal-error]'
          Title                  = 'Reason Resolved'
          Type                   = 'string'
          TypeName               = 'ReasonResolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonResolved'
        Property 'resolved' =
          Description            = 'Date-time at which this run was resolved, ie. when the run changed
          state from `running` to either `completed`, `failed` or `exception`.
          This property is only present after the run as been resolved.
          '
          Format                 = 'date-time'
          Title                  = 'Resolved'
          Type                   = 'string'
          TypeName               = 'Resolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/resolved'
        Property 'runId' =
          Description            = 'Id of this task run, `run-id`s always starts from `0`
          '
          Maximum                = '1000'
          Minimum                = '0'
          Title                  = 'Run Identifier'
          Type                   = 'integer'
          TypeName               = 'RunID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/runId'
        Property 'scheduled' =
          Description            = 'Date-time at which this run was scheduled, ie. when the run was
          created in state `pending`.
          '
          Format                 = 'date-time'
          Title                  = 'Scheduled'
          Type                   = 'string'
          TypeName               = 'Scheduled'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/scheduled'
        Property 'started' =
          Description            = 'Date-time at which this run was claimed, ie. when the run changed
          state from `pending` to `running`. This property is only present
          after the run has been claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Started'
          Type                   = 'string'
          TypeName               = 'Started'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/started'
        Property 'state' =
          Description            = 'State of this run
          '
          Enum                   = '[pending running completed failed exception]'
          Title                  = 'Run State'
          Type                   = 'string'
          TypeName               = 'State'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/state'
        Property 'takenUntil' =
          Description            = 'Time at which the run expires and is resolved as `failed`, if the
          run isn't reclaimed. Note, only present after the run has been
          claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Taken Until'
          Type                   = 'string'
          TypeName               = 'TakenUntil'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/takenUntil'
        Property 'workerGroup' =
          Description            = 'Identifier for group that worker who executes this run is a part of,
          this identifier is mainly used for efficient routing.
          Note, this property is only present after the run is claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Group'
          Type                   = 'string'
          TypeName               = 'WorkerGroup'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerGroup'
        Property 'workerId' =
          Description            = 'Identifier for worker evaluating this run within given
          `workerGroup`. Note, this property is only available after the run
          has been claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Identifier'
          Type                   = 'string'
          TypeName               = 'WorkerID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerId'
      Required               = '[runId state reasonCreated scheduled]'
      Title                  = 'Run Information'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items'
    Title                  = 'List of Runs'
    Type                   = 'array'
    TypeName               = 'Runs'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs'
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that _defined_ this task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/schedulerId'
  Property 'state' =
    Description            = 'State of this task. This is just an auxiliary property derived from state
    of latests run, or `unscheduled` if none.
    '
    Enum                   = '[unscheduled pending running completed failed exception]'
    Title                  = 'State'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/state'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskGroupId'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskId'
  Property 'workerType' =
    Description            = 'Identifier for worker type within the specified provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/workerType'
Required               = '[taskId provisionerId workerType schedulerId taskGroupId deadline expires retriesLeft state runs]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Status Structure'
Type                   = 'object'
TypeName               = 'TaskStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'


http://schemas.taskcluster.net/queue/v1/task.json#
==================================================
Additional Properties  = 'false'
Description            = 'Definition of a task that can be scheduled
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task.json#'
Properties
  Property 'created' =
    Description            = 'Creation time of task'
    Format                 = 'date-time'
    Title                  = 'Created'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/created'
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future'
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted.
    Notice that all artifacts for the must have an expiration that is no
    later than this. If this property isn't it will be set to `deadline`
    plus one year (this default may subject to change).
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/expires'
  Property 'extra' =
    Default                = 'map[]'
    Description            = 'Object with properties that can hold any kind of extra data that should be
    associated with the task. This can be data for the task which doesn't
    fit into `payload`, or it can supplementary data for use in services
    listening for events from this task. For example this could be details to
    display on _treeherder_, or information for indexing the task. Please, try
    to put all related information under one property, so `extra` data keys
    for treeherder reporting and task indexing don't conflict, hence, we have
    reusable services. **Warning**, do not stuff large data-sets in here,
    task definitions should not take-up multiple MiBs.
    '
    Title                  = 'Extra Data'
    Type                   = 'object'
    TypeName               = 'Extra'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/extra'
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of the task, please **explain** what the
        task does. A few lines of documentation is not going to hurt you.
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task, used to very briefly given an idea about
        what the task does.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task, e.g. the person who did
        `hg push`. The person we should contact to ask why this task is here.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task, should specify a file, revision and
        repository. This should be place someone can go an do a git/hg blame
        to who came up with recipe for this task.
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata'
  Property 'payload' =
    Description            = 'Task-specific payload following worker-specific format. For example the
    `docker-worker` requires keys like: `image`, `commands` and
    `features`. Refer to the documentation of `docker-worker` for details.
    '
    Title                  = 'Task Payload'
    Type                   = 'object'
    TypeName               = 'Payload'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/payload'
  Property 'priority' =
    Description            = 'Priority of task, this defaults to `normal` and the scope
    `queue:task-priority:high` is required to define a task with `priority`
    set to `high`. Additional priority levels may be added later.
    '
    Enum                   = '[high normal]'
    Title                  = 'Task Priority'
    Type                   = 'string'
    TypeName               = 'Priority'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/priority'
  Property 'provisionerId' =
    Description            = 'Unique identifier for a provisioner, that can supply specified
    `workerType`
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/provisionerId'
  Property 'retries' =
    Description            = 'Number of times to retry the task in case of infrastructure issues.
    An _infrastructure issue_ is a worker node that crashes or is shutdown,
    these events are to be expected.
    '
    Maximum                = '49'
    Minimum                = '0'
    Title                  = 'Retries'
    Type                   = 'integer'
    TypeName               = 'Retries'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/retries'
  Property 'routes' =
    Description            = 'List of task specific routes, AMQP messages will be CC'ed to these routes.
    '
    Items
      Description            = 'A task specific route, AMQP messages will be CC'ed with a routing key
      matching `route.<task-specific route>`. It's possible to dot (`.`) in
      the task specific route to make sub-keys, etc. See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task Specific Route'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/routes/items'
    Title                  = 'Task Specific Routes'
    Type                   = 'array'
    TypeName               = 'Routes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/routes'
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that _defined_ this task, this can be an
    identifier for a user or a service like the `"task-graph-scheduler"`.
    Along with the `taskGroupId` this is used to form the permission scope
    `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`,
    this scope is necessary to _schedule_ a defined task, or _rerun_ a task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/schedulerId'
  Property 'scopes' =
    Description            = 'List of scopes (or scope-patterns) that the task is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which the task is
      authorized to use. This can be a string or a string
      ending with `*` which will authorize all scopes for
      which the string is a prefix.  Scopes must be composed of
      printable ASCII characters and spaces.
      '
      Pattern                = '^[\x20-\x7e]*$'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Description            = 'Arbitrary key-value tags (only strings limited to 4k). These can be used
    to attach informal meta-data to a task. Use this for informal tags that
    tasks can be classified by. You can also think of strings here as
    candidates for formal meta-data. Something like
    `purpose: 'build' || 'test'` is a good example.
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/tags'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
    property isn't specified.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/taskGroupId'
  Property 'workerType' =
    Description            = 'Unique identifier for a worker-type within a specific provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/workerType'
Required               = '[provisionerId workerType schedulerId taskGroupId routes priority retries created deadline scopes payload metadata tags extra]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Definition Response'
Type                   = 'object'
TypeName               = 'TaskDefinitionResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#'


http://references.taskcluster.net/queue/v1/exchanges.json
=========================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Queue AMQP Exchanges'
Description     = 'The queue, typically available at `queue.taskcluster.net`, is responsible
for accepting tasks and track their state as they are executed by
workers. In order ensure they are eventually resolved.

This document describes AMQP exchanges offered by the queue, which allows
third-party listeners to monitor tasks as they progress to resolution.
These exchanges targets the following audience:
 * Schedulers, who takes action after tasks are completed,
 * Workers, who wants to listen for new or canceled tasks (optional),
 * Tools, that wants to update their view as task progress.

You'll notice that all the exchanges in the document shares the same
routing key pattern. This makes it very easy to bind to all messages
about a certain kind tasks.

**Task-graphs**, if the task-graph scheduler, documented elsewhere, is
used to schedule a task-graph, the task submitted will have their
`schedulerId` set to `'task-graph-scheduler'`, and their `taskGroupId` to
the `taskGraphId` as given to the task-graph scheduler. This is useful if
you wish to listen for all messages in a specific task-graph.

**Task specific routes**, a task can define a task specific route using
the `task.routes` property. See task creation documentation for details
on permissions required to provide task specific routes. If a task has
the entry `'notify.by-email'` in as task specific route defined in
`task.routes` all messages about this task will be CC'ed with the
routing-key `'route.notify.by-email'`.

These routes will always be prefixed `route.`, so that cannot interfere
with the _primary_ routing key as documented here. Notice that the
_primary_ routing key is alwasys prefixed `primary.`. This is ensured
in the routing key reference, so API clients will do this automatically.

Please, note that the way RabbitMQ works, the message will only arrive
in your queue once, even though you may have bound to the exchange with
multiple routing key patterns that matches more of the CC'ed routing
routing keys.

**Delivery guarantees**, most operations on the queue are idempotent,
which means that if repeated with the same arguments then the requests
will ensure completion of the operation and return the same response.
This is useful if the server crashes or the TCP connection breaks, but
when re-executing an idempotent operation, the queue will also resend
any related AMQP messages. Hence, messages may be repeated.

This shouldn't be much of a problem, as the best you can achieve using
confirm messages with AMQP is at-least-once delivery semantics. Hence,
this only prevents you from obtaining at-most-once delivery semantics.

**Remark**, some message generated by timeouts maybe dropped if the
server crashes at wrong time. Ideally, we'll address this in the
future. For now we suggest you ignore this corner case, and notify us
if this corner case is of concern to you.'
Exchange Prefix = 'exchange/taskcluster-queue/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-defined'
    Entry Name        = 'taskDefined'
    Entry Title       = 'Task Defined Messages'
    Entry Description = 'When a task is created or just defined a message is posted to this
exchange.

This message exchange is mainly useful when tasks are scheduled by a
scheduler that uses `defineTask` as this does not make the task
`pending`. Thus, no `taskPending` message is published.
Please, note that messages are also published on this exchange if defined
using `createTask`.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-pending'
    Entry Name        = 'taskPending'
    Entry Title       = 'Task Pending Messages'
    Entry Description = 'When a task becomes `pending` a message is posted to this exchange.

This is useful for workers who doesn't want to constantly poll the queue
for new tasks. The queue will also be authority for task states and
claims. But using this exchange workers should be able to distribute work
efficiently and they would be able to reduce their polling interval
significantly without affecting general responsiveness.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-running'
    Entry Name        = 'taskRunning'
    Entry Title       = 'Task Running Messages'
    Entry Description = 'Whenever a task is claimed by a worker, a run is started on the worker,
and a message is posted on this exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'
Entry 3     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'artifact-created'
    Entry Name        = 'artifactCreated'
    Entry Title       = 'Artifact Creation Messages'
    Entry Description = 'Whenever the `createArtifact` end-point is called, the queue will create
a record of the artifact and post a message on this exchange. All of this
happens before the queue returns a signed URL for the caller to upload
the actual artifact with (pending on `storageType`).

This means that the actual artifact is rarely available when this message
is posted. But it is not unreasonable to assume that the artifact will
will become available at some point later. Most signatures will expire in
30 minutes or so, forcing the uploader to call `createArtifact` with
the same payload again in-order to continue uploading the artifact.

However, in most cases (especially for small artifacts) it's very
reasonable assume the artifact will be available within a few minutes.
This property means that this exchange is mostly useful for tools
monitoring task evaluation. One could also use it count number of
artifacts per task, or _index_ artifacts though in most cases it'll be
smarter to index artifacts after the task in question have completed
successfully.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'
Entry 4     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-completed'
    Entry Name        = 'taskCompleted'
    Entry Title       = 'Task Completed Messages'
    Entry Description = 'When a task is successfully completed by a worker a message is posted
this exchange.
This message is routed using the `runId`, `workerGroup` and `workerId`
that completed the task. But information about additional runs is also
available from the task status structure.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'
Entry 5     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-failed'
    Entry Name        = 'taskFailed'
    Entry Title       = 'Task Failed Messages'
    Entry Description = 'When a task ran, but failed to complete successfully a message is posted
to this exchange. This is same as worker ran task-specific code, but the
task specific code exited non-zero.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'
Entry 6     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-exception'
    Entry Name        = 'taskException'
    Entry Title       = 'Task Exception Messages'
    Entry Description = 'Whenever TaskCluster fails to run a message is posted to this exchange.
This happens if the task isn't completed before its `deadlìne`,
all retries failed (i.e. workers stopped responding), the task was
canceled by another entity, or the task carried a malformed payload.

The specific _reason_ is evident from that task status structure, refer
to the `reasonResolved` property for the last run.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'


http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Message reporting a new artifact has been created for a given task.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'
Properties
  Property 'artifact' =
    Additional Properties  = 'false'
    Description            = 'Information about the artifact that was created
    '
    Properties
      Property 'contentType' =
        Description            = 'Mimetype for the artifact that was created.
        '
        MaxLength              = '255'
        Title                  = 'Content-Type'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/contentType'
      Property 'expires' =
        Description            = 'Date and time after which the artifact created will be automatically
        deleted by the queue.
        '
        Format                 = 'date-time'
        Title                  = 'Artifact Expiration'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/expires'
      Property 'name' =
        Description            = 'Name of the artifact that was created, this is useful if you want to
        attempt to fetch the artifact. But keep in mind that just because an
        artifact is created doesn't mean that it's immediately available.
        '
        MaxLength              = '1024'
        Title                  = 'Artifact Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/name'
      Property 'storageType' =
        Description            = 'This is the `storageType` for the request that was used to create the
        artifact.
        '
        Enum                   = '[s3 azure reference error]'
        Title                  = 'Artifact Storage-Type'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/storageType'
    Required               = '[storageType name expires contentType]'
    Title                  = 'Artifact Created'
    Type                   = 'object'
    TypeName               = 'Artifact'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact'
  Property 'runId' =
    Description            = 'Id of the run on which artifact was created.
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which the run with the created
    artifacted is running.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker within which the run with the created artifact
    is running.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId artifact]'
Schema                 = 'http://json-schema.org/draft-04/schema#"'
Title                  = 'Artifact Created Message'
Type                   = 'object'
TypeName               = 'ArtifactCreatedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'


http://schemas.taskcluster.net/queue/v1/task-completed-message.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task has complete successfully.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the run that completed the task
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run ran.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker that executed this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Completed Message'
Type                   = 'object'
TypeName               = 'TaskCompletedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'


http://schemas.taskcluster.net/queue/v1/task-defined-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task has been defined. The task may or may not be
_scheduled_ too.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#/properties/version'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Defined Message'
Type                   = 'object'
TypeName               = 'TaskDefinedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'


http://schemas.taskcluster.net/queue/v1/task-exception-message.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that TaskCluster have failed to run a task.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the last run for the task, not provided if `deadline`
    was exceeded before a run was started.
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which the last attempt of the task
    ran. Not provided, if `deadline` was exceeded before a run was started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the last worker that failed to report, causing the task
    to fail. Not provided, if `deadline` was exceeded before a run
    was started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/workerId'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Exception Message'
Type                   = 'object'
TypeName               = 'TaskExceptionMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'


http://schemas.taskcluster.net/queue/v1/task-failed-message.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task failed to complete successfully.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the run that failed.
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run ran.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker that executed this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Failed Message'
Type                   = 'object'
TypeName               = 'TaskFailedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'


http://schemas.taskcluster.net/queue/v1/task-pending-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task is now pending
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of run that became pending, `run-id`s always starts from 0
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#/properties/version'
Required               = '[version status runId]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Pending Message'
Type                   = 'object'
TypeName               = 'TaskPendingMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'


http://schemas.taskcluster.net/queue/v1/task-running-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a given run of a task have started
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the run that just started, always starts from 0
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/status'
  Property 'takenUntil' =
    Description            = 'Time at which the run expires and is resolved as `failed`, if the run
    isn't reclaimed.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TakenUntil'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/takenUntil'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker executing this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId takenUntil]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Running Message'
Type                   = 'object'
TypeName               = 'TaskRunningMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'


http://schemas.taskcluster.net/queue/v1/task-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A representation of **task status** as known by the queue
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
Properties
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future'
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted. Notice that all artifacts for the must have an expiration that is no later than this.'
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/expires'
  Property 'provisionerId' =
    Description            = 'Unique identifier for the provisioner that this task must be scheduled on
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/provisionerId'
  Property 'retriesLeft' =
    Description            = 'Number of retries left for the task in case of infrastructure issues
    '
    Maximum                = '999'
    Minimum                = '0'
    Title                  = 'Retries Left'
    Type                   = 'integer'
    TypeName               = 'RetriesLeft'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/retriesLeft'
  Property 'runs' =
    Description            = 'List of runs, ordered so that index `i` has `runId == i`
    '
    Items
      Additional Properties  = 'false'
      Description            = 'JSON object with information about a run
      '
      Properties
        Property 'reasonCreated' =
          Description            = 'Reason for the creation of this run,
          **more reasons may be added in the future**.
          '
          Enum                   = '[scheduled retry rerun exception]'
          Title                  = 'Reason Created'
          Type                   = 'string'
          TypeName               = 'ReasonCreated'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonCreated'
        Property 'reasonResolved' =
          Description            = 'Reason that run was resolved, this is mainly
          useful for runs resolved as `exception`.
          Note, **more reasons may be added in the future**, also this
          property is only available after the run is resolved.
          '
          Enum                   = '[completed failed deadline-exceeded canceled superseded claim-expired worker-shutdown malformed-payload resource-unavailable internal-error]'
          Title                  = 'Reason Resolved'
          Type                   = 'string'
          TypeName               = 'ReasonResolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonResolved'
        Property 'resolved' =
          Description            = 'Date-time at which this run was resolved, ie. when the run changed
          state from `running` to either `completed`, `failed` or `exception`.
          This property is only present after the run as been resolved.
          '
          Format                 = 'date-time'
          Title                  = 'Resolved'
          Type                   = 'string'
          TypeName               = 'Resolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/resolved'
        Property 'runId' =
          Description            = 'Id of this task run, `run-id`s always starts from `0`
          '
          Maximum                = '1000'
          Minimum                = '0'
          Title                  = 'Run Identifier'
          Type                   = 'integer'
          TypeName               = 'RunID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/runId'
        Property 'scheduled' =
          Description            = 'Date-time at which this run was scheduled, ie. when the run was
          created in state `pending`.
          '
          Format                 = 'date-time'
          Title                  = 'Scheduled'
          Type                   = 'string'
          TypeName               = 'Scheduled'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/scheduled'
        Property 'started' =
          Description            = 'Date-time at which this run was claimed, ie. when the run changed
          state from `pending` to `running`. This property is only present
          after the run has been claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Started'
          Type                   = 'string'
          TypeName               = 'Started'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/started'
        Property 'state' =
          Description            = 'State of this run
          '
          Enum                   = '[pending running completed failed exception]'
          Title                  = 'Run State'
          Type                   = 'string'
          TypeName               = 'State'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/state'
        Property 'takenUntil' =
          Description            = 'Time at which the run expires and is resolved as `failed`, if the
          run isn't reclaimed. Note, only present after the run has been
          claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Taken Until'
          Type                   = 'string'
          TypeName               = 'TakenUntil'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/takenUntil'
        Property 'workerGroup' =
          Description            = 'Identifier for group that worker who executes this run is a part of,
          this identifier is mainly used for efficient routing.
          Note, this property is only present after the run is claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Group'
          Type                   = 'string'
          TypeName               = 'WorkerGroup'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerGroup'
        Property 'workerId' =
          Description            = 'Identifier for worker evaluating this run within given
          `workerGroup`. Note, this property is only available after the run
          has been claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Identifier'
          Type                   = 'string'
          TypeName               = 'WorkerID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerId'
      Required               = '[runId state reasonCreated scheduled]'
      Title                  = 'Run Information'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items'
    Title                  = 'List of Runs'
    Type                   = 'array'
    TypeName               = 'Runs'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs'
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that _defined_ this task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/schedulerId'
  Property 'state' =
    Description            = 'State of this task. This is just an auxiliary property derived from state
    of latests run, or `unscheduled` if none.
    '
    Enum                   = '[unscheduled pending running completed failed exception]'
    Title                  = 'State'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/state'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskGroupId'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskId'
  Property 'workerType' =
    Description            = 'Identifier for worker type within the specified provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/workerType'
Required               = '[taskId provisionerId workerType schedulerId taskGroupId deadline expires retriesLeft state runs]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Status Structure'
Type                   = 'object'
TypeName               = 'TaskStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'


http://references.taskcluster.net/scheduler/v1/api.json
=======================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Task-Graph Scheduler API Documentation'
Description = 'The task-graph scheduler, typically available at
`scheduler.taskcluster.net`, is responsible for accepting task-graphs and
scheduling tasks for evaluation by the queue as their dependencies are
satisfied.

This document describes API end-points offered by the task-graph
scheduler. These end-points targets the following audience:
 * Post-commit hooks, that wants to submit task-graphs for testing,
 * End-users, who wants to execute a set of dependent tasks, and
 * Tools, that wants to inspect the state of a task-graph.'
Base URL    = 'https://scheduler.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/task-graph/<taskGraphId>'
    Entry Args        = '[taskGraphId]'
    Entry Query        = '[]'
    Entry Name        = 'createTaskGraph'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[scheduler:create-task-graph]]'
    Entry Input       = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#'
    Entry Output      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json#'
    Entry Title       = 'Create new task-graph'
    Entry Description = 'Create a new task-graph, the `status` of the resulting JSON is a
task-graph status structure, you can find the `taskGraphId` in this
structure.

**Referencing required tasks**, it is possible to reference other tasks
in the task-graph that must be completed successfully before a task is
scheduled. You just specify the `taskId` in the list of `required` tasks.
See the example below, where the second task requires the first task.
```js
{
  ...
  tasks: [
    {
      taskId:     "XgvL0qtSR92cIWpcwdGKCA",
      requires:   [],
      ...
    },
    {
      taskId:     "73GsfK62QNKAk2Hg1EEZTQ",
      requires:   ["XgvL0qtSR92cIWpcwdGKCA"],
      task: {
        payload: {
          env: {
            DEPENDS_ON:  "XgvL0qtSR92cIWpcwdGKCA"
          }
          ...
        }
        ...
      },
      ...
    }
  ]
}
```

**The `schedulerId` property**, defaults to the `schedulerId` of this
scheduler in production that is `"task-graph-scheduler"`. This
property must be either undefined or set to `"task-graph-scheduler"`,
otherwise the task-graph will be rejected.

**The `taskGroupId` property**, defaults to the `taskGraphId` of the
task-graph submitted, and if provided much be the `taskGraphId` of
the task-graph. Otherwise the task-graph will be rejected.

**Task-graph scopes**, a task-graph is assigned a set of scopes, just
like tasks. Tasks within a task-graph cannot have scopes beyond those
the task-graph has. The task-graph scheduler will execute all requests
on behalf of a task-graph using the set of scopes assigned to the
task-graph. Thus, if you are submitting tasks to `my-worker-type` under
`my-provisioner` it's important that your task-graph has the scope
required to define tasks for this `provisionerId` and `workerType`.
(`queue:define-task:..` or `queue:create-task:..`; see the queue for
details on scopes required). Note, the task-graph does not require
permissions to schedule the tasks (`queue:schedule-task:..`), as this is
done with scopes provided by the task-graph scheduler.

**Task-graph specific routing-keys**, using the `taskGraph.routes`
property you may define task-graph specific routing-keys. If a task-graph
has a task-graph specific routing-key: `<route>`, then the poster will
be required to posses the scope `scheduler:route:<route>`. And when the
an AMQP message about the task-graph is published the message will be
CC'ed with the routing-key: `route.<route>`. This is useful if you want
another component to listen for completed tasks you have posted.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task-graph/<taskGraphId>/extend'
    Entry Args        = '[taskGraphId]'
    Entry Query        = '[]'
    Entry Name        = 'extendTaskGraph'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[scheduler:extend-task-graph:<taskGraphId>]]'
    Entry Input       = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json#'
    Entry Title       = 'Extend existing task-graph'
    Entry Description = 'Add a set of tasks to an existing task-graph. The request format is very
similar to the request format for creating task-graphs. But `routes`
key, `scopes`, `metadata` and `tags` cannot be modified.

**Referencing required tasks**, just as when task-graphs are created,
each task has a list of required tasks. It is possible to reference
all `taskId`s within the task-graph.

**Safety,** it is only _safe_ to call this API end-point while the
task-graph being modified is still running. If the task-graph is
_finished_ or _blocked_, this method will leave the task-graph in this
state. Hence, it is only truly _safe_ to call this API end-point from
within a task in the task-graph being modified.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task-graph/<taskGraphId>/status'
    Entry Args        = '[taskGraphId]'
    Entry Query        = '[]'
    Entry Name        = 'status'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json'
    Entry Title       = 'Task Graph Status'
    Entry Description = 'Get task-graph status, this will return the _task-graph status
structure_. which can be used to check if a task-graph is `running`,
`blocked` or `finished`.

**Note**, that `finished` implies successfully completion.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task-graph/<taskGraphId>/info'
    Entry Args        = '[taskGraphId]'
    Entry Query        = '[]'
    Entry Name        = 'info'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json'
    Entry Title       = 'Task Graph Information'
    Entry Description = 'Get task-graph information, this includes the _task-graph status
structure_, along with `metadata` and `tags`, but not information
about all tasks.

If you want more detailed information use the `inspectTaskGraph`
end-point instead.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task-graph/<taskGraphId>/inspect'
    Entry Args        = '[taskGraphId]'
    Entry Query        = '[]'
    Entry Name        = 'inspect'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json'
    Entry Title       = 'Inspect Task Graph'
    Entry Description = 'Inspect a task-graph, this returns all the information the task-graph
scheduler knows about the task-graph and the state of its tasks.

**Warning**, some of these fields are borderline internal to the
task-graph scheduler and we may choose to change or make them internal
later. Also note that note all of the information is formalized yet.
The JSON schema will be updated to reflect formalized values, we think
it's safe to consider the values stable.

Take these considerations into account when using the API end-point,
as we do not promise it will remain fully backward compatible in
the future.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task-graph/<taskGraphId>/inspect/<taskId>'
    Entry Args        = '[taskGraphId taskId]'
    Entry Query        = '[]'
    Entry Name        = 'inspectTask'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json'
    Entry Title       = 'Inspect Task from a Task-Graph'
    Entry Description = 'Inspect a task from a task-graph, this returns all the information the
task-graph scheduler knows about the specific task.

**Warning**, some of these fields are borderline internal to the
task-graph scheduler and we may choose to change or make them internal
later. Also note that note all of the information is formalized yet.
The JSON schema will be updated to reflect formalized values, we think
it's safe to consider the values stable.

Take these considerations into account when using the API end-point,
as we do not promise it will remain fully backward compatible in
the future.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/queue/v1/create-task-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Definition of a task that can be scheduled
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
Properties
  Property 'created' =
    Description            = 'Creation time of task'
    Format                 = 'date-time'
    Title                  = 'Created'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/created'
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future'
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted.
    Notice that all artifacts for the must have an expiration that is no
    later than this. If this property isn't it will be set to `deadline`
    plus one year (this default may subject to change).
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/expires'
  Property 'extra' =
    Default                = 'map[]'
    Description            = 'Object with properties that can hold any kind of extra data that should be
    associated with the task. This can be data for the task which doesn't
    fit into `payload`, or it can supplementary data for use in services
    listening for events from this task. For example this could be details to
    display on _treeherder_, or information for indexing the task. Please, try
    to put all related information under one property, so `extra` data keys
    for treeherder reporting and task indexing don't conflict, hence, we have
    reusable services. **Warning**, do not stuff large data-sets in here,
    task definitions should not take-up multiple MiBs.
    '
    Title                  = 'Extra Data'
    Type                   = 'object'
    TypeName               = 'Extra'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/extra'
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of the task, please **explain** what the
        task does. A few lines of documentation is not going to hurt you.
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task, used to very briefly given an idea about
        what the task does.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task, e.g. the person who did
        `hg push`. The person we should contact to ask why this task is here.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task, should specify a file, revision and
        repository. This should be place someone can go an do a git/hg blame
        to who came up with recipe for this task.
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata'
  Property 'payload' =
    Description            = 'Task-specific payload following worker-specific format. For example the
    `docker-worker` requires keys like: `image`, `commands` and
    `features`. Refer to the documentation of `docker-worker` for details.
    '
    Title                  = 'Task Payload'
    Type                   = 'object'
    TypeName               = 'Payload'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/payload'
  Property 'priority' =
    Default                = 'normal'
    Description            = 'Priority of task, this defaults to `normal`. Additional levels may be
    added later.
    **Task submitter required scopes** `queue:task-priority:high` for high
    priority tasks.
    '
    Enum                   = '[high normal]'
    Title                  = 'Task Priority'
    Type                   = 'string'
    TypeName               = 'Priority'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/priority'
  Property 'provisionerId' =
    Description            = 'Unique identifier for a provisioner, that can supply specified
    `workerType`
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/provisionerId'
  Property 'retries' =
    Default                = '5'
    Description            = 'Number of times to retry the task in case of infrastructure issues.
    An _infrastructure issue_ is a worker node that crashes or is shutdown,
    these events are to be expected.
    '
    Maximum                = '49'
    Minimum                = '0'
    Title                  = 'Retries'
    Type                   = 'integer'
    TypeName               = 'Retries'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/retries'
  Property 'routes' =
    Default                = '[]'
    Description            = 'List of task specific routes, AMQP messages will be CC'ed to these routes.
    **Task submitter required scopes** `queue:route:<route>` for
    each route given.
    '
    Items
      Description            = 'A task specific route, AMQP messages will be CC'ed with a routing key
      matching `route.<task-specific route>`. It's possible to dot (`.`) in
      the task specific route to make sub-keys, etc. See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task Specific Route'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/routes/items'
    Title                  = 'Task Specific Routes'
    Type                   = 'array'
    TypeName               = 'Routes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/routes'
  Property 'schedulerId' =
    Default                = '-'
    Description            = 'Identifier for the scheduler that _defined_ this task, this can be an
    identifier for a user or a service like the `"task-graph-scheduler"`.
    **Task submitter required scopes**
    `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
    This scope is also necessary to _schedule_ a defined task, or _rerun_ a
    task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/schedulerId'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes (or scope-patterns) that the task is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which the task is
      authorized to use. This can be a string or a string
      ending with `*` which will authorize all scopes for
      which the string is a prefix.  Scopes must be composed of
      printable ASCII characters and spaces.
      **Task submitter required scopes** The same scope-pattern(s) given
      (otherwise a task could be submitted to perform an action that the
      task submitter is not authorized to perform).
      '
      Pattern                = '^[\x20-\x7e]*$'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Default                = 'map[]'
    Description            = 'Arbitrary key-value tags (only strings limited to 4k). These can be used
    to attach informal meta-data to a task. Use this for informal tags that
    tasks can be classified by. You can also think of strings here as
    candidates for formal meta-data. Something like
    `purpose: 'build' || 'test'` is a good example.
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/tags'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
    property isn't specified.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/taskGroupId'
  Property 'workerType' =
    Description            = 'Unique identifier for a worker-type within a specific provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/workerType'
Required               = '[provisionerId workerType created deadline payload metadata]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task Definition Request'
Type                   = 'object'
TypeName               = 'TaskDefinitionRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'


http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#
===========================================================================
Additional Properties  = 'false'
Description            = 'Definition of a task-graph that can be scheduled'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#'
Properties
  Property 'tasks' =
    Description            = 'List of nodes in the task-graph, each featuring a task definition and scheduling preferences, such as number of _reruns_ to attempt.'
    Items
      Description            = 'Representation of a tasks in the task-graph'
      Properties
        Property 'requires' =
          Default                = '[]'
          Description            = 'List of required `taskId`s'
          Items
            Description            = '`taskId` for task that is required to be _successfully completed_ before this task is scheduled.'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Title                  = 'Required `taskId`'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks/items/properties/requires/items'
          Title                  = 'Required tasks'
          Type                   = 'array'
          TypeName               = 'Requires'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks/items/properties/requires'
        Property 'reruns' =
          Default                = '0'
          Description            = 'Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.'
          Maximum                = '100'
          Minimum                = '0'
          Title                  = 'Re-runs'
          Type                   = 'integer'
          TypeName               = 'Reruns'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks/items/properties/reruns'
        Property 'task' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
          TypeName               = 'Task'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks/items/properties/task'
        Property 'taskId' =
          Description            = 'Task identifier (`taskId`) for the task when submitted to the queue, also used in `requires` below. This must be formatted as a **slugid** that is a uuid encoded in url-safe base64 following [RFC 4648 sec. 5](http://tools.ietf.org/html/rfc4648#section-5)), but without `==` padding.'
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Title                  = 'Task Identifier'
          Type                   = 'string'
          TypeName               = 'TaskID'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks/items/properties/taskId'
      Required               = '[taskId task]'
      Title                  = 'Task Node'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks/items'
    Title                  = 'Tasks'
    Type                   = 'array'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#/properties/tasks'
Required               = '[tasks]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Definition'
Type                   = 'object'
TypeName               = 'TaskGraphDefinition1'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/extend-task-graph-request.json#'


http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#
=============================================================================
Additional Properties  = 'false'
Description            = 'Information about a **task-graph** as known by the scheduler, with all the state of all individual tasks.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#'
Properties
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata'
    Properties
      Property 'description' =
        Description            = 'Human readable description of task-graph, **explain** what it does!'
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task-graph'
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task-graph, e.g. the person who did `hg push`'
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task-graph, should specify file, revision and repository'
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/metadata'
  Property 'scopes' =
    Description            = 'List of scopes (or scope-patterns) that tasks of the task-graph is authorized to use.'
    Items
      Description            = 'A scope (or scope-patterns) which a task of the task-graph is authorized to use. This can be a string or a string ending with `*` which will authorize all scopes for which the string is a prefix.'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/scopes'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/status'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Description            = 'Arbitrary key-value tags (only strings limited to 4k)'
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tags'
  Property 'tasks' =
    Description            = 'Mapping from task-labels to task information and state.'
    Items
      Additional Properties  = 'false'
      Description            = 'Information about a tasks in the task-graph'
      Properties
        Property 'dependents' =
          Description            = 'List of `taskId`s that requires this task to be _complete successfully_ before they can be scheduled.'
          Items
            Description            = '`taskId` for task that requires this task to be _successfully completed_ before it can be scheduled.'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Title                  = 'Dependent `taskId`'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/dependents/items'
          Title                  = 'Dependent tasks'
          Type                   = 'array'
          TypeName               = 'Dependents'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/dependents'
        Property 'name' =
          Description            = 'Human readable name from the task definition'
          MaxLength              = '255'
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/name'
        Property 'requires' =
          Description            = 'List of required `taskId`s'
          Items
            Description            = '`taskId` for task that is required to be _successfully completed_ before this task is scheduled.'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Title                  = 'Required `taskId`'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/requires/items'
          Title                  = 'Required tasks'
          Type                   = 'array'
          TypeName               = 'Requires'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/requires'
        Property 'requiresLeft' =
          Description            = 'List of `taskId`s that have yet to complete successfully, before this task can be scheduled.'
          Items
            Description            = '`taskId` for task that is required to be _successfully completed_ before this task is scheduled.'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Title                  = 'Required `taskId`'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/requiresLeft/items'
          Title                  = 'Required tasks left'
          Type                   = 'array'
          TypeName               = 'RequiresLeft'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/requiresLeft'
        Property 'reruns' =
          Description            = 'Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.'
          Maximum                = '999'
          Minimum                = '0'
          Title                  = 'Re-runs'
          Type                   = 'integer'
          TypeName               = 'Reruns'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/reruns'
        Property 'rerunsLeft' =
          Description            = 'Number of reruns that haven't been used yet.'
          Maximum                = '999'
          Minimum                = '0'
          Title                  = 'Re-runs Left'
          Type                   = 'integer'
          TypeName               = 'RerunsLeft'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/rerunsLeft'
        Property 'satisfied' =
          Description            = 'true, if the scheduler considers the task node as satisfied and hence no-longer prevents dependent tasks from running.'
          Title                  = 'Task Satisfied'
          Type                   = 'boolean'
          TypeName               = 'Satisfied'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/satisfied'
        Property 'state' =
          Description            = 'State of the task as considered by the scheduler'
          Enum                   = '[unscheduled scheduled completed failed exception]'
          Title                  = 'Task Node State'
          Type                   = 'string'
          TypeName               = 'State'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/state'
        Property 'taskId' =
          Description            = 'Unique task identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.'
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Title                  = 'Task Identifier'
          Type                   = 'string'
          TypeName               = 'TaskID'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items/properties/taskId'
      Required               = '[taskId name requires requiresLeft reruns rerunsLeft state satisfied dependents]'
      Title                  = 'Task Information'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks/items'
    Title                  = 'Tasks'
    Type                   = 'array'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#/properties/tasks'
Required               = '[status tasks metadata tags scopes]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Inspect Task-Graph Response'
Type                   = 'object'
TypeName               = 'InspectTaskGraphResponse'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-response.json#'


http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#
==================================================================================
Additional Properties  = 'false'
Description            = 'Information about a **task** in a task-graph as known by the scheduler.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#'
Properties
  Property 'dependents' =
    Description            = 'List of `taskId`s that requires this task to be _complete successfully_ before they can be scheduled.'
    Items
      Description            = '`taskId` for task that requires this task to be _successfully completed_ before it can be scheduled.'
      Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
      Title                  = 'Dependent `taskId`'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/dependents/items'
    Title                  = 'Dependent tasks'
    Type                   = 'array'
    TypeName               = 'Dependents'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/dependents'
  Property 'name' =
    Description            = 'Human readable name from the task definition'
    MaxLength              = '255'
    Title                  = 'Name'
    Type                   = 'string'
    TypeName               = 'Name'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/name'
  Property 'requires' =
    Description            = 'List of required `taskId`s'
    Items
      Description            = '`taskId` for task that is required to be _successfully completed_ before this task is scheduled.'
      Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
      Title                  = 'Required `taskId`'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/requires/items'
    Title                  = 'Required tasks'
    Type                   = 'array'
    TypeName               = 'Requires'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/requires'
  Property 'requiresLeft' =
    Description            = 'List of `taskId`s that have yet to complete successfully, before this task can be scheduled.'
    Items
      Description            = '`taskId` for task that is required to be _successfully completed_ before this task is scheduled.'
      Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
      Title                  = 'Required `taskId`'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/requiresLeft/items'
    Title                  = 'Required tasks left'
    Type                   = 'array'
    TypeName               = 'RequiresLeft'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/requiresLeft'
  Property 'reruns' =
    Description            = 'Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.'
    Maximum                = '999'
    Minimum                = '0'
    Title                  = 'Re-runs'
    Type                   = 'integer'
    TypeName               = 'Reruns'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/reruns'
  Property 'rerunsLeft' =
    Description            = 'Number of reruns that haven't been used yet.'
    Maximum                = '999'
    Minimum                = '0'
    Title                  = 'Re-runs Left'
    Type                   = 'integer'
    TypeName               = 'RerunsLeft'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/rerunsLeft'
  Property 'satisfied' =
    Description            = 'true, if the scheduler considers the task node as satisfied and hence no-longer prevents dependent tasks from running.'
    Title                  = 'Task Satisfied'
    Type                   = 'boolean'
    TypeName               = 'Satisfied'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/satisfied'
  Property 'state' =
    Description            = 'State of the task as considered by the scheduler'
    Enum                   = '[unscheduled scheduled completed failed exception]'
    Title                  = 'Task Node State'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/state'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.'
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#/properties/taskId'
Required               = '[taskId name requires requiresLeft reruns rerunsLeft state satisfied dependents]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Inspect Task-Graph Task Response'
Type                   = 'object'
TypeName               = 'InspectTaskGraphTaskResponse'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/inspect-task-graph-task-response.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#
==========================================================================
Additional Properties  = 'false'
Description            = 'Response for a request for task-graph information'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#'
Properties
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata'
    Properties
      Property 'description' =
        Description            = 'Human readable description of task-graph, **explain** what it does!'
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task-graph'
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task-graph, e.g. the person who did `hg push`'
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task-graph, should specify file, revision and repository'
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/metadata'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/status'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Description            = 'Arbitrary key-value tags (only strings limited to 4k)'
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#/properties/tags'
Required               = '[status metadata tags]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Info Response'
Type                   = 'object'
TypeName               = 'TaskGraphInfoResponse'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-info-response.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json#
============================================================================
Additional Properties  = 'false'
Description            = 'Response containing the status structure for a task-graph'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json#/properties/status'
Required               = '[status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Status Response'
Type                   = 'object'
TypeName               = 'TaskGraphStatusResponse'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status-response.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#
===================================================================
Additional Properties  = 'false'
Description            = 'A representation of **task-graph status** as known by the scheduler, without the state of all individual tasks.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
Properties
  Property 'schedulerId' =
    Description            = 'Unique identifier for task-graph scheduler managing the given task-graph'
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#/properties/schedulerId'
  Property 'state' =
    Description            = 'Task-graph state, this enum is **frozen** new values will **not** be added.'
    Enum                   = '[running blocked finished]'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#/properties/state'
  Property 'taskGraphId' =
    Description            = 'Unique task-graph identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.'
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Type                   = 'string'
    TypeName               = 'TaskGraphID'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#/properties/taskGraphId'
Required               = '[taskGraphId schedulerId state]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Status Structure'
Type                   = 'object'
TypeName               = 'TaskGraphStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph.json#
============================================================
Additional Properties  = 'false'
Description            = 'Definition of a task-graph that can be scheduled
'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#'
Properties
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of task-graph, **explain** what it does!
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task-graph, give people finding this an idea
        what this graph is about.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task-graph, e.g. the person who did
        `hg push` or whatever triggered it.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task-graph, should specify file, revision and
        repository
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/metadata'
  Property 'routes' =
    Default                = '[]'
    Description            = 'List of task-graph specific routes, AMQP messages will be CC'ed to these
    routes prefixed by `'route.'`.
    '
    Items
      Description            = 'A task-graph specific route, AMQP messages will be CC'ed with a
      routing key matching `route.<task-graph specific route>`. It's possible
      to dot (`.`) in the task-graph specific route to make sub-keys, etc.
      See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task-Graph specific route'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/routes/items'
    Title                  = 'Task-graph specific routes'
    Type                   = 'array'
    TypeName               = 'Routes'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/routes'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes (or scope-patterns) that tasks of the task-graph is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which a task of the task-graph is
      authorized to use. This can be a string or a string ending with `*`
      which will authorize all scopes for which the string is a prefix.
      '
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Default                = 'map[]'
    Description            = 'Arbitrary key-value tags (only strings limited to 4k)
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tags'
  Property 'tasks' =
    Description            = 'List of nodes in the task-graph, each featuring a task definition and scheduling preferences, such as number of _reruns_ to attempt.'
    Items
      Description            = 'Representation of a tasks in the task-graph'
      Properties
        Property 'requires' =
          Default                = '[]'
          Description            = 'List of required `taskId`s'
          Items
            Description            = '`taskId` for task that is required to be _successfully completed_ before this task is scheduled.'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Title                  = 'Required `taskId`'
            Type                   = 'string'
            TypeName               = ''
            SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks/items/properties/requires/items'
          Title                  = 'Required tasks'
          Type                   = 'array'
          TypeName               = 'Requires'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks/items/properties/requires'
        Property 'reruns' =
          Default                = '0'
          Description            = 'Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.'
          Maximum                = '100'
          Minimum                = '0'
          Title                  = 'Re-runs'
          Type                   = 'integer'
          TypeName               = 'Reruns'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks/items/properties/reruns'
        Property 'task' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
          TypeName               = 'Task'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks/items/properties/task'
        Property 'taskId' =
          Description            = 'Task identifier (`taskId`) for the task when submitted to the queue, also used in `requires` below. This must be formatted as a **slugid** that is a uuid encoded in url-safe base64 following [RFC 4648 sec. 5](http://tools.ietf.org/html/rfc4648#section-5)), but without `==` padding.'
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Title                  = 'Task Identifier'
          Type                   = 'string'
          TypeName               = 'TaskID'
          SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks/items/properties/taskId'
      Required               = '[taskId task]'
      Title                  = 'Task Node'
      Type                   = 'object'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks/items'
    Title                  = 'Tasks'
    Type                   = 'array'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#/properties/tasks'
Required               = '[tasks metadata]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Definition'
Type                   = 'object'
TypeName               = 'TaskGraphDefinition'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph.json#'


http://references.taskcluster.net/scheduler/v1/exchanges.json
=============================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Scheduler AMQP Exchanges'
Description     = 'The scheduler, typically available at `scheduler.taskcluster.net` is
responsible for accepting task-graphs and schedule tasks on the queue as
their dependencies are completed successfully.

This document describes the AMQP exchanges offered by the scheduler,
which allows third-party listeners to monitor task-graph submission and
resolution. These exchanges targets the following audience:
 * Reporters, who displays the state of task-graphs or emails people on
   failures, and
 * End-users, who wants notification of completed task-graphs

**Remark**, the task-graph scheduler will require that the `schedulerId`
for tasks is set to the `schedulerId` for the task-graph scheduler. In
production the `schedulerId` is typically `"task-graph-scheduler"`.
Furthermore, the task-graph scheduler will also require that
`taskGroupId` is equal to the `taskGraphId`.

Combined these requirements ensures that `schedulerId` and `taskGroupId`
have the same position in the routing keys for the queue exchanges.
See queue documentation for details on queue exchanges. Hence, making
it easy to listen for all tasks in a given task-graph.

Note that routing key entries 2 through 7 used for exchanges on the
task-graph scheduler is hardcoded to `_`. This is done to preserve
positional equivalence with exchanges offered by the queue.'
Exchange Prefix = 'exchange/taskcluster-scheduler/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-graph-running'
    Entry Name        = 'taskGraphRunning'
    Entry Title       = 'Task-Graph Running Message'
    Entry Description = 'When a task-graph is submitted it immediately starts running and a
message is posted on this exchange to indicate that a task-graph have
been submitted.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = 'Identifier for the task-graphs scheduler managing the task-graph this message concerns. Usually `task-graph-scheduler` in production.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGraphId'
        Element Summary   = 'Identifier for the task-graph this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-running-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-graph-extended'
    Entry Name        = 'taskGraphExtended'
    Entry Title       = 'Task-Graph Extended Message'
    Entry Description = 'When a task-graph is extended, that is additional tasks is added to the
task-graph, a message is posted on this exchange. This is useful if you
are monitoring a task-graph and what to track states of the individual
tasks in the task-graph.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = 'Identifier for the task-graphs scheduler managing the task-graph this message concerns. Usually `task-graph-scheduler` in production.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGraphId'
        Element Summary   = 'Identifier for the task-graph this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-extended-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-graph-blocked'
    Entry Name        = 'taskGraphBlocked'
    Entry Title       = 'Task-Graph Blocked Message'
    Entry Description = 'When a task is completed unsuccessfully and all reruns have been
attempted, the task-graph will not complete successfully and it's
declared to be _blocked_, by some task that consistently completes
unsuccessfully.

When a task-graph becomes blocked a messages is posted to this exchange.
The message features the `taskId` of the task that caused the task-graph
to become blocked.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = 'Identifier for the task-graphs scheduler managing the task-graph this message concerns. Usually `task-graph-scheduler` in production.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGraphId'
        Element Summary   = 'Identifier for the task-graph this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#'
Entry 3     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-graph-finished'
    Entry Name        = 'taskGraphFinished'
    Entry Title       = 'Task-Graph Finished Message'
    Entry Description = 'When all tasks of a task-graph have completed successfully, the
task-graph is declared to be finished, and a message is posted to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = 'Always takes the value `_`'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = 'Identifier for the task-graphs scheduler managing the task-graph this message concerns. Usually `task-graph-scheduler` in production.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGraphId'
        Element Summary   = 'Identifier for the task-graph this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-finished-message.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#
============================================================================
Additional Properties  = 'false'
Description            = 'Message that all reruns of a task has failed it is now blocking the task-graph from finishing.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#/properties/status'
  Property 'taskId' =
    Description            = 'Unique `taskId` that is blocking this task-graph from completion.'
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#/properties/taskId'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#/properties/version'
Required               = '[version status taskId]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Blocked Task-Graph Message'
Type                   = 'object'
TypeName               = 'BlockedTaskGraphMessage'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-blocked-message.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-extended-message.json#
=============================================================================
Additional Properties  = 'false'
Description            = 'Messages as posted to `scheduler/v1/task-graph-extended` informing the world that a task-graph have been extended.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-extended-message.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-extended-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-extended-message.json#/properties/version'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Extended Message'
Type                   = 'object'
TypeName               = 'TaskGraphExtendedMessage'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-extended-message.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-finished-message.json#
=============================================================================
Additional Properties  = 'false'
Description            = 'Message that all tasks in a task-graph have now completed successfully and the graph is _finished_.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-finished-message.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-finished-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-finished-message.json#/properties/version'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Finished Message'
Type                   = 'object'
TypeName               = 'TaskGraphFinishedMessage'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-finished-message.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-running-message.json#
============================================================================
Additional Properties  = 'false'
Description            = 'Messages as posted to `scheduler/v1/task-graph-running` informing the world that a new task-graph have been submitted.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-running-message.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-running-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-running-message.json#/properties/version'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'New Task-Graph Message'
Type                   = 'object'
TypeName               = 'NewTaskGraphMessage'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-running-message.json#'


http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#
===================================================================
Additional Properties  = 'false'
Description            = 'A representation of **task-graph status** as known by the scheduler, without the state of all individual tasks.'
ID                     = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'
Properties
  Property 'schedulerId' =
    Description            = 'Unique identifier for task-graph scheduler managing the given task-graph'
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'SchedulerID'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#/properties/schedulerId'
  Property 'state' =
    Description            = 'Task-graph state, this enum is **frozen** new values will **not** be added.'
    Enum                   = '[running blocked finished]'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#/properties/state'
  Property 'taskGraphId' =
    Description            = 'Unique task-graph identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.'
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Type                   = 'string'
    TypeName               = 'TaskGraphID'
    SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#/properties/taskGraphId'
Required               = '[taskGraphId schedulerId state]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Task-Graph Status Structure'
Type                   = 'object'
TypeName               = 'TaskGraphStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/scheduler/v1/task-graph-status.json#'


http://references.taskcluster.net/secrets/v1/api.json
=====================================================
Version     = '0'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'TaskCluster Secrets API Documentation'
Description = 'The secrets service, is a simple key/value store for secret data
guarded by TaskCluster scopes.  It is typically available at
`secrets.taskcluster.net`.'
Base URL    = 'https://secrets.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/secret/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'set'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[secrets:set:<name>]]'
    Entry Input       = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'
    Entry Output      = ''
    Entry Title       = 'Create Secret'
    Entry Description = 'Set a secret associated with some key.  If the secret already exists, it is updated instead.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/secret/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'remove'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[secrets:set:<name>]]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Secret'
    Entry Description = 'Delete the secret attached to some key.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/secret/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'get'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[[secrets:get:<name>]]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'
    Entry Title       = 'Read Secret'
    Entry Description = 'Read the secret attached to some key.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/secrets'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'list'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#'
    Entry Title       = 'List Secrets'
    Entry Description = 'List the names of all visible secrets.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'experimental'
    Entry Scopes      = '[]'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Documented later...

**Warning** this api end-point is **not stable**.'


http://schemas.taskcluster.net/secrets/v1/secret-list.json#
===========================================================
Additional Properties  = 'false'
Description            = 'Message containing a list of secret names
'
ID                     = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#'
Properties
  Property 'secrets' =
    Description            = 'Secret names'
    Items
      Description            = 'Secret name'
      Title                  = 'Secret'
      Type                   = 'string'
      TypeName               = ''
      SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#/properties/secrets/items'
    Type                   = 'array'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#/properties/secrets'
Required               = '[secrets]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Secrets List'
Type                   = 'object'
TypeName               = 'SecretsList'
SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#'


http://schemas.taskcluster.net/secrets/v1/secret.json#
======================================================
Additional Properties  = 'false'
Description            = 'Message containing a TaskCluster Secret
'
ID                     = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'
Properties
  Property 'expires' =
    Description            = 'An expiration date for this secret.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret.json#/properties/expires'
  Property 'secret' =
    Description            = 'The secret value to be encrypted.
    '
    Type                   = 'object'
    TypeName               = 'Secret'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret.json#/properties/secret'
Required               = '[secret expires]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Secret'
Type                   = 'object'
TypeName               = 'Secret'
SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'


