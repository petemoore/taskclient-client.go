Generated: 1521469310
The following file is an auto-generated static dump of the API models at time of code generation.
It is provided here for reference purposes, but is not used by any code.

http://references.taskcluster.net/auth/v1/api.json
==================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Authentication API'
Description = 'Authentication related API end-points for Taskcluster and related
services. These API end-points are of interest if you wish to:
  * Authorize a request signed with Taskcluster credentials,
  * Manage clients and roles,
  * Inspect or audit clients and roles,
  * Gain access to various services guarded by this API.

Note that in this service "authentication" refers to validating the
correctness of the supplied credentials (that the caller posesses the
appropriate access token). This service does not provide any kind of user
authentication (identifying a particular person).

### Clients
The authentication service manages _clients_, at a high-level each client
consists of a `clientId`, an `accessToken`, scopes, and some metadata.
The `clientId` and `accessToken` can be used for authentication when
calling Taskcluster APIs.

The client's scopes control the client's access to Taskcluster resources.
The scopes are *expanded* by substituting roles, as defined below.

### Roles
A _role_ consists of a `roleId`, a set of scopes and a description.
Each role constitutes a simple _expansion rule_ that says if you have
the scope: `assume:<roleId>` you get the set of scopes the role has.
Think of the `assume:<roleId>` as a scope that allows a client to assume
a role.

As in scopes the `*` kleene star also have special meaning if it is
located at the end of a `roleId`. If you have a role with the following
`roleId`: `my-prefix*`, then any client which has a scope staring with
`assume:my-prefix` will be allowed to assume the role.

### Guarded Services
The authentication service also has API end-points for delegating access
to some guarded service such as AWS S3, or Azure Table Storage.
Generally, we add API end-points to this server when we wish to use
Taskcluster credentials to grant access to a third-party service used
by many Taskcluster components.'
Base URL    = 'https://auth.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/clients/'
    Entry Args        = '[]'
    Entry Query        = '[prefix]'
    Entry Name        = 'listClients'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#'
    Entry Title       = 'List Clients'
    Entry Description = 'Get a list of all clients.  With `prefix`, only clients for which
it is a prefix of the clientId are returned.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'client'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Get Client'
    Entry Description = 'Get information about a single client.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'createClient'
    Entry Stability   = 'stable'
    Entry Scopes      = 'All of:
* auth:create-client:<clientId>
* For scope in scopes each <scope>'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'
    Entry Title       = 'Create Client'
    Entry Description = 'Create a new client and get the `accessToken` for this client.
You should store the `accessToken` from this API call as there is no
other way to retrieve it.

If you loose the `accessToken` you can call `resetAccessToken` to reset
it, and a new `accessToken` will be returned, but you cannot retrieve the
current `accessToken`.

If a client with the same `clientId` already exists this operation will
fail. Use `updateClient` if you wish to update an existing client.

The caller's scopes must satisfy `scopes`.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>/reset'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'resetAccessToken'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:reset-access-token:<clientId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'
    Entry Title       = 'Reset `accessToken`'
    Entry Description = 'Reset a clients `accessToken`, this will revoke the existing
`accessToken`, generate a new `accessToken` and return it from this
call.

There is no way to retrieve an existing `accessToken`, so if you loose it
you must reset the accessToken to acquire it again.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'updateClient'
    Entry Stability   = 'stable'
    Entry Scopes      = 'All of:
* auth:update-client:<clientId>
* For scope in scopesAdded each <scope>'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Update Client'
    Entry Description = 'Update an exisiting client. The `clientId` and `accessToken` cannot be
updated, but `scopes` can be modified.  The caller's scopes must
satisfy all scopes being added to the client in the update operation.
If no scopes are given in the request, the client's scopes remain
unchanged'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>/enable'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'enableClient'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:enable-client:<clientId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Enable Client'
    Entry Description = 'Enable a client that was disabled with `disableClient`.  If the client
is already enabled, this does nothing.

This is typically used by identity providers to re-enable clients that
had been disabled when the corresponding identity's scopes changed.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/clients/<clientId>/disable'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'disableClient'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:disable-client:<clientId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
    Entry Title       = 'Disable Client'
    Entry Description = 'Disable a client.  If the client is already disabled, this does nothing.

This is typically used by identity providers to disable clients when the
corresponding identity's scopes no longer satisfy the client's scopes.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/clients/<clientId>'
    Entry Args        = '[clientId]'
    Entry Query        = '[]'
    Entry Name        = 'deleteClient'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:delete-client:<clientId>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Client'
    Entry Description = 'Delete a client, please note that any roles related to this client must
be deleted independently.'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/roles/'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listRoles'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#'
    Entry Title       = 'List Roles'
    Entry Description = 'Get a list of all roles, each role object also includes the list of
scopes it expands to.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'role'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
    Entry Title       = 'Get Role'
    Entry Description = 'Get information about a single role, including the set of scopes that the
role expands to.'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'createRole'
    Entry Stability   = 'stable'
    Entry Scopes      = 'All of:
* auth:create-role:<roleId>
* For scope in scopes each <scope>'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
    Entry Title       = 'Create Role'
    Entry Description = 'Create a new role.

The caller's scopes must satisfy the new role's scopes.

If there already exists a role with the same `roleId` this operation
will fail. Use `updateRole` to modify an existing role.

Creation of a role that will generate an infinite expansion will result
in an error response.'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'updateRole'
    Entry Stability   = 'stable'
    Entry Scopes      = 'All of:
* auth:update-role:<roleId>
* For scope in scopesAdded each <scope>'
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
    Entry Title       = 'Update Role'
    Entry Description = 'Update an existing role.

The caller's scopes must satisfy all of the new scopes being added, but
need not satisfy all of the client's existing scopes.

An update of a role that will generate an infinite expansion will result
in an error response.'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/roles/<roleId>'
    Entry Args        = '[roleId]'
    Entry Query        = '[]'
    Entry Name        = 'deleteRole'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:delete-role:<roleId>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Role'
    Entry Description = 'Delete a role. This operation will succeed regardless of whether or not
the role exists.'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/scopes/expand'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'expandScopesGet'
    Entry Stability   = 'deprecated'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Title       = 'Expand Scopes'
    Entry Description = 'Return an expanded copy of the given scopeset, with scopes implied by any
roles included.

This call uses the GET method with an HTTP body.  It remains only for
backward compatibility.'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/scopes/expand'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'expandScopes'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Title       = 'Expand Scopes'
    Entry Description = 'Return an expanded copy of the given scopeset, with scopes implied by any
roles included.'
Entry 15    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/scopes/current'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'currentScopes'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
    Entry Title       = 'Get Current Scopes'
    Entry Description = 'Return the expanded scopes available in the request, taking into account all sources
of scopes and scope restrictions (temporary credentials, assumeScopes, client scopes,
and roles).'
Entry 16    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/aws/s3/<level>/<bucket>/<prefix>'
    Entry Args        = '[level bucket prefix]'
    Entry Query        = '[format]'
    Entry Name        = 'awsS3Credentials'
    Entry Stability   = 'stable'
    Entry Scopes      = 'If levelIsReadOnly:
  Any of:
  - auth:aws-s3:read-only:<bucket>/<prefix>
  - auth:aws-s3:read-write:<bucket>/<prefix>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#'
    Entry Title       = 'Get Temporary Read/Write Credentials S3'
    Entry Description = 'Get temporary AWS credentials for `read-write` or `read-only` access to
a given `bucket` and `prefix` within that bucket.
The `level` parameter can be `read-write` or `read-only` and determines
which type of credentials are returned. Please note that the `level`
parameter is required in the scope guarding access.  The bucket name must
not contain `.`, as recommended by Amazon.

This method can only allow access to a whitelisted set of buckets.  To add
a bucket to that whitelist, contact the Taskcluster team, who will add it to
the appropriate IAM policy.  If the bucket is in a different AWS account, you
will also need to add a bucket policy allowing access from the Taskcluster
account.  That policy should look like this:

```js
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "allow-taskcluster-auth-to-delegate-access",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::692406183521:root"
      },
      "Action": [
        "s3:ListBucket",
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:GetBucketLocation"
      ],
      "Resource": [
        "arn:aws:s3:::<bucket>",
        "arn:aws:s3:::<bucket>/*"
      ]
    }
  ]
}
```

The credentials are set to expire after an hour, but this behavior is
subject to change. Hence, you should always read the `expires` property
from the response, if you intend to maintain active credentials in your
application.

Please note that your `prefix` may not start with slash `/`. Such a prefix
is allowed on S3, but we forbid it here to discourage bad behavior.

Also note that if your `prefix` doesn't end in a slash `/`, the STS
credentials may allow access to unexpected keys, as S3 does not treat
slashes specially.  For example, a prefix of `my-folder` will allow
access to `my-folder/file.txt` as expected, but also to `my-folder.txt`,
which may not be intended.

Finally, note that the `PutObjectAcl` call is not allowed.  Passing a canned
ACL other than `private` to `PutObject` is treated as a `PutObjectAcl` call, and
will result in an access-denied error from AWS.  This limitation is due to a
security flaw in Amazon S3 which might otherwise allow indefinite access to
uploaded objects.

**EC2 metadata compatibility**, if the querystring parameter
`?format=iam-role-compat` is given, the response will be compatible
with the JSON exposed by the EC2 metadata service. This aims to ease
compatibility for libraries and tools built to auto-refresh credentials.
For details on the format returned by EC2 metadata service see:
[EC2 User Guide](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#instance-metadata-security-credentials).'
Entry 17    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/azure/accounts'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'azureAccounts'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:azure-table:list-accounts'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/azure-account-list-response.json#'
    Entry Title       = 'List Accounts Managed by Auth'
    Entry Description = 'Retrieve a list of all Azure accounts managed by Taskcluster Auth.'
Entry 18    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/azure/<account>/tables'
    Entry Args        = '[account]'
    Entry Query        = '[continuationToken]'
    Entry Name        = 'azureTables'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:azure-table:list-tables:<account>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#'
    Entry Title       = 'List Tables in an Account Managed by Auth'
    Entry Description = 'Retrieve a list of all tables in an account.'
Entry 19    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/azure/<account>/table/<table>/<level>'
    Entry Args        = '[account table level]'
    Entry Query        = '[]'
    Entry Name        = 'azureTableSAS'
    Entry Stability   = 'stable'
    Entry Scopes      = 'If levelIsReadOnly:
  Any of:
  - auth:azure-table:read-only:<account>/<table>
  - auth:azure-table:read-write:<account>/<table>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#'
    Entry Title       = 'Get Shared-Access-Signature for Azure Table'
    Entry Description = 'Get a shared access signature (SAS) string for use with a specific Azure
Table Storage table.

The `level` parameter can be `read-write` or `read-only` and determines
which type of credentials are returned.  If level is read-write, it will create the
table if it doesn't already exist.'
Entry 20    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/azure/<account>/containers'
    Entry Args        = '[account]'
    Entry Query        = '[continuationToken]'
    Entry Name        = 'azureContainers'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:azure-container:list-containers:<account>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#'
    Entry Title       = 'List containers in an Account Managed by Auth'
    Entry Description = 'Retrieve a list of all containers in an account.'
Entry 21    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/azure/<account>/containers/<container>/<level>'
    Entry Args        = '[account container level]'
    Entry Query        = '[]'
    Entry Name        = 'azureContainerSAS'
    Entry Stability   = 'stable'
    Entry Scopes      = 'If levelIsReadOnly:
  Any of:
  - auth:azure-container:read-only:<account>/<container>
  - auth:azure-container:read-write:<account>/<container>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/azure-container-response.json#'
    Entry Title       = 'Get Shared-Access-Signature for Azure Container'
    Entry Description = 'Get a shared access signature (SAS) string for use with a specific Azure
Blob Storage container.

The `level` parameter can be `read-write` or `read-only` and determines
which type of credentials are returned.  If level is read-write, it will create the
container if it doesn't already exist.'
Entry 22    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/sentry/<project>/dsn'
    Entry Args        = '[project]'
    Entry Query        = '[]'
    Entry Name        = 'sentryDSN'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:sentry:<project>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#'
    Entry Title       = 'Get DSN for Sentry Project'
    Entry Description = 'Get temporary DSN (access credentials) for a sentry project.
The credentials returned can be used with any Sentry client for up to
24 hours, after which the credentials will be automatically disabled.

If the project doesn't exist it will be created, and assigned to the
initial team configured for this component. Contact a Sentry admin
to have the project transferred to a team you have access to if needed'
Entry 23    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/statsum/<project>/token'
    Entry Args        = '[project]'
    Entry Query        = '[]'
    Entry Name        = 'statsumToken'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:statsum:<project>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#'
    Entry Title       = 'Get Token for Statsum Project'
    Entry Description = 'Get temporary `token` and `baseUrl` for sending metrics to statsum.

The token is valid for 24 hours, clients should refresh after expiration.'
Entry 24    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/webhooktunnel'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'webhooktunnelToken'
    Entry Stability   = 'stable'
    Entry Scopes      = 'auth:webhooktunnel'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#'
    Entry Title       = 'Get Token for Webhooktunnel Proxy'
    Entry Description = 'Get temporary `token` and `id` for connecting to webhooktunnel
The token is valid for 96 hours, clients should refresh after expiration.'
Entry 25    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/authenticate-hawk'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'authenticateHawk'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#'
    Entry Title       = 'Authenticate Hawk Request'
    Entry Description = 'Validate the request signature given on input and return list of scopes
that the authenticating client has.

This method is used by other services that wish rely on Taskcluster
credentials for authentication. This way we can use Hawk without having
the secret credentials leave this service.'
Entry 26    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/test-authenticate'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'testAuthenticate'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'
    Entry Title       = 'Test Authentication'
    Entry Description = 'Utility method to test client implementations of Taskcluster
authentication.

Rather than using real credentials, this endpoint accepts requests with
clientId `tester` and accessToken `no-secret`. That client's scopes are
based on `clientScopes` in the request body.

The request is validated, with any certificate, authorizedScopes, etc.
applied, and the resulting scopes are checked against `requiredScopes`
from the request body. On success, the response contains the clientId
and scopes as seen by the API method.'
Entry 27    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/test-authenticate-get/'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'testAuthenticateGet'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'
    Entry Title       = 'Test Authentication (GET)'
    Entry Description = 'Utility method similar to `testAuthenticate`, but with the GET method,
so it can be used with signed URLs (bewits).

Rather than using real credentials, this endpoint accepts requests with
clientId `tester` and accessToken `no-secret`. That client's scopes are
`['test:*', 'auth:create-client:test:*']`.  The call fails if the 
`test:authenticate-get` scope is not available.

The request is validated, with any certificate, authorizedScopes, etc.
applied, and the resulting scopes are checked, just like any API call.
On success, the response contains the clientId and scopes as seen by
the API method.

This method may later be extended to allow specification of client and
required scopes via query arguments.'
Entry 28    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Request to authenticate a hawk request.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#'
Properties
  Property 'authorization' =
    Description            = 'Authorization header, **must** only be specified if request being
    authenticated has a `Authorization` header.
    '
    Type                   = 'string'
    TypeName               = 'Authorization'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/authorization'
  Property 'host' =
    Any Of                 = 'Item '0' =
      Format                 = 'hostname'
      Type HAS NOT BEEN SET!!!
      TypeName               = 'Var2'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host/anyOf[0]'
    Item '1' =
      Format                 = 'ipv4'
      Type HAS NOT BEEN SET!!!
      TypeName               = 'Var3'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host/anyOf[1]'
    '
    Description            = 'Host for which the request came in, this is typically the `Host` header
    excluding the port if any.
    '
    Type                   = 'string'
    TypeName               = 'Host'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host'
  Property 'method' =
    Description            = 'HTTP method of the request being authenticated.
    '
    Enum                   = '[get post put head delete options trace copy lock mkcol move purge propfind proppatch unlock report mkactivity checkout merge m-search notify subscribe unsubscribe patch search connect]'
    Type                   = 'string'
    TypeName               = 'Method'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/method'
  Property 'port' =
    Description            = 'Port on which the request came in, this is typically `80` or `443`.
    If you are running behind a reverse proxy look for the `x-forwarded-port`
    header.
    '
    Maximum                = '65535'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'Port'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/port'
  Property 'resource' =
    Description            = 'Resource the request operates on including querystring. This is the
    string that follows the HTTP method.
    **Note,** order of querystring elements is important.
    '
    Type                   = 'string'
    TypeName               = 'Resource'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/resource'
Required               = '[method resource host port]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hawk Signature Authentication Request'
Type                   = 'object'
TypeName               = 'HawkSignatureAuthenticationRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host/anyOf[0]
===============================================================================================
Format                 = 'hostname'
Type HAS NOT BEEN SET!!!
TypeName               = 'Var2'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host/anyOf[0]'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host/anyOf[1]
===============================================================================================
Format                 = 'ipv4'
Type HAS NOT BEEN SET!!!
TypeName               = 'Var3'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-request.json#/properties/host/anyOf[1]'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#
=======================================================================
Description            = 'Response from a request to authenticate a hawk request.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#'
OneOf
  Item '0' =
    Additional Properties  = 'false'
    Properties
      Property 'clientId' =
        Description            = 'The `clientId` that made this request.  This may be the `id` supplied in
        the Authorization header, or in the case of a named temporary credential
        may be embedded in the payload.  In any case, this clientId can be used
        for logging, auditing, and identifying the credential but **must** not be
        used for access control.  That's what scopes are for.
        '
        Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/clientId'
      Property 'expires' =
        Description            = 'The expiration time for the credentials used to make this request.
        This should be treated as the latest time at which the authorization
        is valid.  For most cases, where the access being authorized occurs
        immediately, this field can be ignored, as the value will always be
        in the future if the status is `auth-success`.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/expires'
      Property 'hash' =
        Description            = 'Payload as extracted from `Authentication` header. This property is
        only present if a hash is available. You are not required to validate
        this hash, but if you do, please check `scheme` to ensure that it's
        on a scheme you support.
        '
        Type HAS NOT BEEN SET!!!
        TypeName               = 'Hash'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/hash'
      Property 'scheme' =
        Description            = 'Authentication scheme the client used. Generally, you don't need to
        read this property unless `hash` is provided and you want to validate
        the payload hash. Additional values may be added in the future.
        '
        Enum                   = '[hawk]'
        Type                   = 'string'
        TypeName               = 'Scheme'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/scheme'
      Property 'scopes' =
        Description            = 'List of scopes the client is authorized to access.  Scopes must be
        composed of printable ASCII characters and spaces.
        '
        Items
          Pattern                = '^[ -~]*$'
          Type                   = 'string'
          TypeName               = 'ScopesEntry'
          SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/scopes/items'
        Type                   = 'array'
        TypeName               = 'Scopes'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/scopes'
      Property 'status' =
        Description            = 'The kind of response, `auth-failed` or `auth-success`.
        '
        Enum                   = '[auth-success]'
        Type                   = 'string'
        TypeName               = 'Status'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/status'
    Required               = '[status scopes scheme clientId expires]'
    Title                  = 'Authentication Successful Response'
    Type                   = 'object'
    TypeName               = 'AuthenticationSuccessfulResponse'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]'
  Item '1' =
    Additional Properties  = 'false'
    Properties
      Property 'message' =
        Description            = 'Message saying why the authentication failed.
        '
        Type                   = 'string'
        TypeName               = 'Message'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]/properties/message'
      Property 'status' =
        Description            = 'The kind of response, `auth-failed` or `auth-success`.
        '
        Enum                   = '[auth-failed]'
        Type                   = 'string'
        TypeName               = 'Status'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]/properties/status'
    Required               = '[status message]'
    Title                  = 'Authentication Failed Response'
    Type                   = 'object'
    TypeName               = 'AuthenticationFailedResponse'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hawk Signature Authentication Response'
Type HAS NOT BEEN SET!!!
TypeName               = 'HawkSignatureAuthenticationResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]
================================================================================
Additional Properties  = 'false'
Properties
  Property 'clientId' =
    Description            = 'The `clientId` that made this request.  This may be the `id` supplied in
    the Authorization header, or in the case of a named temporary credential
    may be embedded in the payload.  In any case, this clientId can be used
    for logging, auditing, and identifying the credential but **must** not be
    used for access control.  That's what scopes are for.
    '
    Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/clientId'
  Property 'expires' =
    Description            = 'The expiration time for the credentials used to make this request.
    This should be treated as the latest time at which the authorization
    is valid.  For most cases, where the access being authorized occurs
    immediately, this field can be ignored, as the value will always be
    in the future if the status is `auth-success`.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/expires'
  Property 'hash' =
    Description            = 'Payload as extracted from `Authentication` header. This property is
    only present if a hash is available. You are not required to validate
    this hash, but if you do, please check `scheme` to ensure that it's
    on a scheme you support.
    '
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Hash'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/hash'
  Property 'scheme' =
    Description            = 'Authentication scheme the client used. Generally, you don't need to
    read this property unless `hash` is provided and you want to validate
    the payload hash. Additional values may be added in the future.
    '
    Enum                   = '[hawk]'
    Type                   = 'string'
    TypeName               = 'Scheme'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/scheme'
  Property 'scopes' =
    Description            = 'List of scopes the client is authorized to access.  Scopes must be
    composed of printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/scopes'
  Property 'status' =
    Description            = 'The kind of response, `auth-failed` or `auth-success`.
    '
    Enum                   = '[auth-success]'
    Type                   = 'string'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]/properties/status'
Required               = '[status scopes scheme clientId expires]'
Title                  = 'Authentication Successful Response'
Type                   = 'object'
TypeName               = 'AuthenticationSuccessfulResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[0]'


http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]
================================================================================
Additional Properties  = 'false'
Properties
  Property 'message' =
    Description            = 'Message saying why the authentication failed.
    '
    Type                   = 'string'
    TypeName               = 'Message'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]/properties/message'
  Property 'status' =
    Description            = 'The kind of response, `auth-failed` or `auth-success`.
    '
    Enum                   = '[auth-failed]'
    Type                   = 'string'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]/properties/status'
Required               = '[status message]'
Title                  = 'Authentication Failed Response'
Type                   = 'object'
TypeName               = 'AuthenticationFailedResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/authenticate-hawk-response.json#/oneOf[1]'


http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Response for a request to get access to an S3 bucket.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#'
Properties
  Property 'credentials' =
    Additional Properties  = 'false'
    Description            = 'Temporary STS credentials for use when operating on S3
    '
    Properties
      Property 'accessKeyId' =
        Description            = 'Access key identifier that identifies the temporary security
        credentials.
        '
        Title                  = 'AccessKeyId'
        Type                   = 'string'
        TypeName               = 'AccessKeyID'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials/properties/accessKeyId'
      Property 'secretAccessKey' =
        Description            = 'Secret access key used to sign requests
        '
        Title                  = 'SecretAccessKey'
        Type                   = 'string'
        TypeName               = 'SecretAccessKey'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials/properties/secretAccessKey'
      Property 'sessionToken' =
        Description            = 'A token that must passed with request to use the temporary
        security credentials.
        '
        Title                  = 'SessionToken'
        Type                   = 'string'
        TypeName               = 'SessionToken'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials/properties/sessionToken'
    Required               = '[accessKeyId secretAccessKey sessionToken]'
    Title                  = 'Temporary Security Credentials'
    Type                   = 'object'
    TypeName               = 'TemporarySecurityCredentials'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/credentials'
  Property 'expires' =
    Description            = 'Date and time of when the temporary credentials expires.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#/properties/expires'
Required               = '[credentials expires]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'AWS S3 Credentials Response'
Type                   = 'object'
TypeName               = 'AWSS3CredentialsResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/aws-s3-credentials-response.json#'


http://schemas.taskcluster.net/auth/v1/azure-account-list-response.json#
========================================================================
Additional Properties  = 'false'
Description            = 'A list of Azure accounts managed by taskcluster-auth
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/azure-account-list-response.json#'
Properties
  Property 'accounts' =
    Description            = 'A list of accountIds that are managed by auth. These are
    the accounts that can have SAS credentials fetched for tables
    within them.
    '
    Items
      Type                   = 'string'
      TypeName               = 'AccountsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-account-list-response.json#/properties/accounts/items'
    Title                  = 'Azure Accounts'
    Type                   = 'array'
    TypeName               = 'AzureAccounts'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-account-list-response.json#/properties/accounts'
Required               = '[accounts]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Azure List Account Response'
Type                   = 'object'
TypeName               = 'AzureListAccountResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-account-list-response.json#'


http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#
==========================================================================
Additional Properties  = 'false'
Description            = 'A list of Azure containers in an account
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#'
Properties
  Property 'containers' =
    Description            = 'A list of containers that are in an account.  Credentials are available for
    these containers from the `azureBlobSAS` method.
    '
    Items
      Type                   = 'string'
      TypeName               = 'ContainersEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#/properties/containers/items'
    Title                  = 'Azure Containers'
    Type                   = 'array'
    TypeName               = 'AzureContainers'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#/properties/containers'
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of containers.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called this method with `continuationToken`
    until you get a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#/properties/continuationToken'
Required               = '[containers]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Azure List Containers Response'
Type                   = 'object'
TypeName               = 'AzureListContainersResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-list-response.json#'


http://schemas.taskcluster.net/auth/v1/azure-container-response.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for an Shared-Access-Signature to access an Azure
Blob Storage container.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/azure-container-response.json#'
Properties
  Property 'expiry' =
    Description            = 'Date and time of when the Shared-Access-Signature expires.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expiry'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-response.json#/properties/expiry'
  Property 'sas' =
    Description            = 'Shared-Access-Signature string. This is the querystring parameters to
    be appened after `?` or `&` depending on whether or not a querystring is
    already present in the URL.
    '
    Type                   = 'string'
    TypeName               = 'Sas'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-response.json#/properties/sas'
Required               = '[sas expiry]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Azure Blob Shared-Access-Signature Response'
Type                   = 'object'
TypeName               = 'Var1'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-container-response.json#'


http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for an Shared-Access-Signature to access and Azure
Table Storage table.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#'
Properties
  Property 'expiry' =
    Description            = 'Date and time of when the Shared-Access-Signature expires.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expiry'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#/properties/expiry'
  Property 'sas' =
    Description            = 'Shared-Access-Signature string. This is the querystring parameters to
    be appened after `?` or `&` depending on whether or not a querystring is
    already present in the URL.
    '
    Type                   = 'string'
    TypeName               = 'Sas'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#/properties/sas'
Required               = '[sas expiry]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Azure Table Shared-Access-Signature Response'
Type                   = 'object'
TypeName               = 'Var'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#'


http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#
======================================================================
Additional Properties  = 'false'
Description            = 'A list of Azure tables in an account
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of tables.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called `azureAccountTables` with `continuationToken`
    until you get a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#/properties/continuationToken'
  Property 'tables' =
    Description            = 'A list of tables that are in an account. These are
    the tables that can have SAS credentials fetched for them.
    '
    Items
      Type                   = 'string'
      TypeName               = 'TablesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#/properties/tables/items'
    Title                  = 'Azure Tables'
    Type                   = 'array'
    TypeName               = 'AzureTables'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#/properties/tables'
Required               = '[tables]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Azure List Table Response'
Type                   = 'object'
TypeName               = 'AzureListTableResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/azure-table-list-response.json#'


http://schemas.taskcluster.net/auth/v1/create-client-request.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Properties to create a client.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'
Properties
  Property 'deleteOnExpiration' =
    Default                = 'false'
    Description            = 'If `true`, the service may delete this client after it has expired.  If
    `false` (the default), the client will remain after expiration, although
    it cannot be used for authentication in that state.
    '
    Type                   = 'boolean'
    TypeName               = 'DeleteOnExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/deleteOnExpiration'
  Property 'description' =
    Description            = 'Description of what these credentials are used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/description'
  Property 'expires' =
    Description            = 'Date and time where the clients access is set to expire
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/expires'
  Property 'scopes' =
    Description            = 'List of scopes the client has.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#/properties/scopes'
Required               = '[expires description]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Create Client Request'
Type                   = 'object'
TypeName               = 'CreateClientRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-request.json#'


http://schemas.taskcluster.net/auth/v1/create-client-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'All details about a client including the `accessToken`
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'
Properties
  Property 'accessToken' =
    Description            = 'AccessToken used for authenticating requests, you should store this
    you won't be able to retrive it again!
    '
    Pattern                = '^[a-zA-Z0-9_-]{22,66}$'
    Type                   = 'string'
    TypeName               = 'AccessToken'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/accessToken'
  Property 'clientId' =
    Description            = 'ClientId of the client
    '
    Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/clientId'
  Property 'created' =
    Description            = 'Date and time when this client was created
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/created'
  Property 'deleteOnExpiration' =
    Description            = 'If `true`, the service may delete this client after it has expired.  If
    `false`, the client will remain after expiration, although it cannot be
    used for authentication in that state.
    '
    Type                   = 'boolean'
    TypeName               = 'DeleteOnExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/deleteOnExpiration'
  Property 'description' =
    Description            = 'Description of what these credentials are used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/description'
  Property 'disabled' =
    Description            = 'If true, this client is disabled and cannot be used.  This usually occurs when the
    scopes available to the user owning the client no longer satisfy the client.
    '
    Type                   = 'boolean'
    TypeName               = 'Disabled'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/disabled'
  Property 'expandedScopes' =
    Description            = 'List of scopes granted to this client by matching roles, including the
    client's scopes and the implicit role `client-id:<clientId>`.
    '
    Items
      Description            = 'Scope that client is granted
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ExpandedScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/expandedScopes/items'
    Type                   = 'array'
    TypeName               = 'ExpandedScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/expandedScopes'
  Property 'expires' =
    Description            = 'Date and time where the clients access is set to expire
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/expires'
  Property 'lastDateUsed' =
    Description            = 'Date of last time this client was used. Will only be updated every 6 hours
    or so this may be off by up-to 6 hours. But it still gives a solid hint
    as to whether or not this client is in use.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastDateUsed'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/lastDateUsed'
  Property 'lastModified' =
    Description            = 'Date and time of last modification
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/lastModified'
  Property 'lastRotated' =
    Description            = 'Date and time of when the `accessToken` was reset last time.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastRotated'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/lastRotated'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes the client has (unexpanded).  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#/properties/scopes'
Required               = '[clientId accessToken expires description created lastModified lastDateUsed lastRotated scopes expandedScopes disabled deleteOnExpiration]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Create Client Response'
Type                   = 'object'
TypeName               = 'CreateClientResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-client-response.json#'


http://schemas.taskcluster.net/auth/v1/create-role-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Data to create or update a role.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'
Properties
  Property 'description' =
    Description            = 'Description of what this role is used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#/properties/description'
  Property 'scopes' =
    Description            = 'List of scopes the role grants access to.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope the role grants access to
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#/properties/scopes'
Required               = '[scopes description]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Create Role Request'
Type                   = 'object'
TypeName               = 'CreateRoleRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/create-role-request.json#'


http://schemas.taskcluster.net/auth/v1/get-client-response.json#
================================================================
Additional Properties  = 'false'
Description            = 'Get all details about a client, useful for tools modifying a client
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
Properties
  Property 'clientId' =
    Description            = 'ClientId of the client scopes is requested about
    '
    Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/clientId'
  Property 'created' =
    Description            = 'Date and time when this client was created
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/created'
  Property 'deleteOnExpiration' =
    Description            = 'If `true`, the service may delete this client after it has expired.  If
    `false`, the client will remain after expiration, although it cannot be
    used for authentication in that state.
    '
    Type                   = 'boolean'
    TypeName               = 'DeleteOnExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/deleteOnExpiration'
  Property 'description' =
    Description            = 'Description of what these credentials are used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/description'
  Property 'disabled' =
    Description            = 'If true, this client is disabled and cannot be used.  This usually occurs when the
    scopes available to the user owning the client no longer satisfy the client.
    '
    Type                   = 'boolean'
    TypeName               = 'Disabled'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/disabled'
  Property 'expandedScopes' =
    Description            = 'List of scopes granted to this client by matching roles.  Scopes must be
    composed of printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope that client is granted by a role
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ExpandedScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/expandedScopes/items'
    Type                   = 'array'
    TypeName               = 'ExpandedScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/expandedScopes'
  Property 'expires' =
    Description            = 'Date and time where the clients access is set to expire
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/expires'
  Property 'lastDateUsed' =
    Description            = 'Date of last time this client was used. Will only be updated every 6 hours
    or so this may be off by up-to 6 hours. But it still gives a solid hint
    as to whether or not this client is in use.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastDateUsed'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/lastDateUsed'
  Property 'lastModified' =
    Description            = 'Date and time of last modification
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/lastModified'
  Property 'lastRotated' =
    Description            = 'Date and time of when the `accessToken` was reset last time.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastRotated'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/lastRotated'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes the client has (unexpanded).  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#/properties/scopes'
Required               = '[clientId expires description created lastModified lastDateUsed lastRotated scopes expandedScopes disabled deleteOnExpiration]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Get Client Response'
Type                   = 'object'
TypeName               = 'GetClientResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'


http://schemas.taskcluster.net/auth/v1/get-role-response.json#
==============================================================
Additional Properties  = 'false'
Description            = 'Get all details about a role
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
Properties
  Property 'created' =
    Description            = 'Date and time when this role was created
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/created'
  Property 'description' =
    Description            = 'Description of what this role is used for in markdown.
    Should include who is the owner, point of contact.
    '
    MaxLength              = '10240'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/description'
  Property 'expandedScopes' =
    Description            = 'List of scopes granted anyone who assumes this role, including anything
    granted by roles that can be assumed when you have this role.
    Hence, this includes any scopes in-directly granted as well.
    '
    Items
      Description            = 'Scope this role grants
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ExpandedScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/expandedScopes/items'
    Type                   = 'array'
    TypeName               = 'ExpandedScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/expandedScopes'
  Property 'lastModified' =
    Description            = 'Date and time of last modification
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/lastModified'
  Property 'roleId' =
    Description            = 'roleId of the role requested
    '
    Pattern                = '^[\x20-\x7e]+$'
    Type                   = 'string'
    TypeName               = 'RoleID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/roleId'
  Property 'scopes' =
    Description            = 'List of scopes the role grants access to.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope the role grants access to
      '
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#/properties/scopes'
Required               = '[roleId scopes description created lastModified expandedScopes]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Get Role Response'
Type                   = 'object'
TypeName               = 'GetRoleResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'


http://schemas.taskcluster.net/auth/v1/list-clients-response.json#
==================================================================
Description            = 'List of clients
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#'
Items
  Ref                    = 'http://schemas.taskcluster.net/auth/v1/get-client-response.json#'
  TypeName               = 'Entry'
  SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#/items'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Client Response'
Type                   = 'array'
TypeName               = 'ListClientResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-clients-response.json#'


http://schemas.taskcluster.net/auth/v1/list-roles-response.json#
================================================================
Description            = 'List of roles
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#'
Items
  Ref                    = 'http://schemas.taskcluster.net/auth/v1/get-role-response.json#'
  TypeName               = 'Entry1'
  SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#/items'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Roles Response'
Type                   = 'array'
TypeName               = 'ListRolesResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/list-roles-response.json#'


http://schemas.taskcluster.net/auth/v1/scopeset.json#
=====================================================
Additional Properties  = 'false'
Description            = 'A set of scopes
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'
Properties
  Property 'scopes' =
    Description            = 'List of scopes.  Scopes must be composed of printable ASCII characters and spaces.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#/properties/scopes'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Set of scopes'
Type                   = 'object'
TypeName               = 'SetOfScopes'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/scopeset.json#'


http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#
================================================================
Additional Properties  = 'false'
Description            = 'Sentry DSN for submitting errors.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#'
Properties
  Property 'dsn' =
    Additional Properties  = 'false'
    Description            = 'Access credentials and urls for the Sentry project.
    Credentials will expire in 24-48 hours, you should refresh them within
    24 hours.
    '
    Properties
      Property 'public' =
        Description            = 'Access credential and URL for public error reports.
        These credentials can be used for up-to 24 hours.
        This is for use in client-side applications only.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'Public'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#/properties/dsn/properties/public'
      Property 'secret' =
        Description            = 'Access credential and URL for private error reports.
        These credentials can be used for up-to 24 hours.
        This is for use in serser-side applications and should **not** be
        leaked.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'Secret'
        SourceURL              = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#/properties/dsn/properties/secret'
    Required               = '[secret public]'
    Type                   = 'object'
    TypeName               = 'Dsn'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#/properties/dsn'
  Property 'expires' =
    Description            = 'Expiration time for the credentials. The credentials should not be used
    after this time. They might not be revoked immediately, but will be at
    some arbitrary point after this date-time.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#/properties/expires'
  Property 'project' =
    Description            = 'Project name that the DSN grants access to.
    '
    Title                  = 'Project'
    Type                   = 'string'
    TypeName               = 'Project'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#/properties/project'
Required               = '[project dsn expires]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Sentry DSN Response'
Type                   = 'object'
TypeName               = 'SentryDSNResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/sentry-dsn-response.json#'


http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Token for submitting statistics to statsum.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#'
Properties
  Property 'baseUrl' =
    Description            = 'Base URL for the statsum server this project is allocated on.
    '
    Format                 = 'uri'
    Title                  = 'BaseUrl'
    Type                   = 'string'
    TypeName               = 'BaseURL'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#/properties/baseUrl'
  Property 'expires' =
    Description            = 'Time at which the token expires and should not be used anymore.
    '
    Format                 = 'date-time'
    Title                  = 'Token Expiration'
    Type                   = 'string'
    TypeName               = 'TokenExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#/properties/expires'
  Property 'project' =
    Description            = 'Project name that the token grants access to.
    '
    Title                  = 'Project'
    Type                   = 'string'
    TypeName               = 'Project'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#/properties/project'
  Property 'token' =
    Description            = 'JWT token to be used as `Bearer <token>` when submitting data to statsum.
    '
    Title                  = 'Access Token'
    Type                   = 'string'
    TypeName               = 'AccessToken'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#/properties/token'
Required               = '[project token expires baseUrl]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Statsum Token Response'
Type                   = 'object'
TypeName               = 'StatsumTokenResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/statsum-token-response.json#'


http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Details on how the test request should be authenticated.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#'
Properties
  Property 'clientScopes' =
    Default                = '[]'
    Description            = 'List of scopes that should be client used should be given.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ClientScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/clientScopes/items'
    Type                   = 'array'
    TypeName               = 'ClientScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/clientScopes'
  Property 'requiredScopes' =
    Default                = '[]'
    Description            = 'List of scopes the request should require.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'RequiredScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/requiredScopes/items'
    Type                   = 'array'
    TypeName               = 'RequiredScopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#/properties/requiredScopes'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Test Authenticate Request'
Type                   = 'object'
TypeName               = 'TestAuthenticateRequest'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-request.json#'


http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Details on how the test request was authenticated.
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'
Properties
  Property 'clientId' =
    Description            = 'ClientId from the request as it will be logged
    '
    Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#/properties/clientId'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes the request was authorized.
    '
    Items
      Description            = 'Scope'
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#/properties/scopes'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Test Authenticate Response'
Type                   = 'object'
TypeName               = 'TestAuthenticateResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/test-authenticate-response.json#'


http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#
=========================================================================
Additional Properties  = 'false'
Description            = 'Token for connecting a worker to webhooktunnel proxy
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#'
Properties
  Property 'proxyUrl' =
    Description            = 'websocket url at which proxy is hosted
    '
    Title                  = 'Proxy URL'
    Type                   = 'string'
    TypeName               = 'ProxyURL'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#/properties/proxyUrl'
  Property 'token' =
    Description            = 'jwt token to be used as `Bearer <token>` when connecting to proxy. 
    '
    Title                  = 'Auth Token'
    Type                   = 'string'
    TypeName               = 'AuthToken'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#/properties/token'
  Property 'tunnelId' =
    Description            = 'id for proxy connection
    '
    Title                  = 'Proxy Connection ID'
    Type                   = 'string'
    TypeName               = 'ProxyConnectionID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#/properties/tunnelId'
Required               = '[token tunnelId proxyUrl]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Webhooktunnel Token Response'
Type                   = 'object'
TypeName               = 'WebhooktunnelTokenResponse'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/webhooktunnel-token-response.json#'


http://references.taskcluster.net/auth/v1/exchanges.json
========================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Auth Pulse Exchanges'
Description     = 'The auth service, typically available at `auth.taskcluster.net`
is responsible for storing credentials, managing assignment of scopes,
and validation of request signatures from other services.

These exchanges provides notifications when credentials or roles are
updated. This is mostly so that multiple instances of the auth service
can purge their caches and synchronize state. But you are of course
welcome to use these for other purposes, monitoring changes for example.'
Exchange Prefix = 'exchange/taskcluster-auth/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'client-created'
    Entry Name        = 'clientCreated'
    Entry Title       = 'Client Created Messages'
    Entry Description = 'Message that a new client has been created.'
    Routing Key Element 0     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/auth/v1/client-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'client-updated'
    Entry Name        = 'clientUpdated'
    Entry Title       = 'Client Updated Messages'
    Entry Description = 'Message that a new client has been updated.'
    Routing Key Element 0     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/auth/v1/client-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'client-deleted'
    Entry Name        = 'clientDeleted'
    Entry Title       = 'Client Deleted Messages'
    Entry Description = 'Message that a new client has been deleted.'
    Routing Key Element 0     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/auth/v1/client-message.json#'
Entry 3     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'role-created'
    Entry Name        = 'roleCreated'
    Entry Title       = 'Role Created Messages'
    Entry Description = 'Message that a new role has been created.'
    Routing Key Element 0     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/auth/v1/role-message.json#'
Entry 4     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'role-updated'
    Entry Name        = 'roleUpdated'
    Entry Title       = 'Role Updated Messages'
    Entry Description = 'Message that a new role has been updated.'
    Routing Key Element 0     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/auth/v1/role-message.json#'
Entry 5     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'role-deleted'
    Entry Name        = 'roleDeleted'
    Entry Title       = 'Role Deleted Messages'
    Entry Description = 'Message that a new role has been deleted.'
    Routing Key Element 0     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/auth/v1/role-message.json#'


http://schemas.taskcluster.net/auth/v1/client-message.json#
===========================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a client has changed
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/client-message.json#'
Properties
  Property 'clientId' =
    Description            = '`clientId` of the client that was changed
    '
    Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
    Type                   = 'string'
    TypeName               = 'ClientID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/client-message.json#/properties/clientId'
  Property 'version' =
    Description            = 'Message version number'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/client-message.json#/properties/version'
Required               = '[version clientId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Client Message'
Type                   = 'object'
TypeName               = 'ClientMessage'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/client-message.json#'


http://schemas.taskcluster.net/auth/v1/role-message.json#
=========================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a role has changed
'
ID                     = 'http://schemas.taskcluster.net/auth/v1/role-message.json#'
Properties
  Property 'roleId' =
    Description            = '`roleId` of the role that was changed
    '
    Pattern                = '^[\x20-\x7e]+$'
    Type                   = 'string'
    TypeName               = 'RoleID'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/role-message.json#/properties/roleId'
  Property 'version' =
    Description            = 'Message version number'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/auth/v1/role-message.json#/properties/version'
Required               = '[version roleId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Role Message'
Type                   = 'object'
TypeName               = 'RoleMessage'
SourceURL              = 'http://schemas.taskcluster.net/auth/v1/role-message.json#'


http://references.taskcluster.net/aws-provisioner/v1/api.json
=============================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'AWS Provisioner API Documentation'
Description = 'The AWS Provisioner is responsible for provisioning instances on EC2 for use in
Taskcluster.  The provisioner maintains a set of worker configurations which
can be managed with an API that is typically available at
aws-provisioner.taskcluster.net/v1.  This API can also perform basic instance
management tasks in addition to maintaining the internal state of worker type
configuration information.

The Provisioner runs at a configurable interval.  Each iteration of the
provisioner fetches a current copy the state that the AWS EC2 api reports.  In
each iteration, we ask the Queue how many tasks are pending for that worker
type.  Based on the number of tasks pending and the scaling ratio, we may
submit requests for new instances.  We use pricing information, capacity and
utility factor information to decide which instance type in which region would
be the optimal configuration.

Each EC2 instance type will declare a capacity and utility factor.  Capacity is
the number of tasks that a given machine is capable of running concurrently.
Utility factor is a relative measure of performance between two instance types.
We multiply the utility factor by the spot price to compare instance types and
regions when making the bidding choices.

When a new EC2 instance is instantiated, its user data contains a token in
`securityToken` that can be used with the `getSecret` method to retrieve
the worker's credentials and any needed passwords or other restricted
information.  The worker is responsible for deleting the secret after
retrieving it, to prevent dissemination of the secret to other proceses
which can read the instance user data.
'
Base URL    = 'https://aws-provisioner.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/list-worker-type-summaries'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listWorkerTypeSummaries'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-summaries-response.json#'
    Entry Title       = 'List worker types with details'
    Entry Description = 'Return a list of worker types, including some summary information about
current capacity for each.  While this list includes all defined worker types,
there may be running EC2 instances for deleted worker types that are not
included here.  The list is unordered.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/worker-type/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'createWorkerType'
    Entry Stability   = 'stable'
    Entry Scopes      = 'aws-provisioner:manage-worker-type:<workerType>'
    Entry Input       = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
    Entry Title       = 'Create new Worker Type'
    Entry Description = 'Create a worker type.  A worker type contains all the configuration
needed for the provisioner to manage the instances.  Each worker type
knows which regions and which instance types are allowed for that
worker type.  Remember that Capacity is the number of concurrent tasks
that can be run on a given EC2 resource and that Utility is the relative
performance rate between different instance types.  There is no way to
configure different regions to have different sets of instance types
so ensure that all instance types are available in all regions.
This function is idempotent.

Once a worker type is in the provisioner, a back ground process will
begin creating instances for it based on its capacity bounds and its
pending task count from the Queue.  It is the worker's responsibility
to shut itself down.  The provisioner has a limit (currently 96hours)
for all instances to prevent zombie instances from running indefinitely.

The provisioner will ensure that all instances created are tagged with
aws resource tags containing the provisioner id and the worker type.

If provided, the secrets in the global, region and instance type sections
are available using the secrets api.  If specified, the scopes provided
will be used to generate a set of temporary credentials available with
the other secrets.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/worker-type/<workerType>/update'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'updateWorkerType'
    Entry Stability   = 'stable'
    Entry Scopes      = 'aws-provisioner:manage-worker-type:<workerType>'
    Entry Input       = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
    Entry Title       = 'Update Worker Type'
    Entry Description = 'Provide a new copy of a worker type to replace the existing one.
This will overwrite the existing worker type definition if there
is already a worker type of that name.  This method will return a
200 response along with a copy of the worker type definition created
Note that if you are using the result of a GET on the worker-type
end point that you will need to delete the lastModified and workerType
keys from the object returned, since those fields are not allowed
the request body for this method

Otherwise, all input requirements and actions are the same as the
create method.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-type-last-modified/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerTypeLastModified'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-last-modified.json#'
    Entry Title       = 'Get Worker Type Last Modified Time'
    Entry Description = 'This method is provided to allow workers to see when they were
last modified.  The value provided through UserData can be
compared against this value to see if changes have been made
If the worker type definition has not been changed, the date
should be identical as it is the same stored value.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-type/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerType'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- aws-provisioner:view-worker-type:<workerType>
- aws-provisioner:manage-worker-type:<workerType>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
    Entry Title       = 'Get Worker Type'
    Entry Description = 'Retrieve a copy of the requested worker type definition.
This copy contains a lastModified field as well as the worker
type name.  As such, it will require manipulation to be able to
use the results of this method to submit date to the update
method.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/worker-type/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'removeWorkerType'
    Entry Stability   = 'stable'
    Entry Scopes      = 'aws-provisioner:manage-worker-type:<workerType>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Worker Type'
    Entry Description = 'Delete a worker type definition.  This method will only delete
the worker type definition from the storage table.  The actual
deletion will be handled by a background worker.  As soon as this
method is called for a worker type, the background worker will
immediately submit requests to cancel all spot requests for this
worker type as well as killing all instances regardless of their
state.  If you want to gracefully remove a worker type, you must
either ensure that no tasks are created with that worker type name
or you could theoretically set maxCapacity to 0, though, this is
not a supported or tested action'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/list-worker-types'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listWorkerTypes'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#'
    Entry Title       = 'List Worker Types'
    Entry Description = 'Return a list of string worker type names.  These are the names
of all managed worker types known to the provisioner.  This does
not include worker types which are left overs from a deleted worker
type definition but are still running in AWS.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/secret/<token>'
    Entry Args        = '[token]'
    Entry Query        = '[]'
    Entry Name        = 'createSecret'
    Entry Stability   = 'stable'
    Entry Scopes      = 'aws-provisioner:create-secret:<workerType>'
    Entry Input       = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#'
    Entry Output      = ''
    Entry Title       = 'Create new Secret'
    Entry Description = 'Insert a secret into the secret storage.  The supplied secrets will
be provided verbatime via `getSecret`, while the supplied scopes will
be converted into credentials by `getSecret`.

This method is not ordinarily used in production; instead, the provisioner
creates a new secret directly for each spot bid.'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/secret/<token>'
    Entry Args        = '[token]'
    Entry Query        = '[]'
    Entry Name        = 'getSecret'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#'
    Entry Title       = 'Get a Secret'
    Entry Description = 'Retrieve a secret from storage.  The result contains any passwords or
other restricted information verbatim as well as a temporary credential
based on the scopes specified when the secret was created.

It is important that this secret is deleted by the consumer (`removeSecret`),
or else the secrets will be visible to any process which can access the
user data associated with the instance.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/instance-started/<instanceId>/<token>'
    Entry Args        = '[instanceId token]'
    Entry Query        = '[]'
    Entry Name        = 'instanceStarted'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Report an instance starting'
    Entry Description = 'An instance will report in by giving its instance id as well
as its security token.  The token is given and checked to ensure
that it matches a real token that exists to ensure that random
machines do not check in.  We could generate a different token
but that seems like overkill'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/secret/<token>'
    Entry Args        = '[token]'
    Entry Query        = '[]'
    Entry Name        = 'removeSecret'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Remove a Secret'
    Entry Description = 'Remove a secret.  After this call, a call to `getSecret` with the given
token will return no information.

It is very important that the consumer of a 
secret delete the secret from storage before handing over control
to untrusted processes to prevent credential and/or secret leakage.'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-type/<workerType>/launch-specifications'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'getLaunchSpecs'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'Any of:
- aws-provisioner:view-worker-type:<workerType>
- aws-provisioner:manage-worker-type:<workerType>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#'
    Entry Title       = 'Get All Launch Specifications for WorkerType'
    Entry Description = 'This method returns a preview of all possible launch specifications
that this worker type definition could submit to EC2.  It is used to
test worker types, nothing more

**This API end-point is experimental and may be subject to change without warning.**'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/state/<workerType>'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'state'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get AWS State for a worker type'
    Entry Description = 'Return the state of a given workertype as stored by the provisioner. 
This state is stored as three lists: 1 for running instances, 1 for
pending requests.  The `summary` property contains an updated summary
similar to that returned from `listWorkerTypeSummaries`.'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/backend-status'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'backendStatus'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#'
    Entry Title       = 'Backend Status'
    Entry Description = 'This endpoint is used to show when the last time the provisioner
has checked in.  A check in is done through the deadman's snitch
api.  It is done at the conclusion of a provisioning iteration
and used to tell if the background provisioning process is still
running.

**Warning** this api end-point is **not stable**.'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#
===============================================================================
Additional Properties  = 'false'
Description            = 'Backend Status Response
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#'
Properties
  Property 'lastCheckedIn' =
    Description            = 'A date when the provisioner backend process last completed an iteration.
    This does not imply success, rather it is to make sure that the process
    is alive
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastCheckedIn'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#/properties/lastCheckedIn'
  Property 'status' =
    Description            = 'A string from Deadman's Snitch which describes the status.  See
    https://deadmanssnitch.com/docs/api/v1#listing-your-snitches for an
    explanation of this value
    '
    Type                   = 'string'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#/properties/status'
Required               = '[status lastCheckedIn]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Backend Status Response'
Type                   = 'object'
TypeName               = 'BackendStatusResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#
=============================================================================
Additional Properties  = 'false'
Description            = 'A Secret
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#'
Properties
  Property 'expiration' =
    Description            = 'The date at which the secret is no longer guaranteed to exist
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/expiration'
  Property 'scopes' =
    Description            = 'List of strings which are scopes for temporary credentials to give
    to the worker through the secret system.  Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/scopes'
  Property 'secrets' =
    Description            = 'Free form object which contains the secrets stored
    '
    Type                   = 'object'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/secrets'
  Property 'token' =
    Description            = 'A Slug ID which is the uniquely addressable token to access this
    set of secrets
    '
    Type                   = 'string'
    TypeName               = 'Token'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/token'
  Property 'workerType' =
    Description            = 'A string describing what the secret will be used for
    '
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#/properties/workerType'
Required               = '[workerType secrets scopes token expiration]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Secret Request'
Type                   = 'object'
TypeName               = 'GetSecretRequest'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#
==================================================================================
Additional Properties  = 'false'
Description            = 'A worker launchSpecification and required metadata
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'
Properties
  Property 'availabilityZones' =
    Items
      Additional Properties  = 'false'
      Description            = 'Availability zone configuration'
      Properties
        Property 'availabilityZone' =
          Description            = 'The AWS availability zone being configured.  Example: eu-central-1b
          '
          Type                   = 'string'
          TypeName               = 'AvailabilityZone'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones/items/properties/availabilityZone'
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this AZ
          '
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones/items/properties/launchSpec'
        Property 'region' =
          Description            = 'The AWS region containing this availability zone.  Example: eu-central-1
          '
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones/items/properties/region'
        Property 'secrets' =
          Default                = 'map[]'
          Description            = 'Static Secrets unique to this AZ
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones/items/properties/secrets'
        Property 'userData' =
          Default                = 'map[]'
          Description            = 'UserData entries unique to this AZ
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones/items/properties/userData'
      Required               = '[region availabilityZone launchSpec]'
      Type                   = 'object'
      TypeName               = 'AvailabilityZonesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones/items'
    Type                   = 'array'
    TypeName               = 'AvailabilityZones'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/availabilityZones'
  Property 'canUseOndemand' =
    Description            = 'True if this worker type is allowed on demand instances.  Currently
    ignored
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseOndemand'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/canUseOndemand'
  Property 'canUseSpot' =
    Description            = 'True if this worker type is allowed spot instances.  Currently ignored
    as all instances are Spot
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseSpot'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/canUseSpot'
  Property 'description' =
    Description            = 'A string which describes what this image is for and hints on using it
    '
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/description'
  Property 'instanceTypes' =
    Items
      Additional Properties  = 'false'
      Description            = 'Instance Type configuration'
      Properties
        Property 'capacity' =
          Description            = 'This number represents the number of tasks that this instance type
          is capable of running concurrently.  This is used by the provisioner
          to know how many pending tasks to offset a pending instance of this
          type by
          '
          Type                   = 'number'
          TypeName               = 'Capacity'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/capacity'
        Property 'instanceType' =
          Description            = 'InstanceType name for Amazon.
          '
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/instanceType'
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/launchSpec'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this InstanceType.  Scopes must
          be composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = 'ScopesEntry'
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/userData'
        Property 'utility' =
          Description            = 'This number is a relative measure of performance between two instance
          types.  It is multiplied by the spot price from Amazon to figure out
          which instance type is the cheapest one
          '
          Type                   = 'number'
          TypeName               = 'Utility'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items/properties/utility'
      Required               = '[instanceType capacity utility launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = 'InstanceTypesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes/items'
    Type                   = 'array'
    TypeName               = 'InstanceTypes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/instanceTypes'
  Property 'launchSpec' =
    Description            = 'Launch Specification entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'LaunchSpec'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/launchSpec'
  Property 'maxCapacity' =
    Description            = 'Maximum number of capacity units to be provisioned.
    '
    Type                   = 'number'
    TypeName               = 'MaxCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/maxCapacity'
  Property 'maxPrice' =
    Description            = 'Maximum price we'll pay.  Like minPrice, this takes into account the
    utility factor when figuring out what the actual SpotPrice submitted
    to Amazon will be
    '
    Type                   = 'number'
    TypeName               = 'MaxPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/maxPrice'
  Property 'minCapacity' =
    Description            = 'Minimum number of capacity units to be provisioned.  A capacity unit
    is an abstract unit of capacity, where one capacity unit is roughly
    one task which should be taken off the queue
    '
    Type                   = 'number'
    TypeName               = 'MinCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/minCapacity'
  Property 'minPrice' =
    Description            = 'Minimum price to pay for an instance.  A Price is considered to be the
    Amazon Spot Price multiplied by the utility factor of the InstantType
    as specified in the instanceTypes list.  For example, if the minPrice
    is set to $0.5 and the utility factor is 2, the actual minimum bid
    used will be $0.25
    '
    Type                   = 'number'
    TypeName               = 'MinPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/minPrice'
  Property 'owner' =
    Description            = 'A string which identifies the owner of this worker type
    '
    Type                   = 'string'
    TypeName               = 'Owner'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/owner'
  Property 'regions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Region configuration'
      Properties
        Property 'launchSpec' =
          Additional Properties  = 'true'
          Description            = 'LaunchSpecification entries unique to this Region
          '
          Properties
            Property 'ImageId' =
              Description            = 'Per-region AMI ImageId'
              Type                   = 'string'
              TypeName               = 'ImageID'
              SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/launchSpec/properties/ImageId'
          Required               = '[ImageId]'
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/launchSpec'
        Property 'region' =
          Description            = 'The Amazon AWS Region being configured.  Example: us-west-1
          '
          Enum                   = '[us-west-2 us-east-1 us-east-2 us-west-1 eu-central-1]'
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/region'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this Region.  Scopes must be
          composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = 'ScopesEntry'
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items/properties/userData'
      Required               = '[region launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = 'RegionsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions/items'
    Type                   = 'array'
    TypeName               = 'Regions'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/regions'
  Property 'scalingRatio' =
    Description            = 'A scaling ratio of `0.2` means that the provisioner will attempt to keep
    the number of pending tasks around 20% of the provisioned capacity.
    This results in pending tasks waiting 20% of the average task execution
    time before starting to run.
    A higher scaling ratio often results in better utilization and longer
    waiting times. For workerTypes running long tasks a short scaling ratio
    may be preferred, but for workerTypes running quick tasks a higher scaling
    ratio may increase utilization without major delays.
    If using a scaling ratio of 0, the provisioner will attempt to keep the
    capacity of pending spot requests equal to the number of pending tasks.
    '
    Type                   = 'number'
    TypeName               = 'ScalingRatio'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/scalingRatio'
  Property 'scopes' =
    Description            = 'Scopes to issue credentials to for all regions Scopes must be composed of
    printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/scopes'
  Property 'secrets' =
    Description            = 'Static secrets entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/secrets'
  Property 'userData' =
    Description            = 'UserData entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'UserData'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#/properties/userData'
Required               = '[launchSpec userData secrets scopes maxCapacity scalingRatio minPrice maxPrice instanceTypes regions description owner]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Create Worker Type Request'
Type                   = 'object'
TypeName               = 'CreateWorkerTypeRequest'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#
=================================================================================
Description            = 'All of the launch specifications for a worker type
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get All Launch Specs Response'
Type                   = 'object'
TypeName               = 'GetAllLaunchSpecsResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#
===========================================================================
Additional Properties  = 'false'
Description            = 'Secrets from the provisioner
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#'
Properties
  Property 'credentials' =
    Additional Properties  = 'false'
    Description            = 'Generated Temporary credentials from the Provisioner
    '
    Properties
      Property 'accessToken' =
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken certificate]'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/credentials'
  Property 'data' =
    Description            = 'Free-form object which contains secrets from the worker type definition
    '
    Type                   = 'object'
    TypeName               = 'Data'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/data'
  Property 'scopes' =
    Items
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#/properties/scopes'
Required               = '[data credentials scopes]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Secret Response'
Type                   = 'object'
TypeName               = 'GetSecretResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-last-modified.json#
=====================================================================================
Additional Properties  = 'false'
Description            = 'Get the last modified date of a workerType
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-last-modified.json#'
Properties
  Property 'lastModified' =
    Description            = 'ISO Date string (e.g. new Date().toISOString()) which represents the time
    when this worker type definition was last altered (inclusive of creation)
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-last-modified.json#/properties/lastModified'
  Property 'workerType' =
    Description            = 'The ID of the workerType
    '
    Pattern                = '^[A-Za-z0-9+/=_-]{1,22}$'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-last-modified.json#/properties/workerType'
Required               = '[workerType lastModified]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Worker Type Response'
Type                   = 'object'
TypeName               = 'GetWorkerTypeResponse1'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-last-modified.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#
================================================================================
Additional Properties  = 'false'
Description            = 'A worker launchSpecification and required metadata
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'
Properties
  Property 'availabilityZones' =
    Items
      Additional Properties  = 'false'
      Description            = 'Availability zone configuration'
      Properties
        Property 'availabilityZone' =
          Description            = 'The AWS availability zone being configured.  Example: eu-central-1b
          '
          Type                   = 'string'
          TypeName               = 'AvailabilityZone'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones/items/properties/availabilityZone'
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this AZ
          '
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones/items/properties/launchSpec'
        Property 'region' =
          Description            = 'The AWS region containing this availability zone.  Example: eu-central-1
          '
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones/items/properties/region'
        Property 'secrets' =
          Default                = 'map[]'
          Description            = 'Static Secrets unique to this AZ
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones/items/properties/secrets'
        Property 'userData' =
          Default                = 'map[]'
          Description            = 'UserData entries unique to this AZ
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones/items/properties/userData'
      Required               = '[availabilityZone region launchSpec]'
      Type                   = 'object'
      TypeName               = 'AvailabilityZonesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones/items'
    Type                   = 'array'
    TypeName               = 'AvailabilityZones'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/availabilityZones'
  Property 'canUseOndemand' =
    Description            = 'True if this worker type is allowed on demand instances.  Currently
    ignored
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseOndemand'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/canUseOndemand'
  Property 'canUseSpot' =
    Description            = 'True if this worker type is allowed spot instances.  Currently ignored
    as all instances are Spot
    '
    Type                   = 'boolean'
    TypeName               = 'CanUseSpot'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/canUseSpot'
  Property 'description' =
    Description            = 'A string which describes what this image is for and hints on using it
    '
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/description'
  Property 'instanceTypes' =
    Items
      Additional Properties  = 'false'
      Description            = 'Instance Type configuration'
      Properties
        Property 'capacity' =
          Description            = 'This number represents the number of tasks that this instance type
          is capable of running concurrently.  This is used by the provisioner
          to know how many pending tasks to offset a pending instance of this
          type by
          '
          Type                   = 'number'
          TypeName               = 'Capacity'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/capacity'
        Property 'instanceType' =
          Description            = 'InstanceType name for Amazon.
          '
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/instanceType'
        Property 'launchSpec' =
          Description            = 'LaunchSpecification entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/launchSpec'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this InstanceType.  Scopes must
          be composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = 'ScopesEntry'
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this InstanceType
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/userData'
        Property 'utility' =
          Description            = 'This number is a relative measure of performance between two instance
          types.  It is multiplied by the spot price from Amazon to figure out
          which instance type is the cheapest one
          '
          Type                   = 'number'
          TypeName               = 'Utility'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items/properties/utility'
      Required               = '[instanceType capacity utility launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = 'InstanceTypesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes/items'
    Type                   = 'array'
    TypeName               = 'InstanceTypes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/instanceTypes'
  Property 'lastModified' =
    Description            = 'ISO Date string (e.g. new Date().toISOString()) which represents the time
    when this worker type definition was last altered (inclusive of creation)
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'LastModified'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/lastModified'
  Property 'launchSpec' =
    Description            = 'Launch Specification entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'LaunchSpec'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/launchSpec'
  Property 'maxCapacity' =
    Description            = 'Maximum number of capacity units to be provisioned.
    '
    Type                   = 'number'
    TypeName               = 'MaxCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/maxCapacity'
  Property 'maxPrice' =
    Description            = 'Maximum price we'll pay.  Like minPrice, this takes into account the
    utility factor when figuring out what the actual SpotPrice submitted
    to Amazon will be
    '
    Type                   = 'number'
    TypeName               = 'MaxPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/maxPrice'
  Property 'minCapacity' =
    Description            = 'Minimum number of capacity units to be provisioned.  A capacity unit
    is an abstract unit of capacity, where one capacity unit is roughly
    one task which should be taken off the queue
    '
    Type                   = 'number'
    TypeName               = 'MinCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/minCapacity'
  Property 'minPrice' =
    Description            = 'Minimum price to pay for an instance.  A Price is considered to be the
    Amazon Spot Price multiplied by the utility factor of the InstantType
    as specified in the instanceTypes list.  For example, if the minPrice
    is set to $0.5 and the utility factor is 2, the actual minimum bid
    used will be $0.25
    '
    Type                   = 'number'
    TypeName               = 'MinPrice'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/minPrice'
  Property 'owner' =
    Description            = 'A string which identifies the owner of this worker type
    '
    Type                   = 'string'
    TypeName               = 'Owner'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/owner'
  Property 'regions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Region configuration'
      Properties
        Property 'launchSpec' =
          Additional Properties  = 'true'
          Description            = 'LaunchSpecification entries unique to this Region
          '
          Properties
            Property 'ImageId' =
              Description            = 'Per-region AMI ImageId'
              Type                   = 'string'
              TypeName               = 'ImageID'
              SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/launchSpec/properties/ImageId'
          Required               = '[ImageId]'
          Type                   = 'object'
          TypeName               = 'LaunchSpec'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/launchSpec'
        Property 'region' =
          Description            = 'The Amazon AWS Region being configured.  Example: us-west-1
          '
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/region'
        Property 'scopes' =
          Description            = 'Scopes which should be included for this Region.  Scopes must be
          composed of printable ASCII characters and spaces.
          '
          Items
            Pattern                = '^[ -~]*$'
            Type                   = 'string'
            TypeName               = 'ScopesEntry'
            SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/scopes/items'
          Type                   = 'array'
          TypeName               = 'Scopes'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/scopes'
        Property 'secrets' =
          Description            = 'Static Secrets unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'Secrets'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/secrets'
        Property 'userData' =
          Description            = 'UserData entries unique to this Region
          '
          Type                   = 'object'
          TypeName               = 'UserData'
          SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items/properties/userData'
      Required               = '[region launchSpec secrets userData scopes]'
      Type                   = 'object'
      TypeName               = 'RegionsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions/items'
    Type                   = 'array'
    TypeName               = 'Regions'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/regions'
  Property 'scalingRatio' =
    Description            = 'A scaling ratio of `0.2` means that the provisioner will attempt to keep
    the number of pending tasks around 20% of the provisioned capacity.
    This results in pending tasks waiting 20% of the average task execution
    time before starting to run.
    A higher scaling ratio often results in better utilization and longer
    waiting times. For workerTypes running long tasks a short scaling ratio
    may be preferred, but for workerTypes running quick tasks a higher scaling
    ratio may increase utilization without major delays.
    If using a scaling ratio of 0, the provisioner will attempt to keep the
    capacity of pending spot requests equal to the number of pending tasks.
    '
    Type                   = 'number'
    TypeName               = 'ScalingRatio'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/scalingRatio'
  Property 'scopes' =
    Description            = 'Scopes to issue credentials to for all regions.  Scopes must be composed
    of printable ASCII characters and spaces.
    '
    Items
      Pattern                = '^[ -~]*$'
      Type                   = 'string'
      TypeName               = 'ScopesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/scopes/items'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/scopes'
  Property 'secrets' =
    Description            = 'Static secrets entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/secrets'
  Property 'userData' =
    Description            = 'UserData entries which are used in all regions and all instance types
    '
    Type                   = 'object'
    TypeName               = 'UserData'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/userData'
  Property 'workerType' =
    Description            = 'The ID of the workerType
    '
    Pattern                = '^[A-Za-z0-9+/=_-]{1,22}$'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#/properties/workerType'
Required               = '[workerType launchSpec userData secrets scopes minCapacity maxCapacity scalingRatio minPrice maxPrice lastModified instanceTypes regions description owner]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Get Worker Type Response'
Type                   = 'object'
TypeName               = 'GetWorkerTypeResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#
==================================================================================
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#'
Items
  Type                   = 'string'
  TypeName               = 'Entry1'
  SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#/items'
Title                  = 'List Worker Types'
Type                   = 'array'
TypeName               = 'ListWorkerTypes1'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-summaries-response.json#
============================================================================================
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-summaries-response.json#'
Items
  Ref                    = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#'
  TypeName               = 'Entry'
  SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-summaries-response.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List Worker Type Summaries Response'
Type                   = 'array'
TypeName               = 'ListWorkerTypeSummariesResponse'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-summaries-response.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#
===========================================================================
Additional Properties  = 'false'
Description            = 'A summary of a worker type's current state, expresed in terms of capacity.
'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#'
Properties
  Property 'maxCapacity' =
    Title                  = 'Maximum capacity of the workerType'
    Type                   = 'integer'
    TypeName               = 'MaximumCapacityOfTheWorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#/properties/maxCapacity'
  Property 'minCapacity' =
    Title                  = 'Minimum capacity of the workerType'
    Type                   = 'integer'
    TypeName               = 'MinimumCapacityOfTheWorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#/properties/minCapacity'
  Property 'pendingCapacity' =
    Title                  = 'Total pending capacity'
    Type                   = 'integer'
    TypeName               = 'TotalPendingCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#/properties/pendingCapacity'
  Property 'requestedCapacity' =
    Title                  = 'Total requested capacity'
    Type                   = 'integer'
    TypeName               = 'TotalRequestedCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#/properties/requestedCapacity'
  Property 'runningCapacity' =
    Title                  = 'Total running capacity'
    Type                   = 'integer'
    TypeName               = 'TotalRunningCapacity'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#/properties/runningCapacity'
  Property 'workerType' =
    Title                  = 'Worker type name'
    Type                   = 'string'
    TypeName               = 'WorkerTypeName'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#/properties/workerType'
Required               = '[workerType minCapacity maxCapacity requestedCapacity pendingCapacity runningCapacity]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Worker Type Summary'
Type                   = 'object'
TypeName               = 'WorkerTypeSummary'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-summary.json#'


http://references.taskcluster.net/aws-provisioner/v1/exchanges.json
===================================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'AWS Provisioner Pulse Exchanges'
Description     = 'Exchanges from the provisioner... more docs later'
Exchange Prefix = 'exchange/taskcluster-aws-provisioner/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'worker-type-created'
    Entry Name        = 'workerTypeCreated'
    Entry Title       = 'WorkerType Created Message'
    Entry Description = 'When a new `workerType` is created a message will be published to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'workerType'
        Element Summary   = 'WorkerType that this message concerns.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'worker-type-updated'
    Entry Name        = 'workerTypeUpdated'
    Entry Title       = 'WorkerType Updated Message'
    Entry Description = 'When a `workerType` is updated a message will be published to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'workerType'
        Element Summary   = 'WorkerType that this message concerns.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'worker-type-removed'
    Entry Name        = 'workerTypeRemoved'
    Entry Title       = 'WorkerType Removed Message'
    Entry Description = 'When a `workerType` is removed a message will be published to this
exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'workerType'
        Element Summary   = 'WorkerType that this message concerns.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'


http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#
===========================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that an action occured to a worker type'
ID                     = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'
Properties
  Property 'version' =
    Type                   = 'number'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#/properties/version'
  Property 'workerType' =
    Description            = 'Name of the worker type which was created
    '
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#/properties/workerType'
Required               = '[workerType version]'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Worker Type Message'
Type                   = 'object'
TypeName               = 'WorkerTypeMessage'
SourceURL              = 'http://schemas.taskcluster.net/aws-provisioner/v1/worker-type-message.json#'


http://references.taskcluster.net/github/v1/api.json
====================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Taskcluster GitHub API Documentation'
Description = 'The github service, typically available at
`github.taskcluster.net`, is responsible for publishing pulse
messages in response to GitHub events.

This document describes the API end-point for consuming GitHub
web hooks, as well as some useful consumer APIs.

When Github forbids an action, this service returns an HTTP 403
with code ForbiddenByGithub.'
Base URL    = 'https://github.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/github'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'githubWebHookConsumer'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Consume GitHub WebHook'
    Entry Description = 'Capture a GitHub event and publish it via pulse, if it's a push,
release or pull request.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/builds'
    Entry Args        = '[]'
    Entry Query        = '[continuationToken limit organization repository sha]'
    Entry Name        = 'builds'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/github/v1/build-list.json#'
    Entry Title       = 'List of Builds'
    Entry Description = 'A paginated list of builds that have been run in
Taskcluster. Can be filtered on various git-specific
fields.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/repository/<owner>/<repo>/<branch>/badge.svg'
    Entry Args        = '[owner repo branch]'
    Entry Query        = '[]'
    Entry Name        = 'badge'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Latest Build Status Badge'
    Entry Description = 'Checks the status of the latest build of a given branch
and returns corresponding badge svg.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/repository/<owner>/<repo>'
    Entry Args        = '[owner repo]'
    Entry Query        = '[]'
    Entry Name        = 'repository'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/github/v1/repository.json'
    Entry Title       = 'Get Repository Info'
    Entry Description = 'Returns any repository metadata that is
useful within Taskcluster related services.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/repository/<owner>/<repo>/<branch>/latest'
    Entry Args        = '[owner repo branch]'
    Entry Query        = '[]'
    Entry Name        = 'latest'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Latest Status for Branch'
    Entry Description = 'For a given branch of a repository, this will always point
to a status page for the most recent task triggered by that
branch.

Note: This is a redirect rather than a direct link.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/repository/<owner>/<repo>/statuses/<sha>'
    Entry Args        = '[owner repo sha]'
    Entry Query        = '[]'
    Entry Name        = 'createStatus'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'github:create-status:<owner>/<repo>'
    Entry Input       = 'http://schemas.taskcluster.net/github/v1/create-status.json'
    Entry Output      = ''
    Entry Title       = 'Post a status against a given changeset'
    Entry Description = 'For a given changeset (SHA) of a repository, this will attach a "commit status"
on github. These statuses are links displayed next to each revision.
The status is either OK (green check) or FAILURE (red cross), 
made of a custom title and link.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/repository/<owner>/<repo>/issues/<number>/comments'
    Entry Args        = '[owner repo number]'
    Entry Query        = '[]'
    Entry Name        = 'createComment'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'github:create-comment:<owner>/<repo>'
    Entry Input       = 'http://schemas.taskcluster.net/github/v1/create-comment.json'
    Entry Output      = ''
    Entry Title       = 'Post a comment on a given GitHub Issue or Pull Request'
    Entry Description = 'For a given Issue or Pull Request of a repository, this will write a new message.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/github/v1/build-list.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A paginated list of builds
'
ID                     = 'http://schemas.taskcluster.net/github/v1/build-list.json#'
Properties
  Property 'builds' =
    Description            = 'A simple list of builds.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'created' =
          Description            = 'The initial creation time of the build. This is when it became pending.
          '
          Format                 = 'date-time'
          Type                   = 'string'
          TypeName               = 'Created'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/created'
        Property 'eventId' =
          Description            = 'The GitHub webhook deliveryId. Extracted from the header 'X-GitHub-Delivery'
          '
          OneOf
            Item '0' =
              Pattern                = '^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$'
              Type HAS NOT BEEN SET!!!
              TypeName               = 'Var'
              SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId/oneOf[0]'
            Item '1' =
              Pattern                = 'Unknown'
              Type HAS NOT BEEN SET!!!
              TypeName               = 'Var1'
              SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId/oneOf[1]'
          Type                   = 'string'
          TypeName               = 'EventID'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId'
        Property 'eventType' =
          Description            = 'Type of Github event that triggered the build (i.e. push, pull_request.opened).'
          Type                   = 'string'
          TypeName               = 'EventType'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventType'
        Property 'organization' =
          Description            = 'Github organization associated with the build.'
          MaxLength              = '100'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_%]*)$'
          Type                   = 'string'
          TypeName               = 'Organization'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/organization'
        Property 'repository' =
          Description            = 'Github repository associated with the build.'
          MaxLength              = '100'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_%]*)$'
          Type                   = 'string'
          TypeName               = 'Repository'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/repository'
        Property 'sha' =
          Description            = 'Github revision associated with the build.'
          MaxLength              = '40'
          MinLength              = '40'
          Type                   = 'string'
          TypeName               = 'Sha'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/sha'
        Property 'state' =
          Description            = 'Github status associated with the build.'
          Enum                   = '[pending success error failure]'
          Type                   = 'string'
          TypeName               = 'State'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/state'
        Property 'taskGroupId' =
          Description            = 'Taskcluster task-group associated with the build.'
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Type                   = 'string'
          TypeName               = 'TaskGroupID'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/taskGroupId'
        Property 'updated' =
          Description            = 'The last updated of the build. If it is done, this is when it finished.
          '
          Format                 = 'date-time'
          Type                   = 'string'
          TypeName               = 'Updated'
          SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/updated'
      Required               = '[organization repository sha state taskGroupId eventType eventId created updated]'
      Type                   = 'object'
      TypeName               = 'BuildsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items'
    Type                   = 'array'
    TypeName               = 'Builds'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds'
  Property 'continuationToken' =
    Description            = 'Passed back from Azure to allow us to page through long result sets.'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/continuationToken'
Required               = '[builds]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Builds'
Type                   = 'object'
TypeName               = 'Builds1'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#'


http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId/oneOf[0]
=============================================================================================================
Pattern                = '^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$'
Type HAS NOT BEEN SET!!!
TypeName               = 'Var'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId/oneOf[0]'


http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId/oneOf[1]
=============================================================================================================
Pattern                = 'Unknown'
Type HAS NOT BEEN SET!!!
TypeName               = 'Var1'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/build-list.json#/properties/builds/items/properties/eventId/oneOf[1]'


http://schemas.taskcluster.net/github/v1/create-comment.json#
=============================================================
Additional Properties  = 'false'
Description            = 'Write a new comment on a GitHub Issue or Pull Request.
Full specification on [GitHub docs](https://developer.github.com/v3/issues/comments/#create-a-comment)
'
ID                     = 'http://schemas.taskcluster.net/github/v1/create-comment.json#'
Properties
  Property 'body' =
    Description            = 'The contents of the comment.'
    Type                   = 'string'
    TypeName               = 'Body'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-comment.json#/properties/body'
Required               = '[body]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Create comment'
Type                   = 'object'
TypeName               = 'CreateComment1'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-comment.json#'


http://schemas.taskcluster.net/github/v1/create-status.json#
============================================================
Additional Properties  = 'false'
Description            = 'Create a commit status on GitHub.
Full specification on [GitHub docs](https://developer.github.com/v3/repos/statuses/#create-a-status)
'
ID                     = 'http://schemas.taskcluster.net/github/v1/create-status.json#'
Properties
  Property 'context' =
    Description            = 'A string label to differentiate this status from the status of other systems.'
    Type                   = 'string'
    TypeName               = 'Context'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-status.json#/properties/context'
  Property 'description' =
    Description            = 'A short description of the status.'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-status.json#/properties/description'
  Property 'state' =
    Description            = 'The state of the status.'
    Enum                   = '[pending success error failure]'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-status.json#/properties/state'
  Property 'target_url' =
    Description            = 'The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the 'source' of the Status.'
    Type                   = 'string'
    TypeName               = 'Target_URL'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-status.json#/properties/target_url'
Required               = '[state]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Create status'
Type                   = 'object'
TypeName               = 'CreateStatus1'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/create-status.json#'


http://schemas.taskcluster.net/github/v1/repository.json#
=========================================================
Additional Properties  = 'false'
Description            = 'Any Taskcluster-specific Github repository information.
'
ID                     = 'http://schemas.taskcluster.net/github/v1/repository.json#'
Properties
  Property 'installed' =
    Description            = 'True if integration is installed, False otherwise.
    '
    Type                   = 'boolean'
    TypeName               = 'Installed'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/repository.json#/properties/installed'
Required               = '[installed]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'repository'
Type                   = 'object'
TypeName               = 'Repository1'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/repository.json#'


http://references.taskcluster.net/github/v1/exchanges.json
==========================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Taskcluster-Github Exchanges'
Description     = 'The github service, typically available at
`github.taskcluster.net`, is responsible for publishing a pulse
message for supported github events.

This document describes the exchange offered by the taskcluster
github service'
Exchange Prefix = 'exchange/taskcluster-github/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'pull-request'
    Entry Name        = 'pullRequest'
    Entry Title       = 'GitHub Pull Request Event'
    Entry Description = 'When a GitHub pull request event is posted it will be broadcast on this
exchange with the designated `organization` and `repository`
in the routing-key along with event specific metadata in the payload.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'organization'
        Element Summary   = 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'repository'
        Element Summary   = 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'action'
        Element Summary   = 'The GitHub `action` which triggered an event. See for possible values see the payload actions property.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'push'
    Entry Name        = 'push'
    Entry Title       = 'GitHub push Event'
    Entry Description = 'When a GitHub push event is posted it will be broadcast on this
exchange with the designated `organization` and `repository`
in the routing-key along with event specific metadata in the payload.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'organization'
        Element Summary   = 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'repository'
        Element Summary   = 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'release'
    Entry Name        = 'release'
    Entry Title       = 'GitHub release Event'
    Entry Description = 'When a GitHub release event is posted it will be broadcast on this
exchange with the designated `organization` and `repository`
in the routing-key along with event specific metadata in the payload.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `"primary"` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'organization'
        Element Summary   = 'The GitHub `organization` which had an event. All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'repository'
        Element Summary   = 'The GitHub `repository` which had an event.All periods have been replaced by % - such that foo.bar becomes foo%bar - and all other special characters aside from - and _ have been stripped.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#'


http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#
==========================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a GitHub pull request has occurred
'
ID                     = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'
Properties
  Property 'action' =
    Description            = 'The GitHub `action` which triggered an event.
    '
    Enum                   = '[assigned unassigned labeled unlabeled opened edited closed reopened synchronize review_requested review_request_removed]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Action'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/action'
  Property 'details' =
    Description            = 'Metadata describing the pull request.
    '
    Type                   = 'object'
    TypeName               = 'Details'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/details'
  Property 'eventId' =
    Description            = 'The GitHub webhook deliveryId. Extracted from the header 'X-GitHub-Delivery'
    '
    Pattern                = '^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$'
    Type                   = 'string'
    TypeName               = 'EventID'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/eventId'
  Property 'installationId' =
    Description            = 'The installation which had an event.
    '
    Maximum                = '10000000000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'InstallationID'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/installationId'
  Property 'organization' =
    Description            = 'The GitHub `organization` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Organization'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/organization'
  Property 'repository' =
    Description            = 'The GitHub `repository` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Repository'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/repository'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#/properties/version'
Required               = '[version organization repository action installationId eventId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'GitHub Pull Request Message'
Type                   = 'object'
TypeName               = 'GitHubPullRequestMessage'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-pull-request-message.json#'


http://schemas.taskcluster.net/github/v1/github-push-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a GitHub push has occurred
'
ID                     = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#'
Properties
  Property 'details' =
    Description            = 'Metadata describing the push.
    '
    Type                   = 'object'
    TypeName               = 'Details'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/details'
  Property 'eventId' =
    Description            = 'The GitHub webhook deliveryId. Extracted from the header 'X-GitHub-Delivery'
    '
    Pattern                = '^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$'
    Type                   = 'string'
    TypeName               = 'EventID'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/eventId'
  Property 'installationId' =
    Description            = 'The installation which had an event.
    '
    MaxLength              = '10000000000'
    MinLength              = '0'
    Type                   = 'integer'
    TypeName               = 'InstallationID'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/installationId'
  Property 'organization' =
    Description            = 'The GitHub `organization` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Organization'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/organization'
  Property 'repository' =
    Description            = 'The GitHub `repository` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Repository'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/repository'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#/properties/version'
Required               = '[version organization repository installationId eventId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'GitHub Push Message'
Type                   = 'object'
TypeName               = 'GitHubPushMessage'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-push-message.json#'


http://schemas.taskcluster.net/github/v1/github-release-message.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a GitHub release has occurred
'
ID                     = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#'
Properties
  Property 'details' =
    Description            = 'Metadata describing the release.
    '
    Type                   = 'object'
    TypeName               = 'Details'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#/properties/details'
  Property 'eventId' =
    Description            = 'The GitHub webhook deliveryId. Extracted from the header 'X-GitHub-Delivery'
    '
    Pattern                = '^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$'
    Type                   = 'string'
    TypeName               = 'EventID'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#/properties/eventId'
  Property 'installationId' =
    Description            = 'The installation which had an event.
    '
    Maximum                = '10000000000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'InstallationID'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#/properties/installationId'
  Property 'organization' =
    Description            = 'The GitHub `organization` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Organization'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#/properties/organization'
  Property 'repository' =
    Description            = 'The GitHub `repository` which had an event.
    '
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_%]*)$'
    Type                   = 'string'
    TypeName               = 'Repository'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#/properties/repository'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#/properties/version'
Required               = '[version organization repository installationId eventId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'GitHub Release Message'
Type                   = 'object'
TypeName               = 'GitHubReleaseMessage'
SourceURL              = 'http://schemas.taskcluster.net/github/v1/github-release-message.json#'


http://references.taskcluster.net/hooks/v1/api.json
===================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Hooks API Documentation'
Description = 'Hooks are a mechanism for creating tasks in response to events.

Hooks are identified with a `hookGroupId` and a `hookId`.

When an event occurs, the resulting task is automatically created.  The
task is created using the scope `assume:hook-id:<hookGroupId>/<hookId>`,
which must have scopes to make the createTask call, including satisfying all
scopes in `task.scopes`.  The new task has a `taskGroupId` equal to its
`taskId`, as is the convention for decision tasks.

Hooks can have a "schedule" indicating specific times that new tasks should
be created.  Each schedule is in a simple cron format, per 
https://www.npmjs.com/package/cron-parser.  For example:
 * `['0 0 1 * * *']` -- daily at 1:00 UTC
 * `['0 0 9,21 * * 1-5', '0 0 12 * * 0,6']` -- weekdays at 9:00 and 21:00 UTC, weekends at noon

The task definition is used as a JSON-e template, with a context depending on how it is fired.  See
https://docs.taskcluster.net/reference/core/taskcluster-hooks/docs/firing-hooks
for more information.'
Base URL    = 'https://hooks.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listHookGroups'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json'
    Entry Title       = 'List hook groups'
    Entry Description = 'This endpoint will return a list of all hook groups with at least one hook.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>'
    Entry Args        = '[hookGroupId]'
    Entry Query        = '[]'
    Entry Name        = 'listHooks'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json'
    Entry Title       = 'List hooks in a given group'
    Entry Description = 'This endpoint will return a list of all the hook definitions within a
given hook group.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'hook'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
    Entry Title       = 'Get hook definition'
    Entry Description = 'This endpoint will return the hook definition for the given `hookGroupId`
and hookId.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/status'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'getHookStatus'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json'
    Entry Title       = 'Get hook status'
    Entry Description = 'This endpoint will return the current status of the hook.  This represents a
snapshot in time and may vary from one call to the next.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/schedule'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'getHookSchedule'
    Entry Stability   = 'deprecated'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json'
    Entry Title       = 'Get hook schedule'
    Entry Description = 'This endpoint will return the schedule and next scheduled creation time
for the given hook.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'createHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'All of:
* hooks:modify-hook:<hookGroupId>/<hookId>
* assume:hook-id:<hookGroupId>/<hookId>'
    Entry Input       = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json'
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
    Entry Title       = 'Create a hook'
    Entry Description = 'This endpoint will create a new hook.

The caller's credentials must include the role that will be used to
create the task.  That role must satisfy task.scopes as well as the
necessary scopes to add the task to the queue.
'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'updateHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'All of:
* hooks:modify-hook:<hookGroupId>/<hookId>
* assume:hook-id:<hookGroupId>/<hookId>'
    Entry Input       = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json'
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
    Entry Title       = 'Update a hook'
    Entry Description = 'This endpoint will update an existing hook.  All fields except
`hookGroupId` and `hookId` can be modified.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'removeHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'hooks:modify-hook:<hookGroupId>/<hookId>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete a hook'
    Entry Description = 'This endpoint will remove a hook definition.'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/trigger'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'triggerHook'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'hooks:trigger-hook:<hookGroupId>/<hookId>'
    Entry Input       = 'http://schemas.taskcluster.net/hooks/v1/trigger-context.json'
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/task-status.json'
    Entry Title       = 'Trigger a hook'
    Entry Description = 'This endpoint will trigger the creation of a task from a hook definition.

The HTTP payload must match the hooks `triggerSchema`.  If it does, it is
provided as the `payload` property of the JSON-e context used to render the
task template.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/token'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'getTriggerToken'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'hooks:get-trigger-token:<hookGroupId>/<hookId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/trigger-token-response.json'
    Entry Title       = 'Get a trigger token'
    Entry Description = 'Retrieve a unique secret token for triggering the specified hook. This
token can be deactivated with `resetTriggerToken`.'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/token'
    Entry Args        = '[hookGroupId hookId]'
    Entry Query        = '[]'
    Entry Name        = 'resetTriggerToken'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'hooks:reset-trigger-token:<hookGroupId>/<hookId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/trigger-token-response.json'
    Entry Title       = 'Reset a trigger token'
    Entry Description = 'Reset the token for triggering a given hook. This invalidates token that
may have been issued via getTriggerToken with a new token.'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/hooks/<hookGroupId>/<hookId>/trigger/<token>'
    Entry Args        = '[hookGroupId hookId token]'
    Entry Query        = '[]'
    Entry Name        = 'triggerHookWithToken'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/hooks/v1/trigger-context.json'
    Entry Output      = 'http://schemas.taskcluster.net/hooks/v1/task-status.json'
    Entry Title       = 'Trigger a hook with a token'
    Entry Description = 'This endpoint triggers a defined hook with a valid token.

The HTTP payload must match the hooks `triggerSchema`.  If it does, it is
provided as the `payload` property of the JSON-e context used to render the
task template.'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Definition of a hook that can create tasks at defined times.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#'
Properties
  Property 'deadline' =
    Default                = '1 day'
    Description            = 'Use of this field is deprecated; use `deadline: {$fromNow: ..}` in the task template instead.
    '
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/deadline'
  Property 'expires' =
    Default                = '3 months'
    Description            = 'Use of this field is deprecated; use `expires: {$fromNow: ..}` in the task template instead.
    '
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/expires'
  Property 'hookGroupId' =
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'HookGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/hookGroupId'
  Property 'hookId' =
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'HookID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/hookId'
  Property 'metadata' =
    Additional Properties  = 'false'
    Properties
      Property 'description' =
        Description            = 'Long-form of the hook's purpose and behavior'
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/description'
      Property 'emailOnError' =
        Default                = 'true'
        Description            = 'Whether to email the owner on an error creating the task.'
        Title                  = 'Email on error'
        Type                   = 'boolean'
        TypeName               = 'EmailOnError'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/emailOnError'
      Property 'name' =
        Description            = 'Human readable name of the hook'
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'Email of the person or group responsible for this hook.'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata/properties/owner'
    Required               = '[name description owner]'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/metadata'
  Property 'schedule' =
    Default                = '[]'
    Description            = 'Definition of the times at which a hook will result in creation of a task.
    If several patterns are specified, tasks will be created at any time
    specified by one or more patterns.
    '
    Items
      Description            = 'Cron-like specification for when tasks should be created.  The pattern is
      parsed in a UTC context.
      See [cron-parser on npm](https://www.npmjs.com/package/cron-parser).
      Note that tasks may not be created at exactly the time specified.
      '
      Title                  = 'Cron Pattern'
      Type                   = 'string'
      TypeName               = 'CronPattern'
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/schedule/items'
    Type                   = 'array'
    TypeName               = 'Schedule'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/schedule'
  Property 'task' =
    Description            = 'Template for the task definition.  This is rendered using [JSON-e](https://taskcluster.github.io/json-e/)
    as described in https://docs.taskcluster.net/reference/core/taskcluster-hooks/docs/firing-hooks to produce
    a task definition that is submitted to the Queue service.
    '
    Title                  = 'Task Template'
    Type                   = 'object'
    TypeName               = 'TaskTemplate'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/task'
  Property 'triggerSchema' =
    Default                = 'map[additionalProperties:false type:object]'
    Type                   = 'object'
    TypeName               = 'TriggerSchema'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#/properties/triggerSchema'
Required               = '[metadata task]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hook creation request'
Type                   = 'object'
TypeName               = 'HookCreationRequest'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/create-hook-request.json#'


http://schemas.taskcluster.net/hooks/v1/hook-definition.json#
=============================================================
Additional Properties  = 'false'
Description            = 'Definition of a hook that will create tasks when defined events occur.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#'
Properties
  Property 'deadline' =
    Default                = '1 day'
    Description            = 'Use of this field is deprecated; use `deadline: {$fromNow: ..}` in the task template instead.
    '
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/deadline'
  Property 'expires' =
    Default                = '3 months'
    Description            = 'Use of this field is deprecated; use `expires: {$fromNow: ..}` in the task template instead.
    '
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/expires'
  Property 'hookGroupId' =
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'HookGroupID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/hookGroupId'
  Property 'hookId' =
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'HookID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/hookId'
  Property 'metadata' =
    Additional Properties  = 'false'
    Properties
      Property 'description' =
        Description            = 'Long-form of the hook's purpose and behavior'
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/description'
      Property 'emailOnError' =
        Default                = 'true'
        Description            = 'Whether to email the owner on an error creating the task.'
        Title                  = 'Email on error'
        Type                   = 'boolean'
        TypeName               = 'EmailOnError'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/emailOnError'
      Property 'name' =
        Description            = 'Human readable name of the hook'
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'Email of the person or group responsible for this hook.'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata/properties/owner'
    Required               = '[name description owner]'
    Type                   = 'object'
    TypeName               = 'Metadata'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/metadata'
  Property 'schedule' =
    Description            = 'Definition of the times at which a hook will result in creation of a task.
    If several patterns are specified, tasks will be created at any time
    specified by one or more patterns.  Note that tasks may not be created
    at exactly the time specified.
                        {$ref: "http://schemas.taskcluster.net/hooks/v1/schedule.json"}
    '
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Schedule'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/schedule'
  Property 'task' =
    Description            = 'Template for the task definition.  This is rendered using [JSON-e](https://taskcluster.github.io/json-e/)
    as described in https://docs.taskcluster.net/reference/core/taskcluster-hooks/docs/firing-hooks to produce
    a task definition that is submitted to the Queue service.
    '
    Title                  = 'Task Template'
    Type                   = 'object'
    TypeName               = 'TaskTemplate'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/task'
  Property 'triggerSchema' =
    Type                   = 'object'
    TypeName               = 'TriggerSchema'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#/properties/triggerSchema'
Required               = '[hookGroupId hookId metadata task schedule expires deadline triggerSchema]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hook definition'
Type                   = 'object'
TypeName               = 'HookDefinition'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json#'


http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#
===========================================================
Additional Properties  = 'false'
Description            = 'A description of when a hook's task will be created, and the next scheduled time
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#'
Properties
  Property 'nextScheduledDate' =
    Description            = 'The next time this hook's task is scheduled to be created. This property
    is only present if there is a scheduled next time. Some hooks don't have
    any schedules.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'NextScheduledDate'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#/properties/nextScheduledDate'
  Property 'schedule' =
    Ref                    = 'http://schemas.taskcluster.net/hooks/v1/schedule.json'
    TypeName               = 'Schedule'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#/properties/schedule'
Required               = '[schedule]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hook schedule response'
Type                   = 'object'
TypeName               = 'HookScheduleResponse'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-schedule.json#'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A snapshot of the current status of a hook.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#'
Properties
  Property 'lastFire' =
    Description            = 'Information about the last time this hook fired.  This property is only present
    if the hook has fired at least once.
    '
    OneOf
      Item '0' =
        Additional Properties  = 'false'
        Description            = 'Information about a successful firing of the hook'
        Properties
          Property 'result' =
            Enum                   = '[success]'
            Type                   = 'string'
            TypeName               = 'Result'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/result'
          Property 'taskId' =
            Description            = 'The task created'
            Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
            Type                   = 'string'
            TypeName               = 'TaskID'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/taskId'
          Property 'time' =
            Description            = 'The time the task was created.  This will not necessarily match `task.created`.
            '
            Format                 = 'date-time'
            Type                   = 'string'
            TypeName               = 'Time'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/time'
        Required               = '[result taskId time]'
        Title                  = 'Successful Fire'
        Type                   = 'object'
        TypeName               = 'SuccessfulFire'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]'
      Item '1' =
        Additional Properties  = 'false'
        Description            = 'Information about an unsuccessful firing of the hook'
        Properties
          Property 'error' =
            Description            = 'The error that occurred when firing the task.  This is typically,
            but not always, an API error message.
            '
            Type                   = 'object'
            TypeName               = 'Error'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/error'
          Property 'result' =
            Enum                   = '[error]'
            Type                   = 'string'
            TypeName               = 'Result'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/result'
          Property 'time' =
            Description            = 'The time the task was created.  This will not necessarily match `task.created`.
            '
            Format                 = 'date-time'
            Type                   = 'string'
            TypeName               = 'Time'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/time'
        Required               = '[result error time]'
        Title                  = 'Failed Fire'
        Type                   = 'object'
        TypeName               = 'FailedFire'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]'
      Item '2' =
        Additional Properties  = 'false'
        Description            = 'Information about no firing of the hook (e.g., a new hook)'
        Properties
          Property 'result' =
            Enum                   = '[no-fire]'
            Type                   = 'string'
            TypeName               = 'Result'
            SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]/properties/result'
        Required               = '[result]'
        Title                  = 'No Fire'
        Type                   = 'object'
        TypeName               = 'NoFire'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'LastFire'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire'
  Property 'nextScheduledDate' =
    Description            = 'The next time this hook's task is scheduled to be created. This property
    is only present if there is a scheduled next time. Some hooks don't have
    any schedules.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'NextScheduledDate'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/nextScheduledDate'
Required               = '[lastFire]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hook status response'
Type                   = 'object'
TypeName               = 'HookStatusResponse'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]
======================================================================================
Additional Properties  = 'false'
Description            = 'Information about a successful firing of the hook'
Properties
  Property 'result' =
    Enum                   = '[success]'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/result'
  Property 'taskId' =
    Description            = 'The task created'
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/taskId'
  Property 'time' =
    Description            = 'The time the task was created.  This will not necessarily match `task.created`.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Time'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]/properties/time'
Required               = '[result taskId time]'
Title                  = 'Successful Fire'
Type                   = 'object'
TypeName               = 'SuccessfulFire'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[0]'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]
======================================================================================
Additional Properties  = 'false'
Description            = 'Information about an unsuccessful firing of the hook'
Properties
  Property 'error' =
    Description            = 'The error that occurred when firing the task.  This is typically,
    but not always, an API error message.
    '
    Type                   = 'object'
    TypeName               = 'Error'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/error'
  Property 'result' =
    Enum                   = '[error]'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/result'
  Property 'time' =
    Description            = 'The time the task was created.  This will not necessarily match `task.created`.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Time'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]/properties/time'
Required               = '[result error time]'
Title                  = 'Failed Fire'
Type                   = 'object'
TypeName               = 'FailedFire'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[1]'


http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]
======================================================================================
Additional Properties  = 'false'
Description            = 'Information about no firing of the hook (e.g., a new hook)'
Properties
  Property 'result' =
    Enum                   = '[no-fire]'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]/properties/result'
Required               = '[result]'
Title                  = 'No Fire'
Type                   = 'object'
TypeName               = 'NoFire'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/hook-status.json#/properties/lastFire/oneOf[2]'


http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'List of `hookGroupIds`.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#'
Properties
  Property 'groups' =
    Items
      Type                   = 'string'
      TypeName               = 'GroupsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#/properties/groups/items'
    Title                  = 'Groups'
    Type                   = 'array'
    TypeName               = 'Groups'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#/properties/groups'
Required               = '[groups]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hook groups'
Type                   = 'object'
TypeName               = 'HookGroups'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hook-groups-response.json#'


http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'List of hooks
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#'
Properties
  Property 'hooks' =
    Items
      Ref                    = 'http://schemas.taskcluster.net/hooks/v1/hook-definition.json'
      TypeName               = 'HooksEntry'
      SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#/properties/hooks/items'
    Title                  = 'Hooks'
    Type                   = 'array'
    TypeName               = 'Hooks'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#/properties/hooks'
Required               = '[hooks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Hook list'
Type                   = 'object'
TypeName               = 'HookList'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/list-hooks-response.json#'


http://schemas.taskcluster.net/hooks/v1/schedule.json#
======================================================
Default                = '[]'
Description            = 'A list of cron-style definitions to represent a set of moments in (UTC) time.
If several patterns are specified, a given moment in time represented by
more than one pattern is considered only to be counted once, in other words
it is allowed for the cron patterns to overlap; duplicates are redundant.
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/schedule.json#'
Items
  Description            = 'Cron-like specification for when tasks should be created.  The pattern is
  parsed in a UTC context.
  See [cron-parser on npm](https://www.npmjs.com/package/cron-parser).
  '
  Title                  = 'Cron Pattern'
  Type                   = 'string'
  TypeName               = 'CronPattern'
  SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/schedule.json#/items'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Schedule'
Type                   = 'array'
TypeName               = 'Schedule'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/schedule.json#'


http://schemas.taskcluster.net/hooks/v1/task-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A representation of **task status** as known by the queue
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#'
Properties
  Property 'status' =
    Additional Properties  = 'false'
    Properties
      Property 'deadline' =
        Default                = '1 day'
        Description            = 'Use of this field is deprecated; use `deadline: {$fromNow: ..}` in the task template instead.
        '
        Title                  = 'Deadline'
        Type                   = 'string'
        TypeName               = 'Deadline'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/deadline'
      Property 'expires' =
        Default                = '3 months'
        Description            = 'Use of this field is deprecated; use `expires: {$fromNow: ..}` in the task template instead.
        '
        Title                  = 'Expiration'
        Type                   = 'string'
        TypeName               = 'Expiration'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/expires'
      Property 'provisionerId' =
        Description            = 'Unique identifier for the provisioner that this task must be scheduled on
        '
        MaxLength              = '22'
        MinLength              = '1'
        Pattern                = '^([a-zA-Z0-9-_]*)$'
        Title                  = 'Provisioner Id'
        Type                   = 'string'
        TypeName               = 'ProvisionerID'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/provisionerId'
      Property 'retriesLeft' =
        Description            = 'Number of retries left for the task in case of infrastructure issues
        '
        Maximum                = '999'
        Minimum                = '0'
        Title                  = 'Retries Left'
        Type                   = 'integer'
        TypeName               = 'RetriesLeft'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/retriesLeft'
      Property 'runs' =
        Description            = 'List of runs, ordered so that index `i` has `runId == i`
        '
        Items
          Additional Properties  = 'false'
          Description            = 'JSON object with information about a run
          '
          Properties
            Property 'reasonCreated' =
              Description            = 'Reason for the creation of this run,
              **more reasons may be added in the future**.
              '
              Enum                   = '[scheduled retry task-retry rerun exception]'
              Title                  = 'Reason Created'
              Type                   = 'string'
              TypeName               = 'ReasonCreated'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/reasonCreated'
            Property 'reasonResolved' =
              Description            = 'Reason that run was resolved, this is mainly
              useful for runs resolved as `exception`.
              Note, **more reasons may be added in the future**, also this
              property is only available after the run is resolved.
              '
              Enum                   = '[completed failed deadline-exceeded canceled superseded claim-expired worker-shutdown malformed-payload resource-unavailable internal-error intermittent-task]'
              Title                  = 'Reason Resolved'
              Type                   = 'string'
              TypeName               = 'ReasonResolved'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/reasonResolved'
            Property 'resolved' =
              Description            = 'Date-time at which this run was resolved, ie. when the run changed
              state from `running` to either `completed`, `failed` or `exception`.
              This property is only present after the run as been resolved.
              '
              Format                 = 'date-time'
              Title                  = 'Resolved'
              Type                   = 'string'
              TypeName               = 'Resolved'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/resolved'
            Property 'runId' =
              Description            = 'Id of this task run, `run-id`s always starts from `0`
              '
              Maximum                = '1000'
              Minimum                = '0'
              Title                  = 'Run Identifier'
              Type                   = 'integer'
              TypeName               = 'RunIdentifier'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/runId'
            Property 'scheduled' =
              Description            = 'Date-time at which this run was scheduled, ie. when the run was
              created in state `pending`.
              '
              Format                 = 'date-time'
              Title                  = 'Scheduled'
              Type                   = 'string'
              TypeName               = 'Scheduled'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/scheduled'
            Property 'started' =
              Description            = 'Date-time at which this run was claimed, ie. when the run changed
              state from `pending` to `running`. This property is only present
              after the run has been claimed.
              '
              Format                 = 'date-time'
              Title                  = 'Started'
              Type                   = 'string'
              TypeName               = 'Started'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/started'
            Property 'state' =
              Description            = 'State of this run
              '
              Enum                   = '[pending running completed failed exception]'
              Title                  = 'Run State'
              Type                   = 'string'
              TypeName               = 'RunState'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/state'
            Property 'takenUntil' =
              Description            = 'Time at which the run expires and is resolved as `failed`, if the
              run isn't reclaimed. Note, only present after the run has been
              claimed.
              '
              Format                 = 'date-time'
              Title                  = 'Taken Until'
              Type                   = 'string'
              TypeName               = 'TakenUntil'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/takenUntil'
            Property 'workerGroup' =
              Description            = 'Identifier for group that worker who executes this run is a part of,
              this identifier is mainly used for efficient routing.
              Note, this property is only present after the run is claimed.
              '
              MaxLength              = '22'
              MinLength              = '1'
              Pattern                = '^([a-zA-Z0-9-_]*)$'
              Title                  = 'Worker Group'
              Type                   = 'string'
              TypeName               = 'WorkerGroup'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/workerGroup'
            Property 'workerId' =
              Description            = 'Identifier for worker evaluating this run within given
              `workerGroup`. Note, this property is only available after the run
              has been claimed.
              '
              MaxLength              = '22'
              MinLength              = '1'
              Pattern                = '^([a-zA-Z0-9-_]*)$'
              Title                  = 'Worker Identifier'
              Type                   = 'string'
              TypeName               = 'WorkerIdentifier'
              SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items/properties/workerId'
          Required               = '[runId state reasonCreated scheduled]'
          Title                  = 'Run Information'
          Type                   = 'object'
          TypeName               = 'RunInformation'
          SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs/items'
        Title                  = 'List of Runs'
        Type                   = 'array'
        TypeName               = 'ListOfRuns'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/runs'
      Property 'schedulerId' =
        Description            = 'Identifier for the scheduler that _defined_ this task.
        '
        MaxLength              = '22'
        MinLength              = '1'
        Pattern                = '^([a-zA-Z0-9-_]*)$'
        Title                  = 'Scheduler Identifier'
        Type                   = 'string'
        TypeName               = 'SchedulerIdentifier'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/schedulerId'
      Property 'state' =
        Description            = 'State of this task. This is just an auxiliary property derived from state
        of latests run, or `unscheduled` if none.
        '
        Enum                   = '[unscheduled pending running completed failed exception]'
        Title                  = 'State'
        Type                   = 'string'
        TypeName               = 'State'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/state'
      Property 'taskGroupId' =
        Description            = 'Identifier for a group of tasks scheduled together with this task, by
        scheduler identified by `schedulerId`. For tasks scheduled by the
        task-graph scheduler, this is the `taskGraphId`.
        '
        Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
        Title                  = 'Task-Group Identifier'
        Type                   = 'string'
        TypeName               = 'TaskGroupIdentifier'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/taskGroupId'
      Property 'taskId' =
        Description            = 'Unique task identifier, this is UUID encoded as
        [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
        stripped of `=` padding.
        '
        Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
        Title                  = 'Task Identifier'
        Type                   = 'string'
        TypeName               = 'TaskIdentifier'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/taskId'
      Property 'workerType' =
        Description            = 'Identifier for worker type within the specified provisioner
        '
        MaxLength              = '22'
        MinLength              = '1'
        Pattern                = '^([a-zA-Z0-9-_]*)$'
        Title                  = 'Worker Type'
        Type                   = 'string'
        TypeName               = 'WorkerType'
        SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status/properties/workerType'
    Required               = '[taskId provisionerId workerType schedulerId taskGroupId deadline expires retriesLeft state runs]'
    Type                   = 'object'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#/properties/status'
Required               = '[status]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Status Structure'
Type                   = 'object'
TypeName               = 'TaskStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/task-status.json#'


http://schemas.taskcluster.net/hooks/v1/trigger-context.json#
=============================================================
Description            = 'Trigger context
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/trigger-context.json#'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'trigger context'
Type                   = 'object'
TypeName               = 'TriggerContext'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/trigger-context.json#'


http://schemas.taskcluster.net/hooks/v1/trigger-token-response.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Secret token for a trigger
'
ID                     = 'http://schemas.taskcluster.net/hooks/v1/trigger-token-response.json#'
Properties
  Property 'token' =
    Title                  = 'Token'
    Type                   = 'string'
    TypeName               = 'Token'
    SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/trigger-token-response.json#/properties/token'
Required               = '[token]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'trigger token response'
Type                   = 'object'
TypeName               = 'TriggerTokenResponse'
SourceURL              = 'http://schemas.taskcluster.net/hooks/v1/trigger-token-response.json#'


http://references.taskcluster.net/index/v1/api.json
===================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Task Index API Documentation'
Description = 'The task index, typically available at `index.taskcluster.net`, is
responsible for indexing tasks. The service ensures that tasks can be
located by recency and/or arbitrary strings. Common use-cases include:

 * Locate tasks by git or mercurial `<revision>`, or
 * Locate latest task from given `<branch>`, such as a release.

**Index hierarchy**, tasks are indexed in a dot (`.`) separated hierarchy
called a namespace. For example a task could be indexed with the index path
`some-app.<revision>.linux-64.release-build`. In this case the following
namespaces is created.

 1. `some-app`,
 1. `some-app.<revision>`, and,
 2. `some-app.<revision>.linux-64`

Inside the namespace `some-app.<revision>` you can find the namespace
`some-app.<revision>.linux-64` inside which you can find the indexed task
`some-app.<revision>.linux-64.release-build`. This is an example of indexing
builds for a given platform and revision.

**Task Rank**, when a task is indexed, it is assigned a `rank` (defaults
to `0`). If another task is already indexed in the same namespace with
lower or equal `rank`, the index for that task will be overwritten. For example
consider index path `mozilla-central.linux-64.release-build`. In
this case one might choose to use a UNIX timestamp or mercurial revision
number as `rank`. This way the latest completed linux 64 bit release
build is always available at `mozilla-central.linux-64.release-build`.

Note that this does mean index paths are not immutable: the same path may
point to a different task now than it did a moment ago.

**Indexed Data**, when a task is retrieved from the index the result includes
a `taskId` and an additional user-defined JSON blob that was indexed with
the task.

**Entry Expiration**, all indexed entries must have an expiration date.
Typically this defaults to one year, if not specified. If you are
indexing tasks to make it easy to find artifacts, consider using the
artifact's expiration date.

**Valid Characters**, all keys in a namespace `<key1>.<key2>` must be
in the form `/[a-zA-Z0-9_!~*'()%-]+/`. Observe that this is URL-safe and
that if you strictly want to put another character you can URL encode it.

**Indexing Routes**, tasks can be indexed using the API below, but the
most common way to index tasks is adding a custom route to `task.routes` of the
form `index.<namespace>`. In order to add this route to a task you'll
need the scope `queue:route:index.<namespace>`. When a task has
this route, it will be indexed when the task is **completed successfully**.
The task will be indexed with `rank`, `data` and `expires` as specified
in `task.extra.index`. See the example below:

```js
{
  payload:  { /* ... */ },
  routes: [
    // index.<namespace> prefixed routes, tasks CC'ed such a route will
    // be indexed under the given <namespace>
    "index.mozilla-central.linux-64.release-build",
    "index.<revision>.linux-64.release-build"
  ],
  extra: {
    // Optional details for indexing service
    index: {
      // Ordering, this taskId will overwrite any thing that has
      // rank <= 4000 (defaults to zero)
      rank:       4000,

      // Specify when the entries expire (Defaults to 1 year)
      expires:          new Date().toJSON(),

      // A little informal data to store along with taskId
      // (less 16 kb when encoded as JSON)
      data: {
        hgRevision:   "...",
        commitMessae: "...",
        whatever...
      }
    },
    // Extra properties for other services...
  }
  // Other task properties...
}
```

**Remark**, when indexing tasks using custom routes, it's also possible
to listen for messages about these tasks. For
example one could bind to `route.index.some-app.*.release-build`,
and pick up all messages about release builds. Hence, it is a
good idea to document task index hierarchies, as these make up extension
points in their own.'
Base URL    = 'https://index.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<indexPath>'
    Entry Args        = '[indexPath]'
    Entry Query        = '[]'
    Entry Name        = 'findTask'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'
    Entry Title       = 'Find Indexed Task'
    Entry Description = 'Find a task by index path, returning the highest-rank task with that path. If no
task exists for the given path, this API end-point will respond with a 404 status.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/namespaces/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listNamespaces'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'
    Entry Title       = 'List Namespaces'
    Entry Description = 'List the namespaces immediately under a given namespace.

This endpoint
lists up to 1000 namespaces. If more namespaces are present, a
`continuationToken` will be returned, which can be given in the next
request. For the initial request, the payload should be an empty JSON
object.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/namespaces/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'listNamespacesPost'
    Entry Stability   = 'deprecated'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'
    Entry Title       = 'List Namespaces'
    Entry Description = 'List the namespaces immediately under a given namespace.

This endpoint
lists up to 1000 namespaces. If more namespaces are present, a
`continuationToken` will be returned, which can be given in the next
request. For the initial request, the payload should be an empty JSON
object.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/tasks/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listTasks'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'
    Entry Title       = 'List Tasks'
    Entry Description = 'List the tasks immediately under a given namespace.

This endpoint
lists up to 1000 tasks. If more tasks are present, a
`continuationToken` will be returned, which can be given in the next
request. For the initial request, the payload should be an empty JSON
object.

**Remark**, this end-point is designed for humans browsing for tasks, not
services, as that makes little sense.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/tasks/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'listTasksPost'
    Entry Stability   = 'deprecated'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'
    Entry Title       = 'List Tasks'
    Entry Description = 'List the tasks immediately under a given namespace.

This endpoint
lists up to 1000 tasks. If more tasks are present, a
`continuationToken` will be returned, which can be given in the next
request. For the initial request, the payload should be an empty JSON
object.

**Remark**, this end-point is designed for humans browsing for tasks, not
services, as that makes little sense.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/task/<namespace>'
    Entry Args        = '[namespace]'
    Entry Query        = '[]'
    Entry Name        = 'insertTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'index:insert-task:<namespace>'
    Entry Input       = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'
    Entry Title       = 'Insert Task into Index'
    Entry Description = 'Insert a task into the index.  If the new rank is less than the existing rank
at the given index path, the task is not indexed but the response is still 200 OK.

Please see the introduction above for information
about indexing successfully completed tasks automatically using custom routes.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<indexPath>/artifacts/<name>'
    Entry Args        = '[indexPath name]'
    Entry Query        = '[]'
    Entry Name        = 'findArtifactFromTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'If private:
  queue:get-artifact:<name>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get Artifact From Indexed Task'
    Entry Description = 'Find a task by index path and redirect to the artifact on the most recent
run with the given `name`.

Note that multiple calls to this endpoint may return artifacts from differen tasks
if a new task is inserted into the index between calls. Avoid using this method as
a stable link to multiple, connected files if the index path does not contain a
unique identifier.  For example, the following two links may return unrelated files:
* https://index.taskcluster.net/task/some-app.win64.latest.installer/artifacts/public/installer.exe`
* https://index.taskcluster.net/task/some-app.win64.latest.installer/artifacts/public/debug-symbols.zip`

This problem be remedied by including the revision in the index path or by bundling both
installer and debug symbols into a single artifact.

If no task exists for the given index path, this API end-point responds with 404.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/index/v1/indexed-task-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Representation of an indexed task.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'
Properties
  Property 'data' =
    Description            = 'Data that was reported with the task. This is an arbitrary JSON object.
    '
    Title                  = 'Task Specific Data'
    Type                   = 'object'
    TypeName               = 'TaskSpecificData'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/data'
  Property 'expires' =
    Description            = 'Date at which this entry expires from the task index.
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/expires'
  Property 'namespace' =
    Description            = 'Namespace of the indexed task, used to find the indexed task in the index.
    '
    MaxLength              = '255'
    Title                  = 'Namespace'
    Type                   = 'string'
    TypeName               = 'Namespace'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/namespace'
  Property 'rank' =
    Description            = 'If multiple tasks are indexed with the same `namespace` the task with the
    highest `rank` will be stored and returned in later requests. If two tasks
    has the same `rank` the latest task will be stored.
    '
    Title                  = 'Rank'
    Type                   = 'number'
    TypeName               = 'Rank'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/rank'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#/properties/taskId'
Required               = '[namespace taskId rank data expires]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Indexed Task Response'
Type                   = 'object'
TypeName               = 'IndexedTaskResponse'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/indexed-task-response.json#'


http://schemas.taskcluster.net/index/v1/insert-task-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Representation of the index entry to insert.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#'
Properties
  Property 'data' =
    Description            = 'This is an arbitrary JSON object. Feel free to put whatever data you want
    here, but do limit it, you'll get errors if you store more than 32KB.
    So stay well, below that limit.
    '
    Title                  = 'Task Specific Data'
    Type                   = 'object'
    TypeName               = 'TaskSpecificData'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/data'
  Property 'expires' =
    Description            = 'Date at which this entry expires from the task index.
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/expires'
  Property 'rank' =
    Description            = 'If multiple tasks are indexed with the same `namespace` the task with the
    highest `rank` will be stored and returned in later requests. If two tasks
    has the same `rank` the latest task will be stored.
    '
    Title                  = 'Rank'
    Type                   = 'number'
    TypeName               = 'Rank'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/rank'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#/properties/taskId'
Required               = '[taskId rank data expires]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Insert Task Request'
Type                   = 'object'
TypeName               = 'InsertTaskRequest'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/insert-task-request.json#'


http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'Request to list namespaces within a given namespace.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token previously returned in a response to this list
    request. This property is optional and should not be provided for first
    requests.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#/properties/continuationToken'
  Property 'limit' =
    Default                = '1000'
    Description            = 'Maximum number of results per page. If there are more results than this
    a continuation token will be return.
    '
    Maximum                = '1000'
    Minimum                = '1'
    Title                  = 'Result limit'
    Type                   = 'integer'
    TypeName               = 'ResultLimit'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#/properties/limit'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Namespaces Request'
Type                   = 'object'
TypeName               = 'ListNamespacesRequest'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-request.json#'


http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Response from a request to list namespaces within a given namespace.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token is returned if there are more results than listed
    here. You can optionally provide the token in the request payload to
    load the additional results.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/continuationToken'
  Property 'namespaces' =
    Description            = 'List of namespaces.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Representation of a namespace that contains indexed tasks.
      '
      Properties
        Property 'expires' =
          Description            = 'Date at which this entry, and by implication all entries below it,
          expires from the task index.
          '
          Format                 = 'date-time'
          Title                  = 'Expiration'
          Type                   = 'string'
          TypeName               = 'Expiration'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items/properties/expires'
        Property 'name' =
          Description            = 'Name of namespace within it's parent namespace.
          '
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items/properties/name'
        Property 'namespace' =
          Description            = 'Fully qualified name of the namespace, you can use this to list
          namespaces or tasks under this namespace.
          '
          MaxLength              = '255'
          Title                  = 'Namespace'
          Type                   = 'string'
          TypeName               = 'Namespace'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items/properties/namespace'
      Required               = '[namespace name expires]'
      Title                  = 'Namespace'
      Type                   = 'object'
      TypeName               = 'Namespace'
      SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces/items'
    Title                  = 'Namespaces'
    Type                   = 'array'
    TypeName               = 'Namespaces'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#/properties/namespaces'
Required               = '[namespaces]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Namespaces Response'
Type                   = 'object'
TypeName               = 'ListNamespacesResponse'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-namespaces-response.json#'


http://schemas.taskcluster.net/index/v1/list-tasks-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Request to list tasks within a given namespace.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token previously returned in a response to this list
    request. This property is optional and should not be provided for first
    requests.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#/properties/continuationToken'
  Property 'limit' =
    Default                = '1000'
    Description            = 'Maximum number of results per page. If there are more results than this
    a continuation token will be return.
    '
    Maximum                = '1000'
    Minimum                = '1'
    Title                  = 'Result limit'
    Type                   = 'integer'
    TypeName               = 'ResultLimit'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#/properties/limit'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Tasks Request'
Type                   = 'object'
TypeName               = 'ListTasksRequest'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-request.json#'


http://schemas.taskcluster.net/index/v1/list-tasks-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Representation of an indexed task.
'
ID                     = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'A continuation token is returned if there are more results than listed
    here. You can optionally provide the token in the request payload to
    load the additional results.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/continuationToken'
  Property 'tasks' =
    Description            = 'List of tasks.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Representation of a task.
      '
      Properties
        Property 'data' =
          Description            = 'Data that was reported with the task. This is an arbitrary JSON
          object.
          '
          Title                  = 'Task Specific Data'
          Type                   = 'object'
          TypeName               = 'TaskSpecificData'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/data'
        Property 'expires' =
          Description            = 'Date at which this entry expires from the task index.
          '
          Format                 = 'date-time'
          Title                  = 'Expiration'
          Type                   = 'string'
          TypeName               = 'Expiration'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/expires'
        Property 'namespace' =
          Description            = 'Index path of the task.
          '
          MaxLength              = '255'
          Title                  = 'Namespace'
          Type                   = 'string'
          TypeName               = 'Namespace'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/namespace'
        Property 'rank' =
          Description            = 'If multiple tasks are indexed with the same `namespace` the task
          with the highest `rank` will be stored and returned in later
          requests. If two tasks has the same `rank` the latest task will be
          stored.
          '
          Title                  = 'Rank'
          Type                   = 'number'
          TypeName               = 'Rank'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/rank'
        Property 'taskId' =
          Description            = 'Unique task identifier for the task currently indexed at `namespace`.
          '
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Title                  = 'Task Identifier'
          Type                   = 'string'
          TypeName               = 'TaskIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items/properties/taskId'
      Required               = '[namespace taskId rank data expires]'
      Title                  = 'Task'
      Type                   = 'object'
      TypeName               = 'Task'
      SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks/items'
    Title                  = 'Tasks'
    Type                   = 'array'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#/properties/tasks'
Required               = '[tasks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Tasks Response'
Type                   = 'object'
TypeName               = 'ListTasksResponse'
SourceURL              = 'http://schemas.taskcluster.net/index/v1/list-tasks-response.json#'


http://references.taskcluster.net/login/v1/api.json
===================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Login API'
Description = 'The Login service serves as the interface between external authentication
systems and Taskcluster credentials.'
Base URL    = 'https://login.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/oidc-credentials/<provider>'
    Entry Args        = '[provider]'
    Entry Query        = '[]'
    Entry Name        = 'oidcCredentials'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json'
    Entry Title       = 'Get Taskcluster credentials given a suitable `access_token`'
    Entry Description = 'Given an OIDC `access_token` from a trusted OpenID provider, return a
set of Taskcluster credentials for use on behalf of the identified
user.

This method is typically not called with a Taskcluster client library
and does not accept Hawk credentials. The `access_token` should be
given in an `Authorization` header:
```
Authorization: Bearer abc.xyz
```

The `access_token` is first verified against the named
:provider, then passed to the provider's API to retrieve a user
profile. That profile is then used to generate Taskcluster credentials
appropriate to the user. Note that the resulting credentials may or may
not include a `certificate` property. Callers should be prepared for either
alternative.

The given credentials will expire in a relatively short time. Callers should
monitor this expiration and refresh the credentials if necessary, by calling
this endpoint again, if they have expired.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'A response containing credentials corresponding to a supplied OIDC `access_token`.
'
ID                     = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#'
Properties
  Property 'credentials' =
    Additional Properties  = 'false'
    Description            = 'Taskcluster credentials. Note that the credentials may not contain a certificate!
    '
    Properties
      Property 'accessToken' =
        Pattern                = '^[a-zA-Z0-9_-]{22,66}$'
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Pattern                = '^[A-Za-z0-9!@/:.+|_-]+$'
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken]'
    Title                  = 'Taskcluster Credentials'
    Type                   = 'object'
    TypeName               = 'TaskclusterCredentials'
    SourceURL              = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#/properties/credentials'
  Property 'expires' =
    Description            = 'Time after which the credentials are no longer valid.  Callers should
    call `oidcCredentials` again to get fresh credentials before this time.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#/properties/expires'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Credentials Response'
Type                   = 'object'
TypeName               = 'CredentialsResponse'
SourceURL              = 'http://schemas.taskcluster.net/login/v1/oidc-credentials-response.json#'


http://references.taskcluster.net/notify/v1/api.json
====================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Notification Service'
Description = 'The notification service, typically available at `notify.taskcluster.net`
listens for tasks with associated notifications and handles requests to
send emails and post pulse messages.'
Base URL    = 'https://notify.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/email'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'email'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'notify:email:<address>'
    Entry Input       = 'http://schemas.taskcluster.net/notify/v1/email-request.json'
    Entry Output      = ''
    Entry Title       = 'Send an Email'
    Entry Description = 'Send an email to `address`. The content is markdown and will be rendered
to HTML, but both the HTML and raw markdown text will be sent in the
email. If a link is included, it will be rendered to a nice button in the
HTML version of the email'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/pulse'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'pulse'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'notify:pulse:<routingKey>'
    Entry Input       = 'http://schemas.taskcluster.net/notify/v1/pulse-request.json'
    Entry Output      = ''
    Entry Title       = 'Publish a Pulse Message'
    Entry Description = 'Publish a message on pulse with the given `routingKey`.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/irc'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'irc'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'If channelRequest:
  notify:irc-channel:<channel>'
    Entry Input       = 'http://schemas.taskcluster.net/notify/v1/irc-request.json'
    Entry Output      = ''
    Entry Title       = 'Post IRC Message'
    Entry Description = 'Post a message on IRC to a specific channel or user, or a specific user
on a specific channel.

Success of this API method does not imply the message was successfully
posted. This API method merely inserts the IRC message into a queue
that will be processed by a background process.
This allows us to re-send the message in face of connection issues.

However, if the user isn't online the message will be dropped without
error. We maybe improve this behavior in the future. For now just keep
in mind that IRC is a best-effort service.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/notify/v1/email-request.json#
============================================================
Additional Properties  = 'false'
Description            = 'Request to send an email
'
ID                     = 'http://schemas.taskcluster.net/notify/v1/email-request.json#'
Properties
  Property 'address' =
    Description            = 'E-mail address to which the message should be sent
    '
    Format                 = 'email'
    Type                   = 'string'
    TypeName               = 'Address'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/address'
  Property 'content' =
    Description            = 'Content of the e-mail as **markdown**, will be rendered to HTML before
    the email is sent. Notice that markdown allows for a few HTML tags, but
    won't allow inclusion of script tags and other unpleasantries.
    '
    MaxLength              = '102400'
    MinLength              = '1'
    Type                   = 'string'
    TypeName               = 'Content'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/content'
  Property 'link' =
    Additional Properties  = 'false'
    Description            = 'Optional link that can be added as a button to the email.
    '
    Properties
      Property 'href' =
        Description            = 'Where the link should point to.
        '
        Format                 = 'uri'
        MaxLength              = '1024'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'Href'
        SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/link/properties/href'
      Property 'text' =
        Description            = 'Text to display on link.
        '
        MaxLength              = '40'
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'Text'
        SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/link/properties/text'
    Required               = '[text href]'
    Type                   = 'object'
    TypeName               = 'Link'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/link'
  Property 'replyTo' =
    Description            = 'Reply-to e-mail (this property is optional)
    '
    Format                 = 'email'
    Type                   = 'string'
    TypeName               = 'ReplyTo'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/replyTo'
  Property 'subject' =
    Description            = 'Subject line of the e-mail, this is plain-text
    '
    MaxLength              = '255'
    MinLength              = '1'
    Type                   = 'string'
    TypeName               = 'Subject'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/subject'
  Property 'template' =
    Default                = 'simple'
    Description            = 'E-mail html template used to format your content.
    '
    Enum                   = '[simple fullscreen]'
    Type                   = 'string'
    TypeName               = 'Template'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#/properties/template'
Required               = '[address subject content]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Send Email Request'
Type                   = 'object'
TypeName               = 'SendEmailRequest'
SourceURL              = 'http://schemas.taskcluster.net/notify/v1/email-request.json#'


http://schemas.taskcluster.net/notify/v1/irc-request.json#
==========================================================
Additional Properties  = 'false'
Description            = 'Request to post a message on IRC.
'
ID                     = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#'
OneOf
  Item '0' =
    Required               = '[channel]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Var'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/oneOf[0]'
  Item '1' =
    Required               = '[user]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Var1'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/oneOf[1]'
Properties
  Property 'channel' =
    Description            = 'Channel to post the message in. Please note that you **must** supply
    either `user` or `channel`, you cannot supply both.
    '
    Pattern                = '^[#&][^ ,\u0007]{1,199}$'
    Type                   = 'string'
    TypeName               = 'Channel'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/properties/channel'
  Property 'message' =
    Description            = 'IRC message to send as plain text.
    '
    MaxLength              = '510'
    MinLength              = '1'
    Type                   = 'string'
    TypeName               = 'Message'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/properties/message'
  Property 'user' =
    Description            = 'User to post the message to. Please note that you **must** supply
    either `user` or `channel`, you cannot supply both.
    '
    MaxLength              = '255'
    MinLength              = '1'
    Pattern                = '^[A-Za-z\[\]\\~_\^{|}][A-Za-z0-9\-\[\]\\~_\^{|}]{0,254}$'
    Type                   = 'string'
    TypeName               = 'User'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/properties/user'
Required               = '[message]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Post IRC Message Request'
Type                   = 'object'
TypeName               = 'PostIRCMessageRequest'
SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#'


http://schemas.taskcluster.net/notify/v1/irc-request.json#/oneOf[0]
===================================================================
Required               = '[channel]'
Type HAS NOT BEEN SET!!!
TypeName               = 'Var'
SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/oneOf[0]'


http://schemas.taskcluster.net/notify/v1/irc-request.json#/oneOf[1]
===================================================================
Required               = '[user]'
Type HAS NOT BEEN SET!!!
TypeName               = 'Var1'
SourceURL              = 'http://schemas.taskcluster.net/notify/v1/irc-request.json#/oneOf[1]'


http://schemas.taskcluster.net/notify/v1/pulse-request.json#
============================================================
Additional Properties  = 'false'
Description            = 'Request to post a message on pulse.
'
ID                     = 'http://schemas.taskcluster.net/notify/v1/pulse-request.json#'
Properties
  Property 'message' =
    Description            = 'IRC message to send as plain text.
    '
    Type                   = 'object'
    TypeName               = 'Message'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/pulse-request.json#/properties/message'
  Property 'routingKey' =
    Description            = 'Routing-key to use when posting the message.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'RoutingKey'
    SourceURL              = 'http://schemas.taskcluster.net/notify/v1/pulse-request.json#/properties/routingKey'
Required               = '[routingKey message]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Post Pulse Message Request'
Type                   = 'object'
TypeName               = 'PostPulseMessageRequest'
SourceURL              = 'http://schemas.taskcluster.net/notify/v1/pulse-request.json#'


http://references.taskcluster.net/purge-cache/v1/api.json
=========================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Purge Cache API Documentation'
Description = 'The purge-cache service, typically available at
`purge-cache.taskcluster.net`, is responsible for publishing a pulse
message for workers, so they can purge cache upon request.

This document describes the API end-point for publishing the pulse
message. This is mainly intended to be used by tools.'
Base URL    = 'https://purge-cache.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/purge-cache/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'purgeCache'
    Entry Stability   = 'stable'
    Entry Scopes      = 'purge-cache:<provisionerId>/<workerType>:<cacheName>'
    Entry Input       = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#'
    Entry Output      = ''
    Entry Title       = 'Purge Worker Cache'
    Entry Description = 'Publish a purge-cache message to purge caches named `cacheName` with
`provisionerId` and `workerType` in the routing-key. Workers should
be listening for this message and purge caches when they see it.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/purge-cache/list'
    Entry Args        = '[]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'allPurgeRequests'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#'
    Entry Title       = 'All Open Purge Requests'
    Entry Description = 'This is useful mostly for administors to view
the set of open purge requests. It should not
be used by workers. They should use the purgeRequests
endpoint that is specific to their workerType and
provisionerId.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/purge-cache/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[since]'
    Entry Name        = 'purgeRequests'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#'
    Entry Title       = 'Open Purge Requests for a provisionerId/workerType pair'
    Entry Description = 'List of caches that need to be purged if they are from before
a certain time. This is safe to be used in automation from
workers.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#
================================================================================
Additional Properties  = 'false'
Description            = 'A list of currently open purge-cache requests. Should not be used by workers.
'
ID                     = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Passed back from Azure to allow us to page through long result sets.'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/continuationToken'
  Property 'requests' =
    Description            = 'A simple list of purge-cache requests.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'before' =
          Description            = 'All caches that match this provisionerId, workerType, and cacheName must be destroyed if they were created _before_ this time.
          '
          Format                 = 'date-time'
          Type                   = 'string'
          TypeName               = 'Before'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/requests/items/properties/before'
        Property 'cacheName' =
          Description            = 'Name of cache to purge.'
          Type                   = 'string'
          TypeName               = 'CacheName'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/requests/items/properties/cacheName'
        Property 'provisionerId' =
          Description            = 'ProvisionerId associated with the workerType.'
          Type                   = 'string'
          TypeName               = 'ProvisionerID'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/requests/items/properties/provisionerId'
        Property 'workerType' =
          Description            = 'Workertype cache exists on.'
          Type                   = 'string'
          TypeName               = 'WorkerType'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/requests/items/properties/workerType'
      Required               = '[provisionerId workerType cacheName before]'
      Type                   = 'object'
      TypeName               = 'RequestsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/requests/items'
    Type                   = 'array'
    TypeName               = 'Requests'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#/properties/requests'
Required               = '[requests]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Open All Purge Requests List'
Type                   = 'object'
TypeName               = 'OpenAllPurgeRequestsList'
SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/all-purge-cache-request-list.json#'


http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#
============================================================================
Additional Properties  = 'false'
Description            = 'A list of currently open purge-cache requests.
'
ID                     = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#'
Properties
  Property 'cacheHit' =
    Description            = 'True if the cache has been used in this request.'
    Type                   = 'boolean'
    TypeName               = 'CacheHit'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/cacheHit'
  Property 'requests' =
    Description            = 'A simple list of purge-cache requests.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'before' =
          Description            = 'All caches that match this provisionerId, workerType, and cacheName must be destroyed if they were created _before_ this time.
          '
          Format                 = 'date-time'
          Type                   = 'string'
          TypeName               = 'Before'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/requests/items/properties/before'
        Property 'cacheName' =
          Description            = 'Name of cache to purge.'
          Type                   = 'string'
          TypeName               = 'CacheName'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/requests/items/properties/cacheName'
        Property 'provisionerId' =
          Description            = 'ProvisionerId associated with the workerType.'
          Type                   = 'string'
          TypeName               = 'ProvisionerID'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/requests/items/properties/provisionerId'
        Property 'workerType' =
          Description            = 'Workertype cache exists on.'
          Type                   = 'string'
          TypeName               = 'WorkerType'
          SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/requests/items/properties/workerType'
      Required               = '[provisionerId workerType cacheName before]'
      Type                   = 'object'
      TypeName               = 'RequestsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/requests/items'
    Type                   = 'array'
    TypeName               = 'Requests'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#/properties/requests'
Required               = '[requests cacheHit]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Open Purge Request List'
Type                   = 'object'
TypeName               = 'OpenPurgeRequestList'
SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request-list.json#'


http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Request that a message be published to purge a specific cache.
'
ID                     = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#'
Properties
  Property 'cacheName' =
    Description            = 'Name of cache to purge. Notice that if a `workerType` have multiple kinds
    of caches (with independent names), it should purge all caches identified
    by `cacheName` regardless of cache type.
    '
    Type                   = 'string'
    TypeName               = 'CacheName'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#/properties/cacheName'
Required               = '[cacheName]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Purge Cache Request'
Type                   = 'object'
TypeName               = 'PurgeCacheRequest'
SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-request.json#'


http://references.taskcluster.net/purge-cache/v1/exchanges.json
===============================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Purge-Cache Exchanges'
Description     = 'The purge-cache service, typically available at
`purge-cache.taskcluster.net`, is responsible for publishing a pulse
message for workers, so they can purge cache upon request.

This document describes the exchange offered for workers by the
cache-purge service.'
Exchange Prefix = 'exchange/taskcluster-purge-cache/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'purge-cache'
    Entry Name        = 'purgeCache'
    Entry Title       = 'Purge Cache Messages'
    Entry Description = 'When a cache purge is requested  a message will be posted on this
exchange with designated `provisionerId` and `workerType` in the
routing-key and the name of the `cacheFolder` as payload'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` under which to purge cache.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` for which to purge cache.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Entry Schema      = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'


http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a specific cache should be purged
'
ID                     = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'
Properties
  Property 'cacheName' =
    Description            = 'Name of cache to purge. Notice that if a `workerType` have multiple kinds
    of caches (with independent names), it should purge all caches identified
    by `cacheName` regardless of cache type.
    '
    Type                   = 'string'
    TypeName               = 'CacheName'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/cacheName'
  Property 'provisionerId' =
    Description            = '`provisionerId` under which the `workerType` we want to purge for exists.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/provisionerId'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/version'
  Property 'workerType' =
    Description            = '`workerType` we wish to purge cache for.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#/properties/workerType'
Required               = '[version provisionerId workerType cacheName]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Purge Cache Message'
Type                   = 'object'
TypeName               = 'PurgeCacheMessage'
SourceURL              = 'http://schemas.taskcluster.net/purge-cache/v1/purge-cache-message.json#'


http://references.taskcluster.net/queue/v1/api.json
===================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'Queue API Documentation'
Description = 'The queue, typically available at `queue.taskcluster.net`, is responsible
for accepting tasks and track their state as they are executed by
workers. In order ensure they are eventually resolved.

This document describes the API end-points offered by the queue. These 
end-points targets the following audience:
 * Schedulers, who create tasks to be executed,
 * Workers, who execute tasks, and
 * Tools, that wants to inspect the state of a task.'
Base URL    = 'https://queue.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'task'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task.json#'
    Entry Title       = 'Get Task Definition'
    Entry Description = 'This end-point will return the task-definition. Notice that the task
definition may have been modified by queue, if an optional property is
not specified the queue may provide a default value.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/status'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'status'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Get task status'
    Entry Description = 'Get task status structure from `taskId`'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task-group/<taskGroupId>/list'
    Entry Args        = '[taskGroupId]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listTaskGroup'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#'
    Entry Title       = 'List Task Group'
    Entry Description = 'List tasks sharing the same `taskGroupId`.

As a task-group may contain an unbounded number of tasks, this end-point
may return a `continuationToken`. To continue listing tasks you must call
the `listTaskGroup` again with the `continuationToken` as the
query-string option `continuationToken`.

By default this end-point will try to return up to 1000 members in one
request. But it **may return less**, even if more tasks are available.
It may also return a `continuationToken` even though there are no more
results. However, you can only be sure to have seen all results if you
keep calling `listTaskGroup` with the last `continuationToken` until you
get a result without a `continuationToken`.

If you are not interested in listing all the members at once, you may
use the query-string option `limit` to return fewer.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/dependents'
    Entry Args        = '[taskId]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listDependentTasks'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#'
    Entry Title       = 'List Dependent Tasks'
    Entry Description = 'List tasks that depend on the given `taskId`.

As many tasks from different task-groups may dependent on a single tasks,
this end-point may return a `continuationToken`. To continue listing
tasks you must call `listDependentTasks` again with the
`continuationToken` as the query-string option `continuationToken`.

By default this end-point will try to return up to 1000 tasks in one
request. But it **may return less**, even if more tasks are available.
It may also return a `continuationToken` even though there are no more
results. However, you can only be sure to have seen all results if you
keep calling `listDependentTasks` with the last `continuationToken` until
you get a result without a `continuationToken`.

If you are not interested in listing all the tasks at once, you may
use the query-string option `limit` to return fewer.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/task/<taskId>'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'createTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'All of:
* For scope in scopes each <scope>
* For route in routes each queue:route:<route>
* Any of:
  - All of:
    * queue:scheduler-id:<schedulerId>
    * For priority in priorities each queue:create-task:<priority>:<provisionerId>/<workerType>
  - If legacyScopes:
      Any of:
      - queue:create-task:<provisionerId>/<workerType>
      - All of:
        * queue:define-task:<provisionerId>/<workerType>
        * queue:task-group-id:<schedulerId>/<taskGroupId>
        * queue:schedule-task:<schedulerId>/<taskGroupId>/<taskId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Create New Task'
    Entry Description = 'Create a new task, this is an **idempotent** operation, so repeat it if
you get an internal server error or network connection is dropped.

**Task `deadline´**, the deadline property can be no more than 5 days
into the future. This is to limit the amount of pending tasks not being
taken care of. Ideally, you should use a much shorter deadline.

**Task expiration**, the `expires` property must be greater than the
task `deadline`. If not provided it will default to `deadline` + one
year. Notice, that artifacts created by task must expire before the task.

**Task specific routing-keys**, using the `task.routes` property you may
define task specific routing-keys. If a task has a task specific 
routing-key: `<route>`, then when the AMQP message about the task is
published, the message will be CC'ed with the routing-key: 
`route.<route>`. This is useful if you want another component to listen
for completed tasks you have posted.  The caller must have scope
`queue:route:<route>` for each route.

**Dependencies**, any tasks referenced in `task.dependencies` must have
already been created at the time of this call.

**Important** Any scopes the task requires are also required for creating
the task. Please see the Request Payload (Task Definition) for details.'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/define'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'defineTask'
    Entry Stability   = 'deprecated'
    Entry Scopes      = 'All of:
* For scope in scopes each <scope>
* For route in routes each queue:route:<route>
* Any of:
  - All of:
    * queue:scheduler-id:<schedulerId>
    * For priority in priorities each queue:create-task:<priority>:<provisionerId>/<workerType>
  - If legacyScopes:
      Any of:
      - queue:define-task:<provisionerId>/<workerType>
      - queue:create-task:<provisionerId>/<workerType>
      - All of:
        * queue:define-task:<provisionerId>/<workerType>
        * queue:task-group-id:<schedulerId>/<taskGroupId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Define Task'
    Entry Description = '**Deprecated**, this is the same as `createTask` with a **self-dependency**.
This is only present for legacy.'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/schedule'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'scheduleTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:schedule-task:<schedulerId>/<taskGroupId>/<taskId>
- All of:
  * queue:schedule-task
  * assume:scheduler-id:<schedulerId>/<taskGroupId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Schedule Defined Task'
    Entry Description = 'scheduleTask will schedule a task to be executed, even if it has
unresolved dependencies. A task would otherwise only be scheduled if
its dependencies were resolved.

This is useful if you have defined a task that depends on itself or on
some other task that has not been resolved, but you wish the task to be
scheduled immediately.

This will announce the task as pending and workers will be allowed to
claim it and resolve the task.

**Note** this operation is **idempotent** and will not fail or complain
if called with a `taskId` that is already scheduled, or even resolved.
To reschedule a task previously resolved, use `rerunTask`.'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/rerun'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'rerunTask'
    Entry Stability   = 'deprecated'
    Entry Scopes      = 'Any of:
- queue:rerun-task:<schedulerId>/<taskGroupId>/<taskId>
- All of:
  * queue:rerun-task
  * assume:scheduler-id:<schedulerId>/<taskGroupId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Rerun a Resolved Task'
    Entry Description = 'This method _reruns_ a previously resolved task, even if it was
_completed_. This is useful if your task completes unsuccessfully, and
you just want to run it from scratch again. This will also reset the
number of `retries` allowed.

Remember that `retries` in the task status counts the number of runs that
the queue have started because the worker stopped responding, for example
because a spot node died.

**Remark** this operation is idempotent, if you try to rerun a task that
is not either `failed` or `completed`, this operation will just return
the current task status.'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/cancel'
    Entry Args        = '[taskId]'
    Entry Query        = '[]'
    Entry Name        = 'cancelTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:cancel-task:<schedulerId>/<taskGroupId>/<taskId>
- All of:
  * queue:cancel-task
  * assume:scheduler-id:<schedulerId>/<taskGroupId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Cancel Task'
    Entry Description = 'This method will cancel a task that is either `unscheduled`, `pending` or
`running`. It will resolve the current run as `exception` with
`reasonResolved` set to `canceled`. If the task isn't scheduled yet, ie.
it doesn't have any runs, an initial run will be added and resolved as
described above. Hence, after canceling a task, it cannot be scheduled
with `queue.scheduleTask`, but a new run can be created with
`queue.rerun`. These semantics is equivalent to calling
`queue.scheduleTask` immediately followed by `queue.cancelTask`.

**Remark** this operation is idempotent, if you try to cancel a task that
isn't `unscheduled`, `pending` or `running`, this operation will just
return the current task status.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/poll-task-url/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'pollTaskUrls'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:poll-task-urls:<provisionerId>/<workerType>
- All of:
  * queue:poll-task-urls
  * assume:worker-type:<provisionerId>/<workerType>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#'
    Entry Title       = 'Get Urls to Poll Pending Tasks'
    Entry Description = 'Get a signed URLs to get and delete messages from azure queue.
Once messages are polled from here, you can claim the referenced task
with `claimTask`, and afterwards you should always delete the message.'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/claim-work/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'claimWork'
    Entry Stability   = 'stable'
    Entry Scopes      = 'All of:
* queue:claim-work:<provisionerId>/<workerType>
* queue:worker-id:<workerGroup>/<workerId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/claim-work-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#'
    Entry Title       = 'Claim Work'
    Entry Description = 'Claim any task, more to be added later... long polling up to 20s.'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/claim'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'claimTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- All of:
  * queue:claim-task:<provisionerId>/<workerType>
  * queue:worker-id:<workerGroup>/<workerId>
- All of:
  * queue:claim-task
  * assume:worker-type:<provisionerId>/<workerType>
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#'
    Entry Title       = 'Claim Task'
    Entry Description = 'claim a task, more to be added later...'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/reclaim'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reclaimTask'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:reclaim-task:<taskId>/<runId>
- All of:
  * queue:claim-task
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#'
    Entry Title       = 'Reclaim task'
    Entry Description = 'Refresh the claim for a specific `runId` for given `taskId`. This updates
the `takenUntil` property and returns a new set of temporary credentials
for performing requests on behalf of the task. These credentials should
be used in-place of the credentials returned by `claimWork`.

The `reclaimTask` requests serves to:
 * Postpone `takenUntil` preventing the queue from resolving
   `claim-expired`,
 * Refresh temporary credentials used for processing the task, and
 * Abort execution if the task/run have been resolved.

If the `takenUntil` timestamp is exceeded the queue will resolve the run
as _exception_ with reason `claim-expired`, and proceeded to retry to the
task. This ensures that tasks are retried, even if workers disappear
without warning.

If the task is resolved, this end-point will return `409` reporting
`RequestConflict`. This typically happens if the task have been canceled
or the `task.deadline` have been exceeded. If reclaiming fails, workers
should abort the task and forget about the given `runId`. There is no
need to resolve the run or upload artifacts.'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/completed'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reportCompleted'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:resolve-task:<taskId>/<runId>
- All of:
  * queue:resolve-task
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Report Run Completed'
    Entry Description = 'Report a task completed, resolving the run as `completed`.'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/failed'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reportFailed'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:resolve-task:<taskId>/<runId>
- All of:
  * queue:resolve-task
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Report Run Failed'
    Entry Description = 'Report a run failed, resolving the run as `failed`. Use this to resolve
a run that failed because the task specific code behaved unexpectedly.
For example the task exited non-zero, or didn't produce expected output.

Do not use this if the task couldn't be run because if malformed
payload, or other unexpected condition. In these cases we have a task
exception, which should be reported with `reportException`.'
Entry 15    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/exception'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[]'
    Entry Name        = 'reportException'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:resolve-task:<taskId>/<runId>
- All of:
  * queue:resolve-task
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
    Entry Title       = 'Report Task Exception'
    Entry Description = 'Resolve a run as _exception_. Generally, you will want to report tasks as
failed instead of exception. You should `reportException` if,

  * The `task.payload` is invalid,
  * Non-existent resources are referenced,
  * Declared actions cannot be executed due to unavailable resources,
  * The worker had to shutdown prematurely,
  * The worker experienced an unknown error, or,
  * The task explicitly requested a retry.

Do not use this to signal that some user-specified code crashed for any
reason specific to this code. If user-specific code hits a resource that
is temporarily unavailable worker should report task _failed_.'
Entry 16    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts/<name>'
    Entry Args        = '[taskId runId name]'
    Entry Query        = '[]'
    Entry Name        = 'createArtifact'
    Entry Stability   = 'stable'
    Entry Scopes      = 'Any of:
- queue:create-artifact:<taskId>/<runId>
- All of:
  * queue:create-artifact:<name>
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#'
    Entry Title       = 'Create Artifact'
    Entry Description = 'This API end-point creates an artifact for a specific run of a task. This
should **only** be used by a worker currently operating on this task, or
from a process running within the task (ie. on the worker).

All artifacts must specify when they `expires`, the queue will
automatically take care of deleting artifacts past their
expiration point. This features makes it feasible to upload large
intermediate artifacts from data processing applications, as the
artifacts can be set to expire a few days later.

We currently support 3 different `storageType`s, each storage type have
slightly different features and in some cases difference semantics.
We also have 2 deprecated `storageType`s which are only maintained for
backwards compatiability and should not be used in new implementations

**Blob artifacts**, are useful for storing large files.  Currently, these
are all stored in S3 but there are facilities for adding support for other
backends in futre.  A call for this type of artifact must provide information
about the file which will be uploaded.  This includes sha256 sums and sizes.
This method will return a list of general form HTTP requests which are signed
by AWS S3 credentials managed by the Queue.  Once these requests are completed
the list of `ETag` values returned by the requests must be passed to the
queue `completeArtifact` method

**S3 artifacts**, DEPRECATED is useful for static files which will be
stored on S3. When creating an S3 artifact the queue will return a
pre-signed URL to which you can do a `PUT` request to upload your
artifact. Note that `PUT` request **must** specify the `content-length`
header and **must** give the `content-type` header the same value as in
the request to `createArtifact`.

**Azure artifacts**, DEPRECATED are stored in _Azure Blob Storage_ service
which given the consistency guarantees and API interface offered by Azure
is more suitable for artifacts that will be modified during the execution
of the task. For example docker-worker has a feature that persists the
task log to Azure Blob Storage every few seconds creating a somewhat
live log. A request to create an Azure artifact will return a URL
featuring a [Shared-Access-Signature](http://msdn.microsoft.com/en-us/library/azure/dn140256.aspx),
refer to MSDN for further information on how to use these.
**Warning: azure artifact is currently an experimental feature subject
to changes and data-drops.**

**Reference artifacts**, only consists of meta-data which the queue will
store for you. These artifacts really only have a `url` property and
when the artifact is requested the client will be redirect the URL
provided with a `303` (See Other) redirect. Please note that we cannot
delete artifacts you upload to other service, we can only delete the
reference to the artifact, when it expires.

**Error artifacts**, only consists of meta-data which the queue will
store for you. These artifacts are only meant to indicate that you the
worker or the task failed to generate a specific artifact, that you
would otherwise have uploaded. For example docker-worker will upload an
error artifact, if the file it was supposed to upload doesn't exists or
turns out to be a directory. Clients requesting an error artifact will
get a `403` (Forbidden) response. This is mainly designed to ensure that
dependent tasks can distinguish between artifacts that were suppose to
be generated and artifacts for which the name is misspelled.

**Artifact immutability**, generally speaking you cannot overwrite an
artifact when created. But if you repeat the request with the same
properties the request will succeed as the operation is idempotent.
This is useful if you need to refresh a signed URL while uploading.
Do not abuse this to overwrite artifacts created by another entity!
Such as worker-host overwriting artifact created by worker-code.

As a special case the `url` property on _reference artifacts_ can be
updated. You should only use this to update the `url` property for
reference artifacts your process has created.'
Entry 17    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts/<name>'
    Entry Args        = '[taskId runId name]'
    Entry Query        = '[]'
    Entry Name        = 'completeArtifact'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'Any of:
- queue:create-artifact:<taskId>/<runId>
- All of:
  * queue:create-artifact:<name>
  * assume:worker-id:<workerGroup>/<workerId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/put-artifact-request.json#'
    Entry Output      = ''
    Entry Title       = 'Complete Artifact'
    Entry Description = 'This endpoint finalises an upload done through the blob `storageType`.
The queue will ensure that the task/run is still allowing artifacts
to be uploaded.  For single-part S3 blob artifacts, this endpoint
will simply ensure the artifact is present in S3.  For multipart S3
artifacts, the endpoint will perform the commit step of the multipart
upload flow.  As the final step for both multi and single part artifacts,
the `present` entity field will be set to `true` to reflect that the
artifact is now present and a message published to pulse.  NOTE: This
endpoint *must* be called for all artifacts of storageType 'blob''
Entry 18    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts/<name>'
    Entry Args        = '[taskId runId name]'
    Entry Query        = '[]'
    Entry Name        = 'getArtifact'
    Entry Stability   = 'stable'
    Entry Scopes      = 'If private:
  queue:get-artifact:<name>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get Artifact from Run'
    Entry Description = 'Get artifact by `<name>` from a specific run.

**Public Artifacts**, in-order to get an artifact you need the scope
`queue:get-artifact:<name>`, where `<name>` is the name of the artifact.
But if the artifact `name` starts with `public/`, authentication and
authorization is not necessary to fetch the artifact.

**API Clients**, this method will redirect you to the artifact, if it is
stored externally. Either way, the response may not be JSON. So API
client users might want to generate a signed URL for this end-point and
use that URL with a normal HTTP client.

**Caching**, artifacts may be cached in data centers closer to the
workers in-order to reduce bandwidth costs. This can lead to longer
response times. Caching can be skipped by setting the header
`x-taskcluster-skip-cache: true`, this should only be used for resources
where request volume is known to be low, and caching not useful.
(This feature may be disabled in the future, use is sparingly!)'
Entry 19    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/artifacts/<name>'
    Entry Args        = '[taskId name]'
    Entry Query        = '[]'
    Entry Name        = 'getLatestArtifact'
    Entry Stability   = 'stable'
    Entry Scopes      = 'If private:
  queue:get-artifact:<name>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Get Artifact from Latest Run'
    Entry Description = 'Get artifact by `<name>` from the last run of a task.

**Public Artifacts**, in-order to get an artifact you need the scope
`queue:get-artifact:<name>`, where `<name>` is the name of the artifact.
But if the artifact `name` starts with `public/`, authentication and
authorization is not necessary to fetch the artifact.

**API Clients**, this method will redirect you to the artifact, if it is
stored externally. Either way, the response may not be JSON. So API
client users might want to generate a signed URL for this end-point and
use that URL with a normal HTTP client.

**Remark**, this end-point is slightly slower than
`queue.getArtifact`, so consider that if you already know the `runId` of
the latest run. Otherwise, just us the most convenient API end-point.'
Entry 20    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/runs/<runId>/artifacts'
    Entry Args        = '[taskId runId]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listArtifacts'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'
    Entry Title       = 'Get Artifacts from Run'
    Entry Description = 'Returns a list of artifacts and associated meta-data for a given run.

As a task may have many artifacts paging may be necessary. If this
end-point returns a `continuationToken`, you should call the end-point
again with the `continuationToken` as the query-string option:
`continuationToken`.

By default this end-point will list up-to 1000 artifacts in a single page
you may limit this with the query-string parameter `limit`.'
Entry 21    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/task/<taskId>/artifacts'
    Entry Args        = '[taskId]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listLatestArtifacts'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'
    Entry Title       = 'Get Artifacts from Latest Run'
    Entry Description = 'Returns a list of artifacts and associated meta-data for the latest run
from the given task.

As a task may have many artifacts paging may be necessary. If this
end-point returns a `continuationToken`, you should call the end-point
again with the `continuationToken` as the query-string option:
`continuationToken`.

By default this end-point will list up-to 1000 artifacts in a single page
you may limit this with the query-string parameter `limit`.'
Entry 22    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/provisioners'
    Entry Args        = '[]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listProvisioners'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#'
    Entry Title       = 'Get a list of all active provisioners'
    Entry Description = 'Get all active provisioners.

The term "provisioner" is taken broadly to mean anything with a provisionerId.
This does not necessarily mean there is an associated service performing any
provisioning activity.

The response is paged. If this end-point returns a `continuationToken`, you
should call the end-point again with the `continuationToken` as a query-string
option. By default this end-point will list up to 1000 provisioners in a single
page. You may limit this with the query-string parameter `limit`.'
Entry 23    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/provisioners/<provisionerId>'
    Entry Args        = '[provisionerId]'
    Entry Query        = '[]'
    Entry Name        = 'getProvisioner'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#'
    Entry Title       = 'Get an active provisioner'
    Entry Description = 'Get an active provisioner.

The term "provisioner" is taken broadly to mean anything with a provisionerId.
This does not necessarily mean there is an associated service performing any
provisioning activity.'
Entry 24    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/provisioners/<provisionerId>'
    Entry Args        = '[provisionerId]'
    Entry Query        = '[]'
    Entry Name        = 'declareProvisioner'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'For property in properties each queue:declare-provisioner:<provisionerId>#<property>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#'
    Entry Title       = 'Update a provisioner'
    Entry Description = 'Declare a provisioner, supplying some details about it.

`declareProvisioner` allows updating one or more properties of a provisioner as long as the required scopes are
possessed. For example, a request to update the `aws-provisioner-v1`
provisioner with a body `{description: 'This provisioner is great'}` would require you to have the scope
`queue:declare-provisioner:aws-provisioner-v1#description`.

The term "provisioner" is taken broadly to mean anything with a provisionerId.
This does not necessarily mean there is an associated service performing any
provisioning activity.'
Entry 25    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/pending/<provisionerId>/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'pendingTasks'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#'
    Entry Title       = 'Get Number of Pending Tasks'
    Entry Description = 'Get an approximate number of pending tasks for the given `provisionerId`
and `workerType`.

The underlying Azure Storage Queues only promises to give us an estimate.
Furthermore, we cache the result in memory for 20 seconds. So consumers
should be no means expect this to be an accurate number.
It is, however, a solid estimate of the number of pending tasks.'
Entry 26    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/provisioners/<provisionerId>/worker-types'
    Entry Args        = '[provisionerId]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'listWorkerTypes'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#'
    Entry Title       = 'Get a list of all active worker-types'
    Entry Description = 'Get all active worker-types for the given provisioner.

The response is paged. If this end-point returns a `continuationToken`, you
should call the end-point again with the `continuationToken` as a query-string
option. By default this end-point will list up to 1000 worker-types in a single
page. You may limit this with the query-string parameter `limit`.'
Entry 27    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/provisioners/<provisionerId>/worker-types/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'getWorkerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#'
    Entry Title       = 'Get a worker-type'
    Entry Description = 'Get a worker-type from a provisioner.'
Entry 28    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/provisioners/<provisionerId>/worker-types/<workerType>'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[]'
    Entry Name        = 'declareWorkerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'For property in properties each queue:declare-worker-type:<provisionerId>/<workerType>#<property>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#'
    Entry Title       = 'Update a worker-type'
    Entry Description = 'Declare a workerType, supplying some details about it.

`declareWorkerType` allows updating one or more properties of a worker-type as long as the required scopes are
possessed. For example, a request to update the `gecko-b-1-w2008` worker-type within the `aws-provisioner-v1`
provisioner with a body `{description: 'This worker type is great'}` would require you to have the scope
`queue:declare-worker-type:aws-provisioner-v1/gecko-b-1-w2008#description`.'
Entry 29    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/provisioners/<provisionerId>/worker-types/<workerType>/workers'
    Entry Args        = '[provisionerId workerType]'
    Entry Query        = '[continuationToken limit quarantined]'
    Entry Name        = 'listWorkers'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#'
    Entry Title       = 'Get a list of all active workers of a workerType'
    Entry Description = 'Get a list of all active workers of a workerType.

`listWorkers` allows a response to be filtered by quarantined and non quarantined workers.
To filter the query, you should call the end-point with `quarantined` as a query-string option with a
true or false value.

The response is paged. If this end-point returns a `continuationToken`, you
should call the end-point again with the `continuationToken` as a query-string
option. By default this end-point will list up to 1000 workers in a single
page. You may limit this with the query-string parameter `limit`.'
Entry 30    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/provisioners/<provisionerId>/worker-types/<workerType>/workers/<workerGroup>/<workerId>'
    Entry Args        = '[provisionerId workerType workerGroup workerId]'
    Entry Query        = '[]'
    Entry Name        = 'getWorker'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#'
    Entry Title       = 'Get a worker-type'
    Entry Description = 'Get a worker from a worker-type.'
Entry 31    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/provisioners/<provisionerId>/worker-types/<workerType>/workers/<workerGroup>/<workerId>'
    Entry Args        = '[provisionerId workerType workerGroup workerId]'
    Entry Query        = '[]'
    Entry Name        = 'quarantineWorker'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'queue:quarantine-worker:<provisionerId>/<workerType>/<workerGroup>/<workerId>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/quarantine-worker-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#'
    Entry Title       = 'Quarantine a worker'
    Entry Description = 'Quarantine a worker'
Entry 32    =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/provisioners/<provisionerId>/worker-types/<workerType>/<workerGroup>/<workerId>'
    Entry Args        = '[provisionerId workerType workerGroup workerId]'
    Entry Query        = '[]'
    Entry Name        = 'declareWorker'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'For property in properties each queue:declare-worker:<provisionerId>/<workerType>/<workerGroup>/<workerId>#<property>'
    Entry Input       = 'http://schemas.taskcluster.net/queue/v1/update-worker-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#'
    Entry Title       = 'Declare a worker'
    Entry Description = 'Declare a worker, supplying some details about it.

`declareWorker` allows updating one or more properties of a worker as long as the required scopes are
possessed.'
Entry 33    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/queue/v1/claim-work-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Request to claim a task for a worker to process.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/claim-work-request.json#'
Properties
  Property 'tasks' =
    Default                = '1'
    Description            = 'Number of tasks to attempt to claim.
    '
    Maximum                = '32'
    Minimum                = '1'
    Type                   = 'integer'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-request.json#/properties/tasks'
  Property 'workerGroup' =
    Description            = 'Identifier for group that worker claiming the task is a part of.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-request.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for worker within the given workerGroup
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-request.json#/properties/workerId'
Required               = '[workerGroup workerId tasks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Claim Work Request'
Type                   = 'object'
TypeName               = 'ClaimWorkRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-request.json#'


http://schemas.taskcluster.net/queue/v1/claim-work-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Response to an attempt to claim tasks for a worker to process.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#'
Properties
  Property 'tasks' =
    Description            = 'List of task claims, may be empty if no tasks was claimed, in which case
    the worker should sleep a tiny bit before polling again.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'credentials' =
          Additional Properties  = 'false'
          Description            = 'Temporary credentials granting `task.scopes` and the scope:
          `queue:claim-task:<taskId>/<runId>` which allows the worker to reclaim
          the task, upload artifacts and report task resolution.
          
          The temporary credentials are set to expire after `takenUntil`. They
          won't expire exactly at `takenUntil` but shortly after, hence, requests
          coming close `takenUntil` won't have problems even if there is a little
          clock drift.
          
          Workers should use these credentials when making requests on behalf of
          a task. This includes requests to create artifacts, reclaiming the task
          reporting the task `completed`, `failed` or `exception`.
          
          Note, a new set of temporary credentials is issued when the worker
          reclaims the task.
          '
          Properties
            Property 'accessToken' =
              Description            = 'The `accessToken` for the temporary credentials.
              '
              MinLength              = '1'
              Type                   = 'string'
              TypeName               = 'AccessToken'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/credentials/properties/accessToken'
            Property 'certificate' =
              Description            = 'The `certificate` for the temporary credentials, these are required
              for the temporary credentials to work.
              '
              MinLength              = '1'
              Type                   = 'string'
              TypeName               = 'Certificate'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/credentials/properties/certificate'
            Property 'clientId' =
              Description            = 'The `clientId` for the temporary credentials.
              '
              MinLength              = '1'
              Type                   = 'string'
              TypeName               = 'ClientID'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/credentials/properties/clientId'
          Required               = '[clientId accessToken certificate]'
          Type                   = 'object'
          TypeName               = 'Credentials'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/credentials'
        Property 'runId' =
          Description            = '`run-id` assigned to this run of the task
          '
          Maximum                = '1000'
          Minimum                = '0'
          Type                   = 'integer'
          TypeName               = 'RunID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/runId'
        Property 'status' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
          TypeName               = 'Status'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/status'
        Property 'takenUntil' =
          Description            = 'Time at which the run expires and is resolved as `exception`,
          with reason `claim-expired` if the run haven't been reclaimed.
          '
          Format                 = 'date-time'
          Type                   = 'string'
          TypeName               = 'TakenUntil'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/takenUntil'
        Property 'task' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/task.json#'
          TypeName               = 'Task'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/task'
        Property 'workerGroup' =
          Description            = 'Identifier for the worker-group within which this run started.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Type                   = 'string'
          TypeName               = 'WorkerGroup'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/workerGroup'
        Property 'workerId' =
          Description            = 'Identifier for the worker executing this run.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Type                   = 'string'
          TypeName               = 'WorkerID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items/properties/workerId'
      Required               = '[status runId workerGroup workerId takenUntil task credentials]'
      Type                   = 'object'
      TypeName               = 'TasksEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks/items'
    Type                   = 'array'
    TypeName               = 'Tasks'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#/properties/tasks'
Required               = '[tasks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Claim Work Response'
Type                   = 'object'
TypeName               = 'ClaimWorkResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/claim-work-response.json#'


http://schemas.taskcluster.net/queue/v1/create-task-request.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Definition of a task that can be scheduled
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'
Properties
  Property 'created' =
    Description            = 'Creation time of task'
    Format                 = 'date-time'
    Title                  = 'Created'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/created'
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are
    resolved as **exception** if not resolved by other means
    before the deadline. Note, deadline cannot be more than
    5 days into the future
    '
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/deadline'
  Property 'dependencies' =
    Default                = '[]'
    Description            = 'List of dependent tasks. These must either be _completed_ or _resolved_
    before this task is scheduled. See `requires` for semantics.
    '
    Items
      Description            = 'The `taskId` of a task that must be resolved before this task is
      scheduled.
      '
      Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
      Title                  = 'Task Dependency'
      Type                   = 'string'
      TypeName               = 'TaskDependency'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/dependencies/items'
    Title                  = 'Task Dependencies'
    Type                   = 'array'
    TypeName               = 'TaskDependencies'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/dependencies'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted.
    Notice that all artifacts for the task must have an expiration that is no
    later than this. If this property isn't it will be set to `deadline`
    plus one year (this default may subject to change).
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/expires'
  Property 'extra' =
    Default                = 'map[]'
    Description            = 'Object with properties that can hold any kind of extra data that should be
    associated with the task. This can be data for the task which doesn't
    fit into `payload`, or it can supplementary data for use in services
    listening for events from this task. For example this could be details to
    display on _treeherder_, or information for indexing the task. Please, try
    to put all related information under one property, so `extra` data keys
    for treeherder reporting and task indexing don't conflict, hence, we have
    reusable services. **Warning**, do not stuff large data-sets in here,
    task definitions should not take-up multiple MiBs.
    '
    Title                  = 'Extra Data'
    Type                   = 'object'
    TypeName               = 'ExtraData'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/extra'
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of the task, please **explain** what the
        task does. A few lines of documentation is not going to hurt you.
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task, used to very briefly given an idea about
        what the task does.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task, e.g. the person who did
        `hg push`. The person we should contact to ask why this task is here.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task, should specify a file, revision and
        repository. This should be place someone can go an do a git/hg blame
        to who came up with recipe for this task.
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Pattern                = '^https?://'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'MetaData'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/metadata'
  Property 'payload' =
    Description            = 'Task-specific payload following worker-specific format. For example the
    `docker-worker` requires keys like: `image`, `commands` and
    `features`. Refer to the documentation of `docker-worker` for details.
    '
    Title                  = 'Task Payload'
    Type                   = 'object'
    TypeName               = 'TaskPayload'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/payload'
  Property 'priority' =
    Default                = 'lowest'
    Description            = 'Priority of task, this defaults to `lowest`, equivalent to the
    _deprecated_ `normal`.
    **Task submitter required scopes** `queue:task-priority:high` for high
    priority tasks.
    '
    Enum                   = '[highest very-high high medium low very-low lowest normal]'
    Title                  = 'Task Priority'
    Type                   = 'string'
    TypeName               = 'TaskPriority'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/priority'
  Property 'provisionerId' =
    Description            = 'Unique identifier for a provisioner, that can supply specified
    `workerType`
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/provisionerId'
  Property 'requires' =
    Default                = 'all-completed'
    Description            = 'The tasks relation to its dependencies. This property specifies the
    semantics of the `task.dependencies` property.
    If `all-completed` is given the task will be scheduled when all
    dependencies are resolved _completed_ (successful resolution).
    If `all-resolved` is given the task will be scheduled when all dependencies
    have been resolved, regardless of what their resolution is.
    '
    Enum                   = '[all-completed all-resolved]'
    Title                  = 'Dependency Requirement Semantics'
    Type                   = 'string'
    TypeName               = 'DependencyRequirementSemantics'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/requires'
  Property 'retries' =
    Default                = '5'
    Description            = 'Number of times to retry the task in case of infrastructure issues.
    An _infrastructure issue_ is a worker node that crashes or is shutdown,
    these events are to be expected.
    '
    Maximum                = '49'
    Minimum                = '0'
    Title                  = 'Retries'
    Type                   = 'integer'
    TypeName               = 'Retries'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/retries'
  Property 'routes' =
    Default                = '[]'
    Description            = 'List of task specific routes, AMQP messages will be CC'ed to these routes.
    **Task submitter required scopes** `queue:route:<route>` for
    each route given.
    '
    Items
      Description            = 'A task specific route, AMQP messages will be CC'ed with a routing key
      matching `route.<task-specific route>`. It's possible to dot (`.`) in
      the task specific route to make sub-keys, etc. See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task Specific Route'
      Type                   = 'string'
      TypeName               = 'TaskSpecificRoute'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/routes/items'
    Title                  = 'Task Specific Routes'
    Type                   = 'array'
    TypeName               = 'TaskSpecificRoutes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/routes'
  Property 'schedulerId' =
    Default                = '-'
    Description            = 'Identifier for the scheduler that _defined_ this task, this can be an
    identifier for a user or a service like the `"task-graph-scheduler"`.
    **Task submitter required scopes**
    `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
    This scope is also necessary to _schedule_ a defined task, or _rerun_ a
    task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/schedulerId'
  Property 'scopes' =
    Default                = '[]'
    Description            = 'List of scopes (or scope-patterns) that the task is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which the task is
      authorized to use. This can be a string or a string
      ending with `*` which will authorize all scopes for
      which the string is a prefix.  Scopes must be composed of
      printable ASCII characters and spaces.
      **Task submitter required scopes** The same scope-pattern(s) given
      (otherwise a task could be submitted to perform an action that the
      task submitter is not authorized to perform).
      '
      Pattern                = '^[\x20-\x7e]*$'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = 'Scope'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Default                = 'map[]'
    Description            = 'Arbitrary key-value tags (only strings limited to 4k). These can be used
    to attach informal meta-data to a task. Use this for informal tags that
    tasks can be classified by. You can also think of strings here as
    candidates for formal meta-data. Something like
    `purpose: 'build' || 'test'` is a good example.
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/tags'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
    property isn't specified.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/taskGroupId'
  Property 'workerType' =
    Description            = 'Unique identifier for a worker-type within a specific provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#/properties/workerType'
Required               = '[provisionerId workerType created deadline payload metadata]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Definition Request'
Type                   = 'object'
TypeName               = 'TaskDefinitionRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/create-task-request.json#'


http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'List of artifacts for a given `taskId` and `runId`.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'
Properties
  Property 'artifacts' =
    Description            = 'List of artifacts for given `taskId` and `runId`.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Information about an artifact for the given `taskId` and `runId`.
      '
      Properties
        Property 'contentType' =
          Description            = 'Mimetype for the artifact that was created.
          '
          MaxLength              = '255'
          Title                  = 'Content-Type'
          Type                   = 'string'
          TypeName               = 'ContentType'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/contentType'
        Property 'expires' =
          Description            = 'Date and time after which the artifact created will be automatically
          deleted by the queue.
          '
          Format                 = 'date-time'
          Title                  = 'Artifact Expiration'
          Type                   = 'string'
          TypeName               = 'ArtifactExpiration'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/expires'
        Property 'name' =
          Description            = 'Name of the artifact that was created, this is useful if you want to
          attempt to fetch the artifact.
          '
          MaxLength              = '1024'
          Title                  = 'Artifact Name'
          Type                   = 'string'
          TypeName               = 'ArtifactName'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/name'
        Property 'storageType' =
          Description            = 'This is the `storageType` for the request that was used to create
          the artifact.
          '
          Enum                   = '[blob s3 azure reference error]'
          Title                  = 'Artifact Storage-Type'
          Type                   = 'string'
          TypeName               = 'ArtifactStorageType'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items/properties/storageType'
      Required               = '[storageType name expires contentType]'
      Title                  = 'Artifact'
      Type                   = 'object'
      TypeName               = 'Artifact'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts/items'
    Title                  = 'Artifact List'
    Type                   = 'array'
    TypeName               = 'ArtifactList'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/artifacts'
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of artifacts.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called with `continuationToken` until you get a
    result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#/properties/continuationToken'
Required               = '[artifacts]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Artifacts Response'
Type                   = 'object'
TypeName               = 'ListArtifactsResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-artifacts-response.json#'


http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#
===========================================================================
Additional Properties  = 'false'
Description            = 'Response from a `listDependentTasks` request.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of dependent tasks.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called `listDependentTasks` with
    `continuationToken` until you get a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#/properties/continuationToken'
  Property 'taskId' =
    Description            = 'Identifier for the task whose dependents are being listed.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#/properties/taskId'
  Property 'tasks' =
    Description            = 'List of tasks that have `taskId` in the `task.dependencies` property.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Task Definition and task status structure.
      '
      Properties
        Property 'status' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
          TypeName               = 'Status'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#/properties/tasks/items/properties/status'
        Property 'task' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/task.json#'
          TypeName               = 'Task'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#/properties/tasks/items/properties/task'
      Required               = '[task status]'
      Title                  = 'Task definition and status'
      Type                   = 'object'
      TypeName               = 'TaskDefinitionAndStatus'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#/properties/tasks/items'
    Title                  = 'Tasks that depends on `taskId`'
    Type                   = 'array'
    TypeName               = 'TasksThatDependsOnTaskID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#/properties/tasks'
Required               = '[taskId tasks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Dependent Tasks Response'
Type                   = 'object'
TypeName               = 'ListDependentTasksResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-dependent-tasks-response.json#'


http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#
========================================================================
Additional Properties  = 'false'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of provisioners.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called with `continuationToken` until you get a
    result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/continuationToken'
  Property 'provisioners' =
    Items
      Additional Properties  = 'false'
      Properties
        Property 'actions' =
          Items
            Additional Properties  = 'false'
            Description            = 'Actions are defined on the provisioner and they are performed via a request using the `url` and `method`.
            Depending on the `context`, the `url` will be filled with parameters. In addition, `context` is
            used by the front-end to know where to display the action. For example, `context=worker`
            will display the action on the worker explorer.
            
            _Note: The request will be signed with the user's Taskcluster credentials._
            '
            Properties
              Property 'context' =
                Description            = 'Actions have a "context" that is one of provisioner, worker-type,
                or worker, indicating which it applies to. `context` is used by the front-end to know where to display the action.
                
                | `context`   | Page displayed        |
                |-------------|-----------------------|
                | provisioner | Provisioner Explorer  |
                | worker-type | Workers Explorer      |
                | worker      | Worker Explorer       |
                '
                Enum                   = '[provisioner worker-type worker]'
                Title                  = 'Context'
                Type                   = 'string'
                TypeName               = 'Context'
                SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items/properties/context'
              Property 'description' =
                Description            = 'Description of the provisioner.
                '
                Title                  = 'Description'
                Type                   = 'string'
                TypeName               = 'Description'
                SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items/properties/description'
              Property 'method' =
                Description            = 'Method to indicate the desired action to be performed for a given resource.
                '
                Enum                   = '[POST PUT DELETE PATCH]'
                Title                  = 'Method'
                Type                   = 'string'
                TypeName               = 'Method'
                SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items/properties/method'
              Property 'name' =
                Description            = 'Short names for things like logging/error messages.
                '
                Title                  = 'Name'
                Type                   = 'string'
                TypeName               = 'Name'
                SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items/properties/name'
              Property 'title' =
                Description            = 'Appropriate title for any sort of Modal prompt.
                '
                Title                  = 'Title'
                Type HAS NOT BEEN SET!!!
                TypeName               = 'Title'
                SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items/properties/title'
              Property 'url' =
                Description            = 'When an action is triggered, a request is made using the `url` and `method`.
                Depending on the `context`, the following parameters will be substituted in the url:
                
                | `context`   | Path parameters                                          |
                |-------------|----------------------------------------------------------|
                | provisioner | <provisionerId>                                          |
                | worker-type | <provisionerId>, <workerType>                            |
                | worker      | <provisionerId>, <workerType>, <workerGroup>, <workerId> |
                
                _Note: The request needs to be signed with the user's Taskcluster credentials._
                '
                Title                  = 'URL'
                Type                   = 'string'
                TypeName               = 'URL'
                SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items/properties/url'
            Required               = '[name title context url method description]'
            Title                  = 'Actions'
            Type                   = 'object'
            TypeName               = 'Actions1'
            SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions/items'
          Type                   = 'array'
          TypeName               = 'Actions'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/actions'
        Property 'description' =
          Description            = 'Description of the provisioner.
          '
          Title                  = 'Description'
          Type                   = 'string'
          TypeName               = 'Description'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/description'
        Property 'expires' =
          Description            = 'Date and time after which the provisioner created will be automatically
          deleted by the queue.
          '
          Format                 = 'date-time'
          Title                  = 'Provisioner Expiration'
          Type                   = 'string'
          TypeName               = 'ProvisionerExpiration'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/expires'
        Property 'lastDateActive' =
          Description            = 'Date and time where the provisioner was last seen active
          '
          Format                 = 'date-time'
          Title                  = 'Provisioner Last Date Active'
          Type                   = 'string'
          TypeName               = 'ProvisionerLastDateActive'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/lastDateActive'
        Property 'provisionerId' =
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Provisioner ID'
          Type                   = 'string'
          TypeName               = 'ProvisionerID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/provisionerId'
        Property 'stability' =
          Description            = 'This is the stability of the provisioner. Accepted values:
           * `experimental`
           * `stable`
           * `deprecated`
          '
          Enum                   = '[experimental stable deprecated]'
          Title                  = 'Stability'
          Type                   = 'string'
          TypeName               = 'Stability'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items/properties/stability'
      Required               = '[provisionerId description stability expires lastDateActive actions]'
      Title                  = 'Provisioner Information'
      Type                   = 'object'
      TypeName               = 'ProvisionerInformation'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners/items'
    Type                   = 'array'
    TypeName               = 'Provisioners'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#/properties/provisioners'
Required               = '[provisioners]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Provisioners Response'
Type                   = 'object'
TypeName               = 'ListProvisionersResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-provisioners-response.json#'


http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Response from a `listTaskGroup` request.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of tasks in the task-group.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called `listTaskGroup` with `continuationToken`
    until you get a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/continuationToken'
  Property 'taskGroupId' =
    Description            = 'Identifier for the task-group being listed.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/taskGroupId'
  Property 'tasks' =
    Description            = 'List of tasks in this task-group.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Task Definition and task status structure.
      '
      Properties
        Property 'status' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
          TypeName               = 'Status'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/tasks/items/properties/status'
        Property 'task' =
          Ref                    = 'http://schemas.taskcluster.net/queue/v1/task.json#'
          TypeName               = 'Task'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/tasks/items/properties/task'
      Required               = '[task status]'
      Title                  = 'Task definition and status'
      Type                   = 'object'
      TypeName               = 'TaskDefinitionAndStatus'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/tasks/items'
    Title                  = 'Tasks from the Task-Group'
    Type                   = 'array'
    TypeName               = 'TasksFromTheTaskGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#/properties/tasks'
Required               = '[taskGroupId tasks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Task-Group Response'
Type                   = 'object'
TypeName               = 'ListTaskGroupResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-task-group-response.json#'


http://schemas.taskcluster.net/queue/v1/list-workers-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Response from a `listWorkers` request.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of workers in the worker-type.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called `listWorkerTypes` with `continuationToken`
    until you get a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/continuationToken'
  Property 'workers' =
    Description            = 'List of workers in this worker-type.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'firstClaim' =
          Description            = 'Date of the first time this worker claimed a task.
          '
          Format                 = 'date-time'
          Title                  = 'First task claimed'
          Type                   = 'string'
          TypeName               = 'FirstTaskClaimed'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/firstClaim'
        Property 'latestTask' =
          Additional Properties  = 'false'
          Description            = 'The most recent claimed task
          '
          Properties
            Property 'runId' =
              Description            = 'Id of this task run, `run-id`s always starts from `0`
              '
              Maximum                = '1000'
              Minimum                = '0'
              Title                  = 'Run Identifier'
              Type                   = 'integer'
              TypeName               = 'RunIdentifier'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/latestTask/properties/runId'
            Property 'taskId' =
              Description            = 'Unique task identifier, this is UUID encoded as
              [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
              stripped of `=` padding.
              '
              Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
              Title                  = 'Task Identifier'
              Type                   = 'string'
              TypeName               = 'TaskIdentifier'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/latestTask/properties/taskId'
          Required               = '[taskId runId]'
          Title                  = 'Most Recent Task'
          Type                   = 'object'
          TypeName               = 'MostRecentTask'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/latestTask'
        Property 'quarantineUntil' =
          Description            = 'Quarantining a worker allows the machine to remain alive but not accept jobs.
          Once the quarantineUntil time has elapsed, the worker resumes accepting jobs.
          Note that a quarantine can be lifted by setting `quarantineUntil` to the present time (or
          somewhere in the past).
          '
          Format                 = 'date-time'
          Title                  = 'Worker Quarantine'
          Type                   = 'string'
          TypeName               = 'WorkerQuarantine'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/quarantineUntil'
        Property 'workerGroup' =
          Description            = 'Identifier for the worker group containing this worker.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Type                   = 'string'
          TypeName               = 'WorkerGroup'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/workerGroup'
        Property 'workerId' =
          Description            = 'Identifier for this worker (unique within this worker group).
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Type                   = 'string'
          TypeName               = 'WorkerID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items/properties/workerId'
      Required               = '[workerGroup workerId firstClaim]'
      Type                   = 'object'
      TypeName               = 'WorkersEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers/items'
    Title                  = 'Workers from a WorkerType'
    Type                   = 'array'
    TypeName               = 'WorkersFromAWorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#/properties/workers'
Required               = '[workers]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Workers Response'
Type                   = 'object'
TypeName               = 'ListWorkersResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workers-response.json#'


http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Response from a `listWorkerTypes` request.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of worker-types in the provisioner.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called `listWorkerTypes` with `continuationToken`
    until you get a result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/continuationToken'
  Property 'workerTypes' =
    Description            = 'List of worker-types in this provisioner.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'description' =
          Description            = 'Description of the worker-type.
          '
          Title                  = 'Description'
          Type                   = 'string'
          TypeName               = 'Description'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items/properties/description'
        Property 'expires' =
          Description            = 'Date and time after which the worker-type will be automatically
          deleted by the queue.
          '
          Format                 = 'date-time'
          Title                  = 'Worker-type Expiration'
          Type                   = 'string'
          TypeName               = 'WorkerTypeExpiration'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items/properties/expires'
        Property 'lastDateActive' =
          Description            = 'Date and time where the worker-type was last seen active
          '
          Format                 = 'date-time'
          Title                  = 'Worker-type Last Date Active'
          Type                   = 'string'
          TypeName               = 'WorkerTypeLastDateActive'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items/properties/lastDateActive'
        Property 'provisionerId' =
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Provisioner ID'
          Type                   = 'string'
          TypeName               = 'ProvisionerID'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items/properties/provisionerId'
        Property 'stability' =
          Description            = 'This is the stability of the worker-type. Accepted values:
           * `experimental`
           * `stable`
           * `deprecated`
          '
          Enum                   = '[experimental stable deprecated]'
          Title                  = 'Stability'
          Type                   = 'string'
          TypeName               = 'Stability'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items/properties/stability'
        Property 'workerType' =
          Description            = 'WorkerType name.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'WorkerType name'
          Type                   = 'string'
          TypeName               = 'WorkerTypeName'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items/properties/workerType'
      Type                   = 'object'
      TypeName               = 'WorkerTypesEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes/items'
    Title                  = 'WorkerTypes from the Provisioner'
    Type                   = 'array'
    TypeName               = 'WorkerTypesFromTheProvisioner'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#/properties/workerTypes'
Required               = '[workerTypes]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'List Worker-Types Response'
Type                   = 'object'
TypeName               = 'ListWorkerTypesResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/list-workertypes-response.json#'


http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for the number of pending tasks for a given
`provisionerId` and `workerType`.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#'
Properties
  Property 'pendingTasks' =
    Description            = 'An approximate number of pending tasks for the given `provisionerId` and
    `workerType`. This is based on Azure Queue Storage meta-data API, thus,
    number of reported here may be higher than actual number of pending tasks.
    But there cannot be more pending tasks reported here. Ie. this is an
    **upper-bound** on the number of pending tasks.
    '
    Minimum                = '0'
    Title                  = 'Number of Pending Tasks'
    Type                   = 'integer'
    TypeName               = 'NumberOfPendingTasks'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#/properties/pendingTasks'
  Property 'provisionerId' =
    Description            = 'Unique identifier for the provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#/properties/provisionerId'
  Property 'workerType' =
    Description            = 'Identifier for worker type within the specified provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#/properties/workerType'
Required               = '[provisionerId workerType pendingTasks]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Count Pending Tasks Response'
Type                   = 'object'
TypeName               = 'CountPendingTasksResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/pending-tasks-response.json#'


http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'Response to request for poll task urls.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#'
Properties
  Property 'expires' =
    Description            = 'Date and time after which the signed URLs provided in this response
    expires and not longer works for authentication.
    '
    Format                 = 'date-time'
    Title                  = 'Signed URL Expiration'
    Type                   = 'string'
    TypeName               = 'SignedURLExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/expires'
  Property 'queues' =
    Description            = 'List of signed URLs for queues to poll tasks from, they must be called
    in the order they are given. As the first entry in this array **may**
    have higher priority.
    '
    Items
      Additional Properties  = 'false'
      Description            = 'Object holding two signed URLs for an azure queue, one for fetching
      messages, and another for deleting messages. Remember to `claimTask`
      before deleting the message, and delete message even if the `claimTask`
      operation fails with a 400 status code. Don't delete it on other status
      codes!
      '
      Properties
        Property 'signedDeleteUrl' =
          Description            = 'Signed URL to delete messages that have been received using the
          `signedPollUrl`. You **must** do this to avoid receiving the same
          message again.
          To use this URL you must substitute `{{messageId}}` and
          `{{popReceipt}}` with `MessageId` and `PopReceipt` from the XML
          response the `signedPollUrl` gave you. It is important that you
          `encodeURIComponent` both `MessageId` and `PopReceipt` prior to
          substitution, otherwise you will experience intermittent failures!
          Note this URL only works with `DELETE` request.
          '
          Pattern                = '^https://'
          Title                  = 'Signed Delete Message URL'
          Type                   = 'string'
          TypeName               = 'SignedDeleteMessageURL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues/items/properties/signedDeleteUrl'
        Property 'signedPollUrl' =
          Description            = 'Signed URL to get message from the Azure Queue Storage queue,
          that holds messages for the given `provisionerId` and `workerType`.
          Note that this URL returns XML, see documentation for the Azure
          Queue Storage
          [REST API](http://msdn.microsoft.com/en-us/library/azure/dd179474.aspx)
          for details.
          When you have a message you can use `claimTask` to claim the task.
          You will need to parse the XML response and base64 decode and
          JSON parse the `MessageText`.
          After you have called `claimTask` you **must** us the
          `signedDeleteUrl` to delete the message.
          **Remark**, you are allowed to append `&numofmessages=N`,
          where N < 32, to the URLs if you wish to obtain more than one
          message at the time.
          '
          Format                 = 'uri'
          Title                  = 'Signed Get Message URL'
          Type                   = 'string'
          TypeName               = 'SignedGetMessageURL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues/items/properties/signedPollUrl'
      Required               = '[signedPollUrl signedDeleteUrl]'
      Title                  = 'Signed URLs for a queue'
      Type                   = 'object'
      TypeName               = 'SignedURLsForAQueue'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues/items'
    Title                  = 'Queues To Poll From'
    Type                   = 'array'
    TypeName               = 'QueuesToPollFrom'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#/properties/queues'
Required               = '[queues expires]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Poll Task Urls Response'
Type                   = 'object'
TypeName               = 'PollTaskUrlsResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/poll-task-urls-response.json#'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#
===================================================================
Description            = 'Request a authorization to put and artifact or posting of a URL as an artifact. Note that the `storageType` property is referenced in the response as well.'
ID                     = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#'
OneOf
  Item '0' =
    Additional Properties  = 'false'
    Description            = 'Request a list of requests in a generalized format which can be run to
    upload an artifact to storage managed by the queue.
    '
    Properties
      Property 'contentEncoding' =
        Description            = 'Optionally provide an encoding type which should be set as the HTTP
        Content-Encoding header for this artifact.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentEncoding'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentEncoding'
      Property 'contentLength' =
        Description            = 'The number of bytes of the entire artifact.  This must be the number
        of bytes in the file to be uploaded.  For single part uploads, the
        upload will fail if the number of bytes uploaded does not match this
        value.  A single part upload (e.g. no parts list) may be at most 5GB.
        This limit is enforced in the code because it is not possible to
        represent all of the restrictions in a json-schema.  A multipart
        upload may be at most 5TB, with each part other than the last being
        between 5MB and 5GB in size.
        '
        Minimum                = '0'
        Type                   = 'integer'
        TypeName               = 'ContentLength'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentLength'
      Property 'contentSha256' =
        Description            = 'The complete SHA256 value of the entire artifact.  This must be the
        SHA256 of the file which is to be uploaded.  For single part uploads,
        the upload will fail if the SHA256 value of what is uploaded does not
        match this value
        '
        Pattern                = '^[a-fA-F0-9]{64}$'
        Type                   = 'string'
        TypeName               = 'ContentSha256'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentSha256'
      Property 'contentType' =
        Description            = 'Artifact mime-type, when uploading artifact to the signed
        `PUT` URL returned from this request this must given with the
         `ContentType` header. Please, provide correct mime-type,
         this make tooling a lot easier, specifically,
         always using `application/json` for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the artifact should be deleted. Note, that
        these will be collected over time, and artifacts may remain
        available after expiration. S3 based artifacts are identified in
        azure table storage and explicitly deleted on S3 after expiration.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/expires'
      Property 'parts' =
        Description            = 'A list of parts for a multipart upload.  The presence of this list is
        how a multipart upload is differentiated from a single part upload.
        The items in this list represent individual parts for upload.  For a
        multipart upload, the sha256 values provided here must match the
        sha256 value that S3 internally computes for the upload to be
        considered a success.  The overall sha256 value is not checked
        explicitly because the S3 API does not allow for that, but the same
        code that is responsible for generating the parts hashes would also
        be generating the overall hash, which makes this less of a concern.
        The worst case is that we have artifacts which incorrectly do not
        validate, which is not as big of a security concern.
        '
        Items
          Additional Properties  = 'false'
          Properties
            Property 'sha256' =
              Description            = 'The sha256 hash of the part.
              '
              MaxLength              = '64'
              MinLength              = '64'
              Pattern                = '^[a-fA-F0-9]{64}$'
              Type                   = 'string'
              TypeName               = 'Sha256'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts/items/properties/sha256'
            Property 'size' =
              Description            = 'The number of bytes in this part.  Keep in mind for S3 that
              all but the last part must be minimum 5MB and the maximum for
              a single part is 5GB.  The overall size may not exceed 5TB
              '
              Minimum                = '0'
              Type                   = 'integer'
              TypeName               = 'Size'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts/items/properties/size'
          Type                   = 'object'
          TypeName               = 'PartsEntry'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts/items'
        MinLength              = '1'
        Type                   = 'array'
        TypeName               = 'Parts'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `'blob'`'
        Enum                   = '[blob]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/storageType'
      Property 'transferLength' =
        Description            = 'The number of bytes transfered across the wire to the backing
        datastore.  If specified, it represents the post-content-encoding
        byte count
        '
        Minimum                = '0'
        Type                   = 'integer'
        TypeName               = 'TransferLength'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/transferLength'
      Property 'transferSha256' =
        Description            = 'This is the sha256 of the bytes transfered across the wire to the
        backing datastore.  If specified, it represents the
        post-content-encoding sha256 value
        '
        Pattern                = '^[a-fA-F0-9]{64}$'
        Type                   = 'string'
        TypeName               = 'TransferSha256'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/transferSha256'
    Required               = '[storageType expires contentType contentSha256 contentLength]'
    Title                  = 'Blob Artifact Request'
    Type                   = 'object'
    TypeName               = 'BlobArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]'
  Item '1' =
    Additional Properties  = 'false'
    Description            = 'Request for a signed PUT URL that will allow you to upload an artifact
    to an S3 bucket managed by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, when uploading artifact to the signed
        `PUT` URL returned from this request this must given with the
         `ContentType` header. Please, provide correct mime-type,
         this make tooling a lot easier, specifically,
         always using `application/json` for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the artifact should be deleted. Note, that
        these will be collected over time, and artifacts may remain
        available after expiration. S3 based artifacts are identified in
        azure table storage and explicitly deleted on S3 after expiration.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/expires'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `'s3'`
        '
        Enum                   = '[s3]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/storageType'
    Required               = '[storageType expires contentType]'
    Title                  = 'S3 Artifact Request'
    Type                   = 'object'
    TypeName               = 'S3ArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]'
  Item '2' =
    Additional Properties  = 'false'
    Description            = 'Request for an Azure Shared Access Signature (SAS) that will allow
    you to upload an artifact to an Azure blob storage container managed
    by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, when uploading artifact please use the same
        `Content-Type`, consistently using the correct mime-type make
        tooling a lot easier, specifically, always using `application/json`
        for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the artifact should be deleted.
        Note, that these will be collected over time, and artifacts may
        remain available after expiration. Azure based artifacts are
        identified in azure table storage and explicitly deleted in the
        azure storage container after expiration.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/expires'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `azure`
        '
        Enum                   = '[azure]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/storageType'
    Required               = '[storageType expires contentType]'
    Title                  = 'Azure Artifact Request'
    Type                   = 'object'
    TypeName               = 'AzureArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]'
  Item '3' =
    Additional Properties  = 'false'
    Description            = 'Request the queue to redirect to a URL for a given artifact.
    This allows you to reference artifacts that aren't managed by the queue.
    The queue will still authenticate the request, so depending on the level
    of secrecy required, secret URLs **might** work. Note, this is mainly
    useful for public artifacts, for example temporary files directly
    stored on the worker host and only available there for a specific
    amount of time.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type for the resource to which the queue should
        redirect. Please use the same `Content-Type`, consistently using
        the correct mime-type make tooling a lot easier, specifically,
        always using `application/json` for JSON artifacts.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the queue should no longer redirect to this URL.
        Note, that the queue will and cannot delete the resource your URL
        references, you are responsible for doing that yourself.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/expires'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `reference`
        '
        Enum                   = '[reference]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/storageType'
      Property 'url' =
        Description            = 'URL to which the queue should redirect using a `303` (See other)
        redirect.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'URL'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/url'
    Required               = '[storageType expires url contentType]'
    Title                  = 'Redirect Artifact Request'
    Type                   = 'object'
    TypeName               = 'RedirectArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]'
  Item '4' =
    Additional Properties  = 'false'
    Description            = 'Request the queue to reply `403` (forbidden) with `reason` and `message`
    to any `GET` request for this artifact. This is mainly useful as a way
    for a task to declare that it failed to provide an artifact it wanted
    to upload.
    '
    Properties
      Property 'expires' =
        Description            = 'Date-time after which the queue should stop replying with the error
        and forget about the artifact.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/expires'
      Property 'message' =
        Description            = 'Human readable explanation of why the artifact is missing
        '
        MaxLength              = '4096'
        Type                   = 'string'
        TypeName               = 'Message'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/message'
      Property 'reason' =
        Description            = 'Reason why the artifact doesn't exist.
        '
        Enum                   = '[file-missing-on-worker invalid-resource-on-worker too-large-file-on-worker]'
        Type                   = 'string'
        TypeName               = 'Reason'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/reason'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `error`
        '
        Enum                   = '[error]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/storageType'
    Required               = '[storageType expires reason message]'
    Title                  = 'Error Artifact Request'
    Type                   = 'object'
    TypeName               = 'ErrorArtifactRequest'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Post Artifact Request'
Type HAS NOT BEEN SET!!!
TypeName               = 'PostArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]
============================================================================
Additional Properties  = 'false'
Description            = 'Request a list of requests in a generalized format which can be run to
upload an artifact to storage managed by the queue.
'
Properties
  Property 'contentEncoding' =
    Description            = 'Optionally provide an encoding type which should be set as the HTTP
    Content-Encoding header for this artifact.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentEncoding'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentEncoding'
  Property 'contentLength' =
    Description            = 'The number of bytes of the entire artifact.  This must be the number
    of bytes in the file to be uploaded.  For single part uploads, the
    upload will fail if the number of bytes uploaded does not match this
    value.  A single part upload (e.g. no parts list) may be at most 5GB.
    This limit is enforced in the code because it is not possible to
    represent all of the restrictions in a json-schema.  A multipart
    upload may be at most 5TB, with each part other than the last being
    between 5MB and 5GB in size.
    '
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'ContentLength'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentLength'
  Property 'contentSha256' =
    Description            = 'The complete SHA256 value of the entire artifact.  This must be the
    SHA256 of the file which is to be uploaded.  For single part uploads,
    the upload will fail if the SHA256 value of what is uploaded does not
    match this value
    '
    Pattern                = '^[a-fA-F0-9]{64}$'
    Type                   = 'string'
    TypeName               = 'ContentSha256'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentSha256'
  Property 'contentType' =
    Description            = 'Artifact mime-type, when uploading artifact to the signed
    `PUT` URL returned from this request this must given with the
     `ContentType` header. Please, provide correct mime-type,
     this make tooling a lot easier, specifically,
     always using `application/json` for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the artifact should be deleted. Note, that
    these will be collected over time, and artifacts may remain
    available after expiration. S3 based artifacts are identified in
    azure table storage and explicitly deleted on S3 after expiration.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/expires'
  Property 'parts' =
    Description            = 'A list of parts for a multipart upload.  The presence of this list is
    how a multipart upload is differentiated from a single part upload.
    The items in this list represent individual parts for upload.  For a
    multipart upload, the sha256 values provided here must match the
    sha256 value that S3 internally computes for the upload to be
    considered a success.  The overall sha256 value is not checked
    explicitly because the S3 API does not allow for that, but the same
    code that is responsible for generating the parts hashes would also
    be generating the overall hash, which makes this less of a concern.
    The worst case is that we have artifacts which incorrectly do not
    validate, which is not as big of a security concern.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'sha256' =
          Description            = 'The sha256 hash of the part.
          '
          MaxLength              = '64'
          MinLength              = '64'
          Pattern                = '^[a-fA-F0-9]{64}$'
          Type                   = 'string'
          TypeName               = 'Sha256'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts/items/properties/sha256'
        Property 'size' =
          Description            = 'The number of bytes in this part.  Keep in mind for S3 that
          all but the last part must be minimum 5MB and the maximum for
          a single part is 5GB.  The overall size may not exceed 5TB
          '
          Minimum                = '0'
          Type                   = 'integer'
          TypeName               = 'Size'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts/items/properties/size'
      Type                   = 'object'
      TypeName               = 'PartsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts/items'
    MinLength              = '1'
    Type                   = 'array'
    TypeName               = 'Parts'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/parts'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `'blob'`'
    Enum                   = '[blob]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/storageType'
  Property 'transferLength' =
    Description            = 'The number of bytes transfered across the wire to the backing
    datastore.  If specified, it represents the post-content-encoding
    byte count
    '
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'TransferLength'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/transferLength'
  Property 'transferSha256' =
    Description            = 'This is the sha256 of the bytes transfered across the wire to the
    backing datastore.  If specified, it represents the
    post-content-encoding sha256 value
    '
    Pattern                = '^[a-fA-F0-9]{64}$'
    Type                   = 'string'
    TypeName               = 'TransferSha256'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]/properties/transferSha256'
Required               = '[storageType expires contentType contentSha256 contentLength]'
Title                  = 'Blob Artifact Request'
Type                   = 'object'
TypeName               = 'BlobArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[0]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]
============================================================================
Additional Properties  = 'false'
Description            = 'Request for a signed PUT URL that will allow you to upload an artifact
to an S3 bucket managed by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, when uploading artifact to the signed
    `PUT` URL returned from this request this must given with the
     `ContentType` header. Please, provide correct mime-type,
     this make tooling a lot easier, specifically,
     always using `application/json` for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the artifact should be deleted. Note, that
    these will be collected over time, and artifacts may remain
    available after expiration. S3 based artifacts are identified in
    azure table storage and explicitly deleted on S3 after expiration.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/expires'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `'s3'`
    '
    Enum                   = '[s3]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]/properties/storageType'
Required               = '[storageType expires contentType]'
Title                  = 'S3 Artifact Request'
Type                   = 'object'
TypeName               = 'S3ArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[1]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]
============================================================================
Additional Properties  = 'false'
Description            = 'Request for an Azure Shared Access Signature (SAS) that will allow
you to upload an artifact to an Azure blob storage container managed
by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, when uploading artifact please use the same
    `Content-Type`, consistently using the correct mime-type make
    tooling a lot easier, specifically, always using `application/json`
    for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the artifact should be deleted.
    Note, that these will be collected over time, and artifacts may
    remain available after expiration. Azure based artifacts are
    identified in azure table storage and explicitly deleted in the
    azure storage container after expiration.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/expires'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `azure`
    '
    Enum                   = '[azure]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]/properties/storageType'
Required               = '[storageType expires contentType]'
Title                  = 'Azure Artifact Request'
Type                   = 'object'
TypeName               = 'AzureArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[2]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]
============================================================================
Additional Properties  = 'false'
Description            = 'Request the queue to redirect to a URL for a given artifact.
This allows you to reference artifacts that aren't managed by the queue.
The queue will still authenticate the request, so depending on the level
of secrecy required, secret URLs **might** work. Note, this is mainly
useful for public artifacts, for example temporary files directly
stored on the worker host and only available there for a specific
amount of time.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type for the resource to which the queue should
    redirect. Please use the same `Content-Type`, consistently using
    the correct mime-type make tooling a lot easier, specifically,
    always using `application/json` for JSON artifacts.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the queue should no longer redirect to this URL.
    Note, that the queue will and cannot delete the resource your URL
    references, you are responsible for doing that yourself.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/expires'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `reference`
    '
    Enum                   = '[reference]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/storageType'
  Property 'url' =
    Description            = 'URL to which the queue should redirect using a `303` (See other)
    redirect.
    '
    Format                 = 'uri'
    Type                   = 'string'
    TypeName               = 'URL'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]/properties/url'
Required               = '[storageType expires url contentType]'
Title                  = 'Redirect Artifact Request'
Type                   = 'object'
TypeName               = 'RedirectArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[3]'


http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]
============================================================================
Additional Properties  = 'false'
Description            = 'Request the queue to reply `403` (forbidden) with `reason` and `message`
to any `GET` request for this artifact. This is mainly useful as a way
for a task to declare that it failed to provide an artifact it wanted
to upload.
'
Properties
  Property 'expires' =
    Description            = 'Date-time after which the queue should stop replying with the error
    and forget about the artifact.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/expires'
  Property 'message' =
    Description            = 'Human readable explanation of why the artifact is missing
    '
    MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = 'Message'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/message'
  Property 'reason' =
    Description            = 'Reason why the artifact doesn't exist.
    '
    Enum                   = '[file-missing-on-worker invalid-resource-on-worker too-large-file-on-worker]'
    Type                   = 'string'
    TypeName               = 'Reason'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/reason'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `error`
    '
    Enum                   = '[error]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]/properties/storageType'
Required               = '[storageType expires reason message]'
Title                  = 'Error Artifact Request'
Type                   = 'object'
TypeName               = 'ErrorArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-request.json#/oneOf[4]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#
====================================================================
Description            = 'Response to a request for posting an artifact.
Note that the `storageType` property is referenced in the request as well.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#'
OneOf
  Item '0' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for creating a new blob artifact
    '
    Properties
      Property 'expires' =
        Description            = 'Date-time after which the signed `requests` no longer work
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/expires'
      Property 'requests' =
        Description            = 'A list of generalized HTTP requests which must be run to upload the
        artifact.
        '
        Items
          Properties
            Property 'headers' =
              Additional Properties  = 'Type                   = 'string'
              TypeName               = ''
              SourceURL              = ''
              '
              Description            = 'Headers of request'
              Type                   = 'object'
              TypeName               = 'Headers'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items/properties/headers'
            Property 'method' =
              Description            = 'HTTP 1.1 method of request'
              Enum                   = '[GET POST PUT DELETE OPTIONS HEAD PATCH]'
              Type                   = 'string'
              TypeName               = 'Method'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items/properties/method'
            Property 'url' =
              Description            = 'URL of request'
              Type                   = 'string'
              TypeName               = 'URL'
              SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items/properties/url'
          Type                   = 'object'
          TypeName               = 'RequestsEntry'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items'
        Type                   = 'array'
        TypeName               = 'Requests'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `'blob'`
        '
        Enum                   = '[blob]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/storageType'
    Required               = '[requests storageType expires]'
    Title                  = 'Blob Artifact Response'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'BlobArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]'
  Item '1' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for a signed PUT URL that will allow you to
    upload an artifact to an S3 bucket managed by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, must be specified as header when uploading with
        the signed `putUrl`.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which the signed `putUrl` no longer works
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/expires'
      Property 'putUrl' =
        Description            = 'URL to which a `PUT` request can be made to upload the artifact
        requested. Note, the `Content-Length` must be specified correctly,
        and the `ContentType` header must be set the value specified below.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'PutURL'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/putUrl'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `'s3'`
        '
        Enum                   = '[s3]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/storageType'
    Required               = '[storageType putUrl expires contentType]'
    Title                  = 'S3 Artifact Response'
    Type                   = 'object'
    TypeName               = 'S3ArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]'
  Item '2' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for an Azure Shared Access Signature (SAS)
    that will allow you to upload an artifact to an Azure blob storage
    container managed by the queue.
    '
    Properties
      Property 'contentType' =
        Description            = 'Artifact mime-type, should be specified with the
        `x-ms-blob-content-type` when committing the block.
        '
        MaxLength              = '255'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/contentType'
      Property 'expires' =
        Description            = 'Date-time after which Shared Access Signature (SAS) will
        seize to work.
        '
        Format                 = 'date-time'
        Type                   = 'string'
        TypeName               = 'Expires'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/expires'
      Property 'putUrl' =
        Description            = 'Shared Access Signature (SAS) with write permissions, see
        [Azure REST API]
        (http://msdn.microsoft.com/en-US/library/azure/dn140256.aspx)
        reference for details on how to use this.
        '
        Format                 = 'uri'
        Type                   = 'string'
        TypeName               = 'PutURL'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/putUrl'
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `azure`
        '
        Enum                   = '[azure]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/storageType'
    Required               = '[storageType expires contentType putUrl]'
    Title                  = 'Azure Artifact Response'
    Type                   = 'object'
    TypeName               = 'AzureArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]'
  Item '3' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for the queue to redirect to a URL for a given
    artifact.
    '
    Properties
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `reference`
        '
        Enum                   = '[reference]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]/properties/storageType'
    Required               = '[storageType]'
    Title                  = 'Redirect Artifact Response'
    Type                   = 'object'
    TypeName               = 'RedirectArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]'
  Item '4' =
    Additional Properties  = 'false'
    Description            = 'Response to a request for the queue to reply `403` (forbidden) with
    `reason` and `message` to any `GET` request for this artifact.
    '
    Properties
      Property 'storageType' =
        Description            = 'Artifact storage type, in this case `error`
        '
        Enum                   = '[error]'
        Type                   = 'string'
        TypeName               = 'StorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[4]/properties/storageType'
    Required               = '[storageType]'
    Title                  = 'Error Artifact Response'
    Type                   = 'object'
    TypeName               = 'ErrorArtifactResponse'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[4]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Post Artifact Response'
Type HAS NOT BEEN SET!!!
TypeName               = 'PostArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for creating a new blob artifact
'
Properties
  Property 'expires' =
    Description            = 'Date-time after which the signed `requests` no longer work
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/expires'
  Property 'requests' =
    Description            = 'A list of generalized HTTP requests which must be run to upload the
    artifact.
    '
    Items
      Properties
        Property 'headers' =
          Additional Properties  = 'Type                   = 'string'
          TypeName               = ''
          SourceURL              = ''
          '
          Description            = 'Headers of request'
          Type                   = 'object'
          TypeName               = 'Headers'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items/properties/headers'
        Property 'method' =
          Description            = 'HTTP 1.1 method of request'
          Enum                   = '[GET POST PUT DELETE OPTIONS HEAD PATCH]'
          Type                   = 'string'
          TypeName               = 'Method'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items/properties/method'
        Property 'url' =
          Description            = 'URL of request'
          Type                   = 'string'
          TypeName               = 'URL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items/properties/url'
      Type                   = 'object'
      TypeName               = 'RequestsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests/items'
    Type                   = 'array'
    TypeName               = 'Requests'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/requests'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `'blob'`
    '
    Enum                   = '[blob]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]/properties/storageType'
Required               = '[requests storageType expires]'
Title                  = 'Blob Artifact Response'
Type HAS NOT BEEN SET!!!
TypeName               = 'BlobArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[0]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for a signed PUT URL that will allow you to
upload an artifact to an S3 bucket managed by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, must be specified as header when uploading with
    the signed `putUrl`.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which the signed `putUrl` no longer works
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/expires'
  Property 'putUrl' =
    Description            = 'URL to which a `PUT` request can be made to upload the artifact
    requested. Note, the `Content-Length` must be specified correctly,
    and the `ContentType` header must be set the value specified below.
    '
    Format                 = 'uri'
    Type                   = 'string'
    TypeName               = 'PutURL'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/putUrl'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `'s3'`
    '
    Enum                   = '[s3]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]/properties/storageType'
Required               = '[storageType putUrl expires contentType]'
Title                  = 'S3 Artifact Response'
Type                   = 'object'
TypeName               = 'S3ArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[1]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for an Azure Shared Access Signature (SAS)
that will allow you to upload an artifact to an Azure blob storage
container managed by the queue.
'
Properties
  Property 'contentType' =
    Description            = 'Artifact mime-type, should be specified with the
    `x-ms-blob-content-type` when committing the block.
    '
    MaxLength              = '255'
    Type                   = 'string'
    TypeName               = 'ContentType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/contentType'
  Property 'expires' =
    Description            = 'Date-time after which Shared Access Signature (SAS) will
    seize to work.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/expires'
  Property 'putUrl' =
    Description            = 'Shared Access Signature (SAS) with write permissions, see
    [Azure REST API]
    (http://msdn.microsoft.com/en-US/library/azure/dn140256.aspx)
    reference for details on how to use this.
    '
    Format                 = 'uri'
    Type                   = 'string'
    TypeName               = 'PutURL'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/putUrl'
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `azure`
    '
    Enum                   = '[azure]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]/properties/storageType'
Required               = '[storageType expires contentType putUrl]'
Title                  = 'Azure Artifact Response'
Type                   = 'object'
TypeName               = 'AzureArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[2]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for the queue to redirect to a URL for a given
artifact.
'
Properties
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `reference`
    '
    Enum                   = '[reference]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]/properties/storageType'
Required               = '[storageType]'
Title                  = 'Redirect Artifact Response'
Type                   = 'object'
TypeName               = 'RedirectArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[3]'


http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[4]
=============================================================================
Additional Properties  = 'false'
Description            = 'Response to a request for the queue to reply `403` (forbidden) with
`reason` and `message` to any `GET` request for this artifact.
'
Properties
  Property 'storageType' =
    Description            = 'Artifact storage type, in this case `error`
    '
    Enum                   = '[error]'
    Type                   = 'string'
    TypeName               = 'StorageType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[4]/properties/storageType'
Required               = '[storageType]'
Title                  = 'Error Artifact Response'
Type                   = 'object'
TypeName               = 'ErrorArtifactResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/post-artifact-response.json#/oneOf[4]'


http://schemas.taskcluster.net/queue/v1/provisioner-response.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Response containing information about a provisioner.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#'
Properties
  Property 'actions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Actions are defined on the provisioner and they are performed via a request using the `url` and `method`.
      Depending on the `context`, the `url` will be filled with parameters. In addition, `context` is
      used by the front-end to know where to display the action. For example, `context=worker`
      will display the action on the worker explorer.
      
      _Note: The request will be signed with the user's Taskcluster credentials._
      '
      Properties
        Property 'context' =
          Description            = 'Actions have a "context" that is one of provisioner, worker-type,
          or worker, indicating which it applies to. `context` is used by the front-end to know where to display the action.
          
          | `context`   | Page displayed        |
          |-------------|-----------------------|
          | provisioner | Provisioner Explorer  |
          | worker-type | Workers Explorer      |
          | worker      | Worker Explorer       |
          '
          Enum                   = '[provisioner worker-type worker]'
          Title                  = 'Context'
          Type                   = 'string'
          TypeName               = 'Context'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items/properties/context'
        Property 'description' =
          Description            = 'Description of the provisioner.
          '
          Title                  = 'Description'
          Type                   = 'string'
          TypeName               = 'Description'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items/properties/description'
        Property 'method' =
          Description            = 'Method to indicate the desired action to be performed for a given resource.
          '
          Enum                   = '[POST PUT DELETE PATCH]'
          Title                  = 'Method'
          Type                   = 'string'
          TypeName               = 'Method'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items/properties/method'
        Property 'name' =
          Description            = 'Short names for things like logging/error messages.
          '
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items/properties/name'
        Property 'title' =
          Description            = 'Appropriate title for any sort of Modal prompt.
          '
          Title                  = 'Title'
          Type HAS NOT BEEN SET!!!
          TypeName               = 'Title'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items/properties/title'
        Property 'url' =
          Description            = 'When an action is triggered, a request is made using the `url` and `method`.
          Depending on the `context`, the following parameters will be substituted in the url:
          
          | `context`   | Path parameters                                          |
          |-------------|----------------------------------------------------------|
          | provisioner | <provisionerId>                                          |
          | worker-type | <provisionerId>, <workerType>                            |
          | worker      | <provisionerId>, <workerType>, <workerGroup>, <workerId> |
          
          _Note: The request needs to be signed with the user's Taskcluster credentials._
          '
          Title                  = 'URL'
          Type                   = 'string'
          TypeName               = 'URL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items/properties/url'
      Required               = '[name title context url method description]'
      Title                  = 'Actions'
      Type                   = 'object'
      TypeName               = 'Actions1'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions/items'
    Type                   = 'array'
    TypeName               = 'Actions'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/actions'
  Property 'description' =
    Description            = 'Description of the provisioner.
    '
    Title                  = 'Description'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/description'
  Property 'expires' =
    Description            = 'Date and time after which the provisioner will be automatically
    deleted by the queue.
    '
    Format                 = 'date-time'
    Title                  = 'Provisioner Expiration'
    Type                   = 'string'
    TypeName               = 'ProvisionerExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/expires'
  Property 'lastDateActive' =
    Description            = 'Date of the last time this provisioner was seen active. `lastDateActive` is updated every 6 hours
    but may be off by up-to 6 hours. Nonetheless, `lastDateActive` is a good indicator
    of when the provisioner was last seen active.
    '
    Format                 = 'date-time'
    Title                  = 'Provisioner Last Date Active'
    Type                   = 'string'
    TypeName               = 'ProvisionerLastDateActive'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/lastDateActive'
  Property 'provisionerId' =
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner ID'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/provisionerId'
  Property 'stability' =
    Description            = 'This is the stability of the provisioner. Accepted values:
      * `experimental`
      * `stable`
      * `deprecated`
    '
    Enum                   = '[experimental stable deprecated]'
    Title                  = 'Stability'
    Type                   = 'string'
    TypeName               = 'Stability'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#/properties/stability'
Required               = '[provisionerId description actions stability expires lastDateActive]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Provisioner Response'
Type                   = 'object'
TypeName               = 'ProvisionerResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/provisioner-response.json#'


http://schemas.taskcluster.net/queue/v1/put-artifact-request.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Complete an aritifact'
ID                     = 'http://schemas.taskcluster.net/queue/v1/put-artifact-request.json#'
Properties
  Property 'etags' =
    Description            = 'A list of the etags given by the API of the blob storage provider.  This is an opaque
    string value provided by the API.
    '
    Items
      Type                   = 'string'
      TypeName               = 'EtagsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/put-artifact-request.json#/properties/etags/items'
    Type                   = 'array'
    TypeName               = 'Etags'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/put-artifact-request.json#/properties/etags'
Required               = '[etags]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Complete Artifact Request'
Type                   = 'object'
TypeName               = 'CompleteArtifactRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/put-artifact-request.json#'


http://schemas.taskcluster.net/queue/v1/quarantine-worker-request.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Request to update a worker's quarantineUntil property.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/quarantine-worker-request.json#'
Properties
  Property 'quarantineUntil' =
    Description            = 'Quarantining a worker allows the machine to remain alive but not accept jobs.
    Once the quarantineUntil time has elapsed, the worker resumes accepting jobs.
    Note that a quarantine can be lifted by setting `quarantineUntil` to the present time (or
    somewhere in the past).
    '
    Format                 = 'date-time'
    Title                  = 'Worker Quarantine'
    Type                   = 'string'
    TypeName               = 'WorkerQuarantine'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/quarantine-worker-request.json#/properties/quarantineUntil'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Quarantine Worker Request'
Type                   = 'object'
TypeName               = 'QuarantineWorkerRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/quarantine-worker-request.json#'


http://schemas.taskcluster.net/queue/v1/task-claim-request.json#
================================================================
Additional Properties  = 'false'
Description            = 'Request to claim (or reclaim) a task
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#'
Properties
  Property 'workerGroup' =
    Description            = 'Identifier for group that worker claiming the task is a part of.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for worker within the given workerGroup
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#/properties/workerId'
Required               = '[workerGroup workerId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Claim Request'
Type                   = 'object'
TypeName               = 'TaskClaimRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-request.json#'


http://schemas.taskcluster.net/queue/v1/task-claim-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Response to a successful task claim
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#'
Properties
  Property 'credentials' =
    Additional Properties  = 'false'
    Description            = 'Temporary credentials granting `task.scopes` and the scope:
    `queue:claim-task:<taskId>/<runId>` which allows the worker to reclaim
    the task, upload artifacts and report task resolution.
    
    The temporary credentials are set to expire after `takenUntil`. They
    won't expire exactly at `takenUntil` but shortly after, hence, requests
    coming close `takenUntil` won't have problems even if there is a little
    clock drift.
    
    Workers should use these credentials when making requests on behalf of
    a task. This includes requests to create artifacts, reclaiming the task
    reporting the task `completed`, `failed` or `exception`.
    
    Note, a new set of temporary credentials is issued when the worker
    reclaims the task.
    '
    Properties
      Property 'accessToken' =
        Description            = 'The `accessToken` for the temporary credentials.
        '
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Description            = 'The `certificate` for the temporary credentials, these are required
        for the temporary credentials to work.
        '
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Description            = 'The `clientId` for the temporary credentials.
        '
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken certificate]'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/credentials'
  Property 'runId' =
    Description            = '`run-id` assigned to this run of the task
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/status'
  Property 'takenUntil' =
    Description            = 'Time at which the run expires and is resolved as `exception`,
    with reason `claim-expired` if the run haven't been reclaimed.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TakenUntil'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/takenUntil'
  Property 'task' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task.json#'
    TypeName               = 'Task'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/task'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker executing this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#/properties/workerId'
Required               = '[status runId workerGroup workerId takenUntil task credentials]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Claim Response'
Type                   = 'object'
TypeName               = 'TaskClaimResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-claim-response.json#'


http://schemas.taskcluster.net/queue/v1/task-exception-request.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Request for a run of a task to be resolved with an exception
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#'
Properties
  Property 'reason' =
    Description            = 'Reason that the task is resolved with an exception. This is a subset
    of the values for `resolvedReason` given in the task status structure.
    **Report `worker-shutdown`** if the run failed because the worker
    had to shutdown (spot node disappearing). In case of `worker-shutdown`
    the queue will immediately **retry** the task, by making a new run.
    This is much faster than ignoreing the issue and letting the task _retry_
    by claim expiration. For any other _reason_ reported the queue will not
    retry the task.
    **Report `malformed-payload`** if the `task.payload` doesn't match the
    schema for the worker payload, or referenced resource doesn't exists.
    In either case, you should still log the error to a log file for the
    specific run.
    **Report `resource-unavailable`** if a resource/service needed or
    referenced in `task.payload` is _temporarily_ unavailable. Do not use this
    unless you know the resource exists, if the resource doesn't exist you
    should report `malformed-payload`. Example use-case if you contact the
    index (a service) on behalf of the task, because of a declaration in
    `task.payload`, and the service (index) is temporarily down. Don't use
    this if a URL returns 404, but if it returns 503 or hits a timeout when
    you retry the request, then this _may_ be a valid exception. The queue
    assumes that workers have applied retries as needed, and will not retry
     the task.
    **Report `internal-error`** if the worker experienced an unhandled internal
    error from which it couldn't recover. The queue will not retry runs
    resolved with this reason, but you are clearly signaling that this is a
    bug in the worker code.
    **Report `superseded`** if the task was determined to have been
    superseded by another task, and its results are no longer needed.  It is
    convention in this case to create an artifact entitled
    `public/superseded-by` containing the taskId of the task that superseded
    this one.
    **Report `intermittent-task`** if the task explicitly requested a retry
    because task is intermittent. Workers can choose whether or not to
    support this, but workers shouldn't blindly report this for every task
    that fails.
    '
    Enum                   = '[worker-shutdown malformed-payload resource-unavailable internal-error superseded intermittent-task]'
    Type                   = 'string'
    TypeName               = 'Reason'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#/properties/reason'
Required               = '[reason]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Exception Request'
Type                   = 'object'
TypeName               = 'TaskExceptionRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-request.json#'


http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Response to a successful task claim
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#'
Properties
  Property 'credentials' =
    Additional Properties  = 'false'
    Description            = 'Temporary credentials granting `task.scopes` and the scope:
    `queue:claim-task:<taskId>/<runId>` which allows the worker to reclaim
    the task, upload artifacts and report task resolution.
    
    The temporary credentials are set to expire after `takenUntil`. They
    won't expire exactly at `takenUntil` but shortly after, hence, requests
    coming close `takenUntil` won't have problems even if there is a little
    clock drift.
    
    Workers should use these credentials when making requests on behalf of
    a task. This includes requests to create artifacts, reclaiming the task
    reporting the task `completed`, `failed` or `exception`.
    
    Note, a new set of temporary credentials is issued when the worker
    reclaims the task.
    '
    Properties
      Property 'accessToken' =
        Description            = 'The `accessToken` for the temporary credentials.
        '
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'AccessToken'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials/properties/accessToken'
      Property 'certificate' =
        Description            = 'The `certificate` for the temporary credentials, these are required
        for the temporary credentials to work.
        '
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'Certificate'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials/properties/certificate'
      Property 'clientId' =
        Description            = 'The `clientId` for the temporary credentials.
        '
        MinLength              = '1'
        Type                   = 'string'
        TypeName               = 'ClientID'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials/properties/clientId'
    Required               = '[clientId accessToken certificate]'
    Type                   = 'object'
    TypeName               = 'Credentials'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/credentials'
  Property 'runId' =
    Description            = '`run-id` assigned to this run of the task
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/status'
  Property 'takenUntil' =
    Description            = 'Time at which the run expires and is resolved as `exception`,
    with reason `claim-expired` if the run haven't been reclaimed.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TakenUntil'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/takenUntil'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker executing this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#/properties/workerId'
Required               = '[status runId workerGroup workerId takenUntil credentials]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Reclaim Response'
Type                   = 'object'
TypeName               = 'TaskReclaimResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-reclaim-response.json#'


http://schemas.taskcluster.net/queue/v1/task-status-response.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Response to a task status request
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#/properties/status'
Required               = '[status]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Status Response'
Type                   = 'object'
TypeName               = 'TaskStatusResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status-response.json#'


http://schemas.taskcluster.net/queue/v1/task-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A representation of **task status** as known by the queue
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
Properties
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are
    resolved as **exception** if not resolved by other means
    before the deadline. Note, deadline cannot be more than
    5 days into the future
    '
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and
    status is deleted. Notice that all artifacts for the task
    must have an expiration that is no later than this.
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/expires'
  Property 'provisionerId' =
    Description            = 'Unique identifier for the provisioner that this task must be scheduled on
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/provisionerId'
  Property 'retriesLeft' =
    Description            = 'Number of retries left for the task in case of infrastructure issues
    '
    Maximum                = '999'
    Minimum                = '0'
    Title                  = 'Retries Left'
    Type                   = 'integer'
    TypeName               = 'RetriesLeft'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/retriesLeft'
  Property 'runs' =
    Description            = 'List of runs, ordered so that index `i` has `runId == i`
    '
    Items
      Additional Properties  = 'false'
      Description            = 'JSON object with information about a run
      '
      Properties
        Property 'reasonCreated' =
          Description            = 'Reason for the creation of this run,
          **more reasons may be added in the future**.
          '
          Enum                   = '[scheduled retry task-retry rerun exception]'
          Title                  = 'Reason Created'
          Type                   = 'string'
          TypeName               = 'ReasonCreated'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonCreated'
        Property 'reasonResolved' =
          Description            = 'Reason that run was resolved, this is mainly
          useful for runs resolved as `exception`.
          Note, **more reasons may be added in the future**, also this
          property is only available after the run is resolved. Some of these
          reasons, notably `intermittent-task`, `worker-shutdown`, and
          `claim-expired`, will trigger an automatic retry of the task.
          '
          Enum                   = '[completed failed deadline-exceeded canceled superseded claim-expired worker-shutdown malformed-payload resource-unavailable internal-error intermittent-task]'
          Title                  = 'Reason Resolved'
          Type                   = 'string'
          TypeName               = 'ReasonResolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonResolved'
        Property 'resolved' =
          Description            = 'Date-time at which this run was resolved, ie. when the run changed
          state from `running` to either `completed`, `failed` or `exception`.
          This property is only present after the run as been resolved.
          '
          Format                 = 'date-time'
          Title                  = 'Resolved'
          Type                   = 'string'
          TypeName               = 'Resolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/resolved'
        Property 'runId' =
          Description            = 'Id of this task run, `run-id`s always starts from `0`
          '
          Maximum                = '1000'
          Minimum                = '0'
          Title                  = 'Run Identifier'
          Type                   = 'integer'
          TypeName               = 'RunIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/runId'
        Property 'scheduled' =
          Description            = 'Date-time at which this run was scheduled, ie. when the run was
          created in state `pending`.
          '
          Format                 = 'date-time'
          Title                  = 'Scheduled'
          Type                   = 'string'
          TypeName               = 'Scheduled'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/scheduled'
        Property 'started' =
          Description            = 'Date-time at which this run was claimed, ie. when the run changed
          state from `pending` to `running`. This property is only present
          after the run has been claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Started'
          Type                   = 'string'
          TypeName               = 'Started'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/started'
        Property 'state' =
          Description            = 'State of this run
          '
          Enum                   = '[pending running completed failed exception]'
          Title                  = 'Run State'
          Type                   = 'string'
          TypeName               = 'RunState'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/state'
        Property 'takenUntil' =
          Description            = 'Time at which the run expires and is resolved as `failed`, if the
          run isn't reclaimed. Note, only present after the run has been
          claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Taken Until'
          Type                   = 'string'
          TypeName               = 'TakenUntil'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/takenUntil'
        Property 'workerGroup' =
          Description            = 'Identifier for group that worker who executes this run is a part of,
          this identifier is mainly used for efficient routing.
          Note, this property is only present after the run is claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Group'
          Type                   = 'string'
          TypeName               = 'WorkerGroup'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerGroup'
        Property 'workerId' =
          Description            = 'Identifier for worker evaluating this run within given
          `workerGroup`. Note, this property is only available after the run
          has been claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Identifier'
          Type                   = 'string'
          TypeName               = 'WorkerIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerId'
      Required               = '[runId state reasonCreated scheduled]'
      Title                  = 'Run Information'
      Type                   = 'object'
      TypeName               = 'RunInformation'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items'
    Title                  = 'List of Runs'
    Type                   = 'array'
    TypeName               = 'ListOfRuns'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs'
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that _defined_ this task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/schedulerId'
  Property 'state' =
    Description            = 'State of this task. This is just an auxiliary property derived from state
    of latests run, or `unscheduled` if none.
    '
    Enum                   = '[unscheduled pending running completed failed exception]'
    Title                  = 'State'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/state'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskGroupId'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskId'
  Property 'workerType' =
    Description            = 'Identifier for worker type within the specified provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/workerType'
Required               = '[taskId provisionerId workerType schedulerId taskGroupId deadline expires retriesLeft state runs]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Status Structure'
Type                   = 'object'
TypeName               = 'TaskStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'


http://schemas.taskcluster.net/queue/v1/task.json#
==================================================
Additional Properties  = 'false'
Description            = 'Definition of a task that can be scheduled
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task.json#'
Properties
  Property 'created' =
    Description            = 'Creation time of task'
    Format                 = 'date-time'
    Title                  = 'Created'
    Type                   = 'string'
    TypeName               = 'Created'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/created'
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are
    resolved as **exception** if not resolved by other means
    before the deadline. Note, deadline cannot be more than
    5 days into the future
    '
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/deadline'
  Property 'dependencies' =
    Description            = 'List of dependent tasks. These must either be _completed_ or _resolved_
    before this task is scheduled. See `requires` for semantics.
    '
    Items
      Description            = 'The `taskId` of a task that must be resolved before this task is
      scheduled.
      '
      Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
      Title                  = 'Task Dependency'
      Type                   = 'string'
      TypeName               = 'TaskDependency'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/dependencies/items'
    Title                  = 'Task Dependencies'
    Type                   = 'array'
    TypeName               = 'TaskDependencies'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/dependencies'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and status is deleted.
    Notice that all artifacts for the task must have an expiration that is no
    later than this. If this property isn't it will be set to `deadline`
    plus one year (this default may subject to change).
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/expires'
  Property 'extra' =
    Default                = 'map[]'
    Description            = 'Object with properties that can hold any kind of extra data that should be
    associated with the task. This can be data for the task which doesn't
    fit into `payload`, or it can supplementary data for use in services
    listening for events from this task. For example this could be details to
    display on _treeherder_, or information for indexing the task. Please, try
    to put all related information under one property, so `extra` data keys
    for treeherder reporting and task indexing don't conflict, hence, we have
    reusable services. **Warning**, do not stuff large data-sets in here,
    task definitions should not take-up multiple MiBs.
    '
    Title                  = 'Extra Data'
    Type                   = 'object'
    TypeName               = 'ExtraData'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/extra'
  Property 'metadata' =
    Additional Properties  = 'false'
    Description            = 'Required task metadata
    '
    Properties
      Property 'description' =
        Description            = 'Human readable description of the task, please **explain** what the
        task does. A few lines of documentation is not going to hurt you.
        '
        MaxLength              = '32768'
        Title                  = 'Description'
        Type                   = 'string'
        TypeName               = 'Description'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/description'
      Property 'name' =
        Description            = 'Human readable name of task, used to very briefly given an idea about
        what the task does.
        '
        MaxLength              = '255'
        Title                  = 'Name'
        Type                   = 'string'
        TypeName               = 'Name'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/name'
      Property 'owner' =
        Description            = 'E-mail of person who caused this task, e.g. the person who did
        `hg push`. The person we should contact to ask why this task is here.
        '
        Format                 = 'email'
        MaxLength              = '255'
        Title                  = 'Owner'
        Type                   = 'string'
        TypeName               = 'Owner'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/owner'
      Property 'source' =
        Description            = 'Link to source of this task, should specify a file, revision and
        repository. This should be place someone can go an do a git/hg blame
        to who came up with recipe for this task.
        '
        Format                 = 'uri'
        MaxLength              = '4096'
        Pattern                = '^https?://'
        Title                  = 'Source'
        Type                   = 'string'
        TypeName               = 'Source'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata/properties/source'
    Required               = '[name description owner source]'
    Title                  = 'Meta-data'
    Type                   = 'object'
    TypeName               = 'MetaData'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/metadata'
  Property 'payload' =
    Description            = 'Task-specific payload following worker-specific format. For example the
    `docker-worker` requires keys like: `image`, `commands` and
    `features`. Refer to the documentation of `docker-worker` for details.
    '
    Title                  = 'Task Payload'
    Type                   = 'object'
    TypeName               = 'TaskPayload'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/payload'
  Property 'priority' =
    Description            = 'Priority of task, this defaults to `lowest` and the scope
    `queue:create-task:<priority>/<provisionerId>/<workerType>` is required
    to define a task with `<priority>`.
    '
    Enum                   = '[highest very-high high medium low very-low lowest]'
    Title                  = 'Task Priority'
    Type                   = 'string'
    TypeName               = 'TaskPriority'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/priority'
  Property 'provisionerId' =
    Description            = 'Unique identifier for a provisioner, that can supply specified
    `workerType`
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/provisionerId'
  Property 'requires' =
    Description            = 'The tasks relation to its dependencies. This property specifies the
    semantics of the `task.dependencies` property.
    If `all-completed` is given the task will be scheduled when all
    dependencies are resolved _completed_ (successful resolution).
    If `all-resolved` is given the task will be scheduled when all dependencies
    have been resolved, regardless of what their resolution is.
    '
    Enum                   = '[all-completed all-resolved]'
    Title                  = 'Dependency Requirement Semantics'
    Type                   = 'string'
    TypeName               = 'DependencyRequirementSemantics'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/requires'
  Property 'retries' =
    Description            = 'Number of times to retry the task in case of infrastructure issues.
    An _infrastructure issue_ is a worker node that crashes or is shutdown,
    these events are to be expected.
    '
    Maximum                = '49'
    Minimum                = '0'
    Title                  = 'Retries'
    Type                   = 'integer'
    TypeName               = 'Retries'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/retries'
  Property 'routes' =
    Description            = 'List of task specific routes, AMQP messages will be CC'ed to these routes.
    '
    Items
      Description            = 'A task specific route, AMQP messages will be CC'ed with a routing key
      matching `route.<task-specific route>`. It's possible to dot (`.`) in
      the task specific route to make sub-keys, etc. See the RabbitMQ
      [tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)
      for examples on how to use routing-keys.
      '
      MaxLength              = '249'
      MinLength              = '1'
      Title                  = 'Task Specific Route'
      Type                   = 'string'
      TypeName               = 'TaskSpecificRoute'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/routes/items'
    Title                  = 'Task Specific Routes'
    Type                   = 'array'
    TypeName               = 'TaskSpecificRoutes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/routes'
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that _defined_ this task, this can be an
    identifier for a user or a service like the `"task-graph-scheduler"`.
    Along with the `taskGroupId` this is used to form the permission scope
    `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`,
    this scope is necessary to _schedule_ a defined task, or _rerun_ a task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/schedulerId'
  Property 'scopes' =
    Description            = 'List of scopes (or scope-patterns) that the task is
    authorized to use.
    '
    Items
      Description            = 'A scope (or scope-patterns) which the task is
      authorized to use. This can be a string or a string
      ending with `*` which will authorize all scopes for
      which the string is a prefix.  Scopes must be composed of
      printable ASCII characters and spaces.
      '
      Pattern                = '^[\x20-\x7e]*$'
      Title                  = 'Scope'
      Type                   = 'string'
      TypeName               = 'Scope'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/scopes/items'
    Title                  = 'Scopes'
    Type                   = 'array'
    TypeName               = 'Scopes'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/scopes'
  Property 'tags' =
    Additional Properties  = 'MaxLength              = '4096'
    Type                   = 'string'
    TypeName               = ''
    SourceURL              = ''
    '
    Description            = 'Arbitrary key-value tags (only strings limited to 4k). These can be used
    to attach informal meta-data to a task. Use this for informal tags that
    tasks can be classified by. You can also think of strings here as
    candidates for formal meta-data. Something like
    `purpose: 'build' || 'test'` is a good example.
    '
    Title                  = 'Tags'
    Type                   = 'object'
    TypeName               = 'Tags'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/tags'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
    property isn't specified.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/taskGroupId'
  Property 'workerType' =
    Description            = 'Unique identifier for a worker-type within a specific provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#/properties/workerType'
Required               = '[provisionerId workerType schedulerId taskGroupId dependencies requires routes priority retries created deadline scopes payload metadata tags extra]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Definition Response'
Type                   = 'object'
TypeName               = 'TaskDefinitionResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task.json#'


http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Request to update a provisioner.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#'
Properties
  Property 'actions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Actions are defined on the provisioner and they are performed via a request using the `url` and `method`.
      Depending on the `context`, the `url` will be filled with parameters. In addition, `context` is
      used by the front-end to know where to display the action. For example, `context=worker`
      will display the action on the worker explorer.
      
      _Note: The request will be signed with the user's Taskcluster credentials._
      '
      Properties
        Property 'context' =
          Description            = 'Actions have a "context" that is one of provisioner, worker-type,
          or worker, indicating which it applies to. `context` is used by the front-end to know where to display the action.
          
          | `context`   | Page displayed        |
          |-------------|-----------------------|
          | provisioner | Provisioner Explorer  |
          | worker-type | Workers Explorer      |
          | worker      | Worker Explorer       |
          '
          Enum                   = '[provisioner worker-type worker]'
          Title                  = 'Context'
          Type                   = 'string'
          TypeName               = 'Context'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items/properties/context'
        Property 'description' =
          Description            = 'Description of the provisioner.
          '
          Title                  = 'Description'
          Type                   = 'string'
          TypeName               = 'Description'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items/properties/description'
        Property 'method' =
          Description            = 'Method to indicate the desired action to be performed for a given resource.
          '
          Enum                   = '[POST PUT DELETE PATCH]'
          Title                  = 'Method'
          Type                   = 'string'
          TypeName               = 'Method'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items/properties/method'
        Property 'name' =
          Description            = 'Short names for things like logging/error messages.
          '
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items/properties/name'
        Property 'title' =
          Description            = 'Appropriate title for any sort of Modal prompt.
          '
          Title                  = 'Title'
          Type HAS NOT BEEN SET!!!
          TypeName               = 'Title'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items/properties/title'
        Property 'url' =
          Description            = 'When an action is triggered, a request is made using the `url` and `method`.
          Depending on the `context`, the following parameters will be substituted in the url:
          
          | `context`   | Path parameters                                          |
          |-------------|----------------------------------------------------------|
          | provisioner | <provisionerId>                                          |
          | worker-type | <provisionerId>, <workerType>                            |
          | worker      | <provisionerId>, <workerType>, <workerGroup>, <workerId> |
          
          _Note: The request needs to be signed with the user's Taskcluster credentials._
          '
          Title                  = 'URL'
          Type                   = 'string'
          TypeName               = 'URL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items/properties/url'
      Required               = '[name title context url method description]'
      Title                  = 'Actions'
      Type                   = 'object'
      TypeName               = 'Actions1'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions/items'
    Type                   = 'array'
    TypeName               = 'Actions'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/actions'
  Property 'description' =
    Description            = 'Description of the provisioner.
    '
    Title                  = 'Description'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/description'
  Property 'expires' =
    Description            = 'Date and time after which the provisioner will be automatically
    deleted by the queue.
    '
    Format                 = 'date-time'
    Title                  = 'Provisioner Expiration'
    Type                   = 'string'
    TypeName               = 'ProvisionerExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/expires'
  Property 'stability' =
    Description            = 'This is the stability of the provisioner. Accepted values:
      * `experimental`
      * `stable`
      * `deprecated`
    '
    Enum                   = '[experimental stable deprecated]'
    Title                  = 'Stability'
    Type                   = 'string'
    TypeName               = 'Stability'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#/properties/stability'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Provisioner Request'
Type                   = 'object'
TypeName               = 'ProvisionerRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-provisioner-request.json#'


http://schemas.taskcluster.net/queue/v1/update-worker-request.json#
===================================================================
Additional Properties  = 'false'
Description            = 'Request to update a worker.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/update-worker-request.json#'
Properties
  Property 'expires' =
    Description            = 'Date and time after which the worker will be automatically
    deleted by the queue.
    '
    Format                 = 'date-time'
    Title                  = 'Worker Expiration'
    Type                   = 'string'
    TypeName               = 'WorkerExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-worker-request.json#/properties/expires'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Worker Request'
Type                   = 'object'
TypeName               = 'WorkerRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-worker-request.json#'


http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#
=======================================================================
Additional Properties  = 'false'
Description            = 'Request to update a worker-type.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#'
Properties
  Property 'description' =
    Description            = 'Description of the provisioner.
    '
    Title                  = 'Description'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#/properties/description'
  Property 'expires' =
    Description            = 'Date and time after which the worker-type will be automatically
    deleted by the queue.
    '
    Format                 = 'date-time'
    Title                  = 'Worker-type Expiration'
    Type                   = 'string'
    TypeName               = 'WorkerTypeExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#/properties/expires'
  Property 'stability' =
    Description            = 'This is the stability of the provisioner. Accepted values:
      * `experimental`
      * `stable`
      * `deprecated`
    '
    Enum                   = '[experimental stable deprecated]'
    Title                  = 'Stability'
    Type                   = 'string'
    TypeName               = 'Stability'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#/properties/stability'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Worker-type Request'
Type                   = 'object'
TypeName               = 'WorkerTypeRequest'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/update-workertype-request.json#'


http://schemas.taskcluster.net/queue/v1/worker-response.json#
=============================================================
Additional Properties  = 'false'
Description            = 'Response containing information about a worker.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#'
Properties
  Property 'actions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Actions are defined on the provisioner and they are performed via a request using the `url` and `method`.
      Depending on the `context`, the `url` will be filled with parameters. In addition, `context` is
      used by the front-end to know where to display the action. For example, `context=worker`
      will display the action on the worker explorer.
      
      _Note: The request will be signed with the user's Taskcluster credentials._
      '
      Properties
        Property 'context' =
          Description            = 'Actions have a "context" that is one of provisioner, worker-type,
          or worker, indicating which it applies to. `context` is used by the front-end to know where to display the action.
          
          | `context`   | Page displayed        |
          |-------------|-----------------------|
          | provisioner | Provisioner Explorer  |
          | worker-type | Workers Explorer      |
          | worker      | Worker Explorer       |
          '
          Enum                   = '[worker]'
          Title                  = 'Context'
          Type                   = 'string'
          TypeName               = 'Context'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items/properties/context'
        Property 'description' =
          Description            = 'Description of the provisioner.
          '
          Title                  = 'Description'
          Type                   = 'string'
          TypeName               = 'Description'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items/properties/description'
        Property 'method' =
          Description            = 'Method to indicate the desired action to be performed for a given resource.
          '
          Enum                   = '[POST PUT DELETE PATCH]'
          Title                  = 'Method'
          Type                   = 'string'
          TypeName               = 'Method'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items/properties/method'
        Property 'name' =
          Description            = 'Short names for things like logging/error messages.
          '
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items/properties/name'
        Property 'title' =
          Description            = 'Appropriate title for any sort of Modal prompt.
          '
          Title                  = 'Title'
          Type HAS NOT BEEN SET!!!
          TypeName               = 'Title'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items/properties/title'
        Property 'url' =
          Description            = 'When an action is triggered, a request is made using the `url` and `method`.
          Depending on the `context`, the following parameters will be substituted in the url:
          
          | `context`   | Path parameters                                          |
          |-------------|----------------------------------------------------------|
          | provisioner | <provisionerId>                                          |
          | worker-type | <provisionerId>, <workerType>                            |
          | worker      | <provisionerId>, <workerType>, <workerGroup>, <workerId> |
          
          _Note: The request needs to be signed with the user's Taskcluster credentials._
          '
          Title                  = 'URL'
          Type                   = 'string'
          TypeName               = 'URL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items/properties/url'
      Required               = '[name title context url method description]'
      Title                  = 'Actions'
      Type                   = 'object'
      TypeName               = 'Actions1'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions/items'
    Type                   = 'array'
    TypeName               = 'Actions'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/actions'
  Property 'expires' =
    Description            = 'Date and time after which the worker will be automatically
    deleted by the queue.
    '
    Format                 = 'date-time'
    Title                  = 'Worker Expiration'
    Type                   = 'string'
    TypeName               = 'WorkerExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/expires'
  Property 'firstClaim' =
    Description            = 'Date of the first time this worker claimed a task.
    '
    Format                 = 'date-time'
    Title                  = 'First task claimed'
    Type                   = 'string'
    TypeName               = 'FirstTaskClaimed'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/firstClaim'
  Property 'provisionerId' =
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner ID'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/provisionerId'
  Property 'quarantineUntil' =
    Description            = 'Quarantining a worker allows the machine to remain alive but not accept jobs.
    Once the quarantineUntil time has elapsed, the worker resumes accepting jobs.
    Note that a quarantine can be lifted by setting `quarantineUntil` to the present time (or
    somewhere in the past).
    '
    Format                 = 'date-time'
    Title                  = 'Worker Quarantine'
    Type                   = 'string'
    TypeName               = 'WorkerQuarantine'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/quarantineUntil'
  Property 'recentTasks' =
    Description            = 'List of 20 most recent tasks claimed by the worker.
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'runId' =
          Description            = 'Id of this task run, `run-id`s always starts from `0`
          '
          Maximum                = '1000'
          Minimum                = '0'
          Title                  = 'Run Identifier'
          Type                   = 'integer'
          TypeName               = 'RunIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/recentTasks/items/properties/runId'
        Property 'taskId' =
          Description            = 'Unique task identifier, this is UUID encoded as
          [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
          stripped of `=` padding.
          '
          Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
          Title                  = 'Task Identifier'
          Type                   = 'string'
          TypeName               = 'TaskIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/recentTasks/items/properties/taskId'
      Type                   = 'object'
      TypeName               = 'RecentTasksEntry'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/recentTasks/items'
    Title                  = 'Recent Tasks'
    Type                   = 'array'
    TypeName               = 'RecentTasks'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/recentTasks'
  Property 'workerGroup' =
    Description            = 'Identifier for group that worker who executes this run is a part of,
    this identifier is mainly used for efficient routing.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Group'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for worker evaluating this run within given
    `workerGroup`.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Identifier'
    Type                   = 'string'
    TypeName               = 'WorkerIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/workerId'
  Property 'workerType' =
    Description            = 'WorkerType name.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'WorkerType name'
    Type                   = 'string'
    TypeName               = 'WorkerTypeName'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#/properties/workerType'
Required               = '[provisionerId workerType workerGroup workerId recentTasks expires firstClaim actions]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Worker Response'
Type                   = 'object'
TypeName               = 'WorkerResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/worker-response.json#'


http://schemas.taskcluster.net/queue/v1/workertype-response.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Response to a worker-type request from a provisioner.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#'
Properties
  Property 'actions' =
    Items
      Additional Properties  = 'false'
      Description            = 'Actions are defined on the provisioner and they are performed via a request using the `url` and `method`.
      Depending on the `context`, the `url` will be filled with parameters. In addition, `context` is
      used by the front-end to know where to display the action. For example, `context=worker`
      will display the action on the worker explorer.
      
      _Note: The request will be signed with the user's Taskcluster credentials._
      '
      Properties
        Property 'context' =
          Description            = 'Actions have a "context" that is one of provisioner, worker-type,
          or worker, indicating which it applies to. `context` is used by the front-end to know where to display the action.
          
          | `context`   | Page displayed        |
          |-------------|-----------------------|
          | provisioner | Provisioner Explorer  |
          | worker-type | Workers Explorer      |
          | worker      | Worker Explorer       |
          '
          Enum                   = '[worker-type]'
          Title                  = 'Context'
          Type                   = 'string'
          TypeName               = 'Context'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items/properties/context'
        Property 'description' =
          Description            = 'Description of the provisioner.
          '
          Title                  = 'Description'
          Type                   = 'string'
          TypeName               = 'Description'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items/properties/description'
        Property 'method' =
          Description            = 'Method to indicate the desired action to be performed for a given resource.
          '
          Enum                   = '[POST PUT DELETE PATCH]'
          Title                  = 'Method'
          Type                   = 'string'
          TypeName               = 'Method'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items/properties/method'
        Property 'name' =
          Description            = 'Short names for things like logging/error messages.
          '
          Title                  = 'Name'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items/properties/name'
        Property 'title' =
          Description            = 'Appropriate title for any sort of Modal prompt.
          '
          Title                  = 'Title'
          Type HAS NOT BEEN SET!!!
          TypeName               = 'Title'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items/properties/title'
        Property 'url' =
          Description            = 'When an action is triggered, a request is made using the `url` and `method`.
          Depending on the `context`, the following parameters will be substituted in the url:
          
          | `context`   | Path parameters                                          |
          |-------------|----------------------------------------------------------|
          | provisioner | <provisionerId>                                          |
          | worker-type | <provisionerId>, <workerType>                            |
          | worker      | <provisionerId>, <workerType>, <workerGroup>, <workerId> |
          
          _Note: The request needs to be signed with the user's Taskcluster credentials._
          '
          Title                  = 'URL'
          Type                   = 'string'
          TypeName               = 'URL'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items/properties/url'
      Required               = '[name title context url method description]'
      Title                  = 'Actions'
      Type                   = 'object'
      TypeName               = 'Actions1'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions/items'
    Type                   = 'array'
    TypeName               = 'Actions'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/actions'
  Property 'description' =
    Description            = 'Description of the worker-type.
    '
    Title                  = 'Description'
    Type                   = 'string'
    TypeName               = 'Description'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/description'
  Property 'expires' =
    Description            = 'Date and time after which the worker-type will be automatically
    deleted by the queue.
    '
    Format                 = 'date-time'
    Title                  = 'Worker-type Expiration'
    Type                   = 'string'
    TypeName               = 'WorkerTypeExpiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/expires'
  Property 'lastDateActive' =
    Description            = 'Date of the last time this worker-type was seen active. `lastDateActive` is updated every 6 hours
    but may be off by up-to 6 hours. Nonetheless, `lastDateActive` is a good indicator
    of when the worker-type was last seen active.
    '
    Format                 = 'date-time'
    Title                  = 'Worker-type Last Date Active'
    Type                   = 'string'
    TypeName               = 'WorkerTypeLastDateActive'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/lastDateActive'
  Property 'provisionerId' =
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner ID'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/provisionerId'
  Property 'stability' =
    Description            = 'This is the stability of the worker-type. Accepted values:
      * `experimental`
      * `stable`
      * `deprecated`
    '
    Enum                   = '[experimental stable deprecated]'
    Title                  = 'Stability'
    Type                   = 'string'
    TypeName               = 'Stability'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/stability'
  Property 'workerType' =
    Description            = 'WorkerType name.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'WorkerType name'
    Type                   = 'string'
    TypeName               = 'WorkerTypeName'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#/properties/workerType'
Required               = '[workerType provisionerId description stability expires lastDateActive actions]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Worker-type Response'
Type                   = 'object'
TypeName               = 'WorkerTypeResponse'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/workertype-response.json#'


http://references.taskcluster.net/queue/v1/exchanges.json
=========================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Queue AMQP Exchanges'
Description     = 'The queue, typically available at `queue.taskcluster.net`, is responsible
for accepting tasks and track their state as they are executed by
workers. In order ensure they are eventually resolved.

This document describes AMQP exchanges offered by the queue, which allows
third-party listeners to monitor tasks as they progress to resolution.
These exchanges targets the following audience:
 * Schedulers, who takes action after tasks are completed,
 * Workers, who wants to listen for new or canceled tasks (optional),
 * Tools, that wants to update their view as task progress.

You'll notice that all the exchanges in the document shares the same
routing key pattern. This makes it very easy to bind to all messages
about a certain kind tasks.

**Task specific routes**, a task can define a task specific route using
the `task.routes` property. See task creation documentation for details
on permissions required to provide task specific routes. If a task has
the entry `'notify.by-email'` in as task specific route defined in
`task.routes` all messages about this task will be CC'ed with the
routing-key `'route.notify.by-email'`.

These routes will always be prefixed `route.`, so that cannot interfere
with the _primary_ routing key as documented here. Notice that the
_primary_ routing key is always prefixed `primary.`. This is ensured
in the routing key reference, so API clients will do this automatically.

Please, note that the way RabbitMQ works, the message will only arrive
in your queue once, even though you may have bound to the exchange with
multiple routing key patterns that matches more of the CC'ed routing
routing keys.

**Delivery guarantees**, most operations on the queue are idempotent,
which means that if repeated with the same arguments then the requests
will ensure completion of the operation and return the same response.
This is useful if the server crashes or the TCP connection breaks, but
when re-executing an idempotent operation, the queue will also resend
any related AMQP messages. Hence, messages may be repeated.

This shouldn't be much of a problem, as the best you can achieve using
confirm messages with AMQP is at-least-once delivery semantics. Hence,
this only prevents you from obtaining at-most-once delivery semantics.

**Remark**, some message generated by timeouts maybe dropped if the
server crashes at wrong time. Ideally, we'll address this in the
future. For now we suggest you ignore this corner case, and notify us
if this corner case is of concern to you.'
Exchange Prefix = 'exchange/taskcluster-queue/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-defined'
    Entry Name        = 'taskDefined'
    Entry Title       = 'Task Defined Messages'
    Entry Description = 'When a task is created or just defined a message is posted to this
exchange.

This message exchange is mainly useful when tasks are scheduled by a
scheduler that uses `defineTask` as this does not make the task
`pending`. Thus, no `taskPending` message is published.
Please, note that messages are also published on this exchange if defined
using `createTask`.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'
Entry 1     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-pending'
    Entry Name        = 'taskPending'
    Entry Title       = 'Task Pending Messages'
    Entry Description = 'When a task becomes `pending` a message is posted to this exchange.

This is useful for workers who doesn't want to constantly poll the queue
for new tasks. The queue will also be authority for task states and
claims. But using this exchange workers should be able to distribute work
efficiently and they would be able to reduce their polling interval
significantly without affecting general responsiveness.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'
Entry 2     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-running'
    Entry Name        = 'taskRunning'
    Entry Title       = 'Task Running Messages'
    Entry Description = 'Whenever a task is claimed by a worker, a run is started on the worker,
and a message is posted on this exchange.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'
Entry 3     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'artifact-created'
    Entry Name        = 'artifactCreated'
    Entry Title       = 'Artifact Creation Messages'
    Entry Description = 'Whenever the `createArtifact` end-point is called, the queue will create
a record of the artifact and post a message on this exchange. All of this
happens before the queue returns a signed URL for the caller to upload
the actual artifact with (pending on `storageType`).

This means that the actual artifact is rarely available when this message
is posted. But it is not unreasonable to assume that the artifact will
will become available at some point later. Most signatures will expire in
30 minutes or so, forcing the uploader to call `createArtifact` with
the same payload again in-order to continue uploading the artifact.

However, in most cases (especially for small artifacts) it's very
reasonable assume the artifact will be available within a few minutes.
This property means that this exchange is mostly useful for tools
monitoring task evaluation. One could also use it count number of
artifacts per task, or _index_ artifacts though in most cases it'll be
smarter to index artifacts after the task in question have completed
successfully.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'
Entry 4     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-completed'
    Entry Name        = 'taskCompleted'
    Entry Title       = 'Task Completed Messages'
    Entry Description = 'When a task is successfully completed by a worker a message is posted
this exchange.
This message is routed using the `runId`, `workerGroup` and `workerId`
that completed the task. But information about additional runs is also
available from the task status structure.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'
Entry 5     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-failed'
    Entry Name        = 'taskFailed'
    Entry Title       = 'Task Failed Messages'
    Entry Description = 'When a task ran, but failed to complete successfully a message is posted
to this exchange. This is same as worker ran task-specific code, but the
task specific code exited non-zero.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'
Entry 6     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-exception'
    Entry Name        = 'taskException'
    Entry Title       = 'Task Exception Messages'
    Entry Description = 'Whenever Taskcluster fails to run a message is posted to this exchange.
This happens if the task isn't completed before its `deadlìne`,
all retries failed (i.e. workers stopped responding), the task was
canceled by another entity, or the task carried a malformed payload.

The specific _reason_ is evident from that task status structure, refer
to the `reasonResolved` property for the last run.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskId'
        Element Summary   = '`taskId` for the task this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'runId'
        Element Summary   = '`runId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 3     = 
        Element Name      = 'workerGroup'
        Element Summary   = '`workerGroup` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 4     = 
        Element Name      = 'workerId'
        Element Summary   = '`workerId` of latest run for the task, `_` if no run is exists for the task.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'false'
    Routing Key Element 5     = 
        Element Name      = 'provisionerId'
        Element Summary   = '`provisionerId` this task is targeted at.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 6     = 
        Element Name      = 'workerType'
        Element Summary   = '`workerType` this task must run on.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 7     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` this task was created by.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 8     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` this task was created in.'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 9     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'
Entry 7     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'task-group-resolved'
    Entry Name        = 'taskGroupResolved'
    Entry Title       = 'Task Group Resolved Messages'
    Entry Description = 'A message is published on task-group-resolved whenever all submitted
tasks (whether scheduled or unscheduled) for a given task group have
been resolved, regardless of whether they resolved as successful or
not. A task group may be resolved multiple times, since new tasks may
be submitted against an already resolved task group.'
    Routing Key Element 0     = 
        Element Name      = 'routingKeyKind'
        Element Summary   = 'Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.'
        Element Constant  = 'primary'
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'taskGroupId'
        Element Summary   = '`taskGroupId` for the task-group this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'schedulerId'
        Element Summary   = '`schedulerId` for the task-group this message concerns'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 3     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#'


http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#
======================================================================
Additional Properties  = 'false'
Description            = 'Message reporting a new artifact has been created for a given task.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'
Properties
  Property 'artifact' =
    Additional Properties  = 'false'
    Description            = 'Information about the artifact that was created
    '
    Properties
      Property 'contentType' =
        Description            = 'Mimetype for the artifact that was created.
        '
        MaxLength              = '255'
        Title                  = 'Content-Type'
        Type                   = 'string'
        TypeName               = 'ContentType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/contentType'
      Property 'expires' =
        Description            = 'Date and time after which the artifact created will be automatically
        deleted by the queue.
        '
        Format                 = 'date-time'
        Title                  = 'Artifact Expiration'
        Type                   = 'string'
        TypeName               = 'ArtifactExpiration'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/expires'
      Property 'name' =
        Description            = 'Name of the artifact that was created, this is useful if you want to
        attempt to fetch the artifact. But keep in mind that just because an
        artifact is created doesn't mean that it's immediately available.
        '
        MaxLength              = '1024'
        Title                  = 'Artifact Name'
        Type                   = 'string'
        TypeName               = 'ArtifactName'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/name'
      Property 'storageType' =
        Description            = 'This is the `storageType` for the request that was used to create the
        artifact.
        '
        Enum                   = '[blob reference error]'
        Title                  = 'Artifact Storage-Type'
        Type                   = 'string'
        TypeName               = 'ArtifactStorageType'
        SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact/properties/storageType'
    Required               = '[storageType name expires contentType]'
    Title                  = 'Artifact Created'
    Type                   = 'object'
    TypeName               = 'ArtifactCreated'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/artifact'
  Property 'runId' =
    Description            = 'Id of the run on which artifact was created.
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which the run with the created
    artifacted is running.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker within which the run with the created artifact
    is running.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId artifact]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Artifact Created Message'
Type                   = 'object'
TypeName               = 'ArtifactCreatedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/artifact-created-message.json#'


http://schemas.taskcluster.net/queue/v1/task-completed-message.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task has complete successfully.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the run that completed the task
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run ran.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker that executed this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Completed Message'
Type                   = 'object'
TypeName               = 'TaskCompletedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-completed-message.json#'


http://schemas.taskcluster.net/queue/v1/task-defined-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task has been defined. The task may or may not be
_scheduled_ too.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'
Properties
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#/properties/version'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Defined Message'
Type                   = 'object'
TypeName               = 'TaskDefinedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-defined-message.json#'


http://schemas.taskcluster.net/queue/v1/task-exception-message.json#
====================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that Taskcluster have failed to run a task.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the last run for the task, not provided if `deadline`
    was exceeded before a run was started.
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which the last attempt of the task
    ran. Not provided, if `deadline` was exceeded before a run was started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the last worker that failed to report, causing the task
    to fail. Not provided, if `deadline` was exceeded before a run
    was started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#/properties/workerId'
Required               = '[version status]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Exception Message'
Type                   = 'object'
TypeName               = 'TaskExceptionMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-exception-message.json#'


http://schemas.taskcluster.net/queue/v1/task-failed-message.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task failed to complete successfully.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the run that failed.
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run ran.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker that executed this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Failed Message'
Type                   = 'object'
TypeName               = 'TaskFailedMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-failed-message.json#'


http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#
=================================================================
Additional Properties  = 'false'
Description            = 'Message written once a task group has no tasks to be run. It is
possible for a task group to later have another task added, in which
case this message will be sent again once it finishes.
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#'
Properties
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that created this task-group.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#/properties/schedulerId'
  Property 'taskGroupId' =
    Description            = 'Identifier for the task-group being listed.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#/properties/taskGroupId'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#/properties/version'
Required               = '[taskGroupId schedulerId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Group Resolved'
Type                   = 'object'
TypeName               = 'TaskGroupResolved1'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-group-resolved.json#'


http://schemas.taskcluster.net/queue/v1/task-pending-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a task is now pending
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of run that became pending, `run-id`s always starts from 0
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#/properties/status'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#/properties/version'
Required               = '[version status runId]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Pending Message'
Type                   = 'object'
TypeName               = 'TaskPendingMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-pending-message.json#'


http://schemas.taskcluster.net/queue/v1/task-running-message.json#
==================================================================
Additional Properties  = 'false'
Description            = 'Message reporting that a given run of a task have started
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'
Properties
  Property 'runId' =
    Description            = 'Id of the run that just started, always starts from 0
    '
    Maximum                = '1000'
    Minimum                = '0'
    Type                   = 'integer'
    TypeName               = 'RunID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/runId'
  Property 'status' =
    Ref                    = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
    TypeName               = 'Status'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/status'
  Property 'takenUntil' =
    Description            = 'Time at which the run expires and is resolved as `failed`, if the run
    isn't reclaimed.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TakenUntil'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/takenUntil'
  Property 'version' =
    Description            = 'Message version'
    Enum                   = '[1]'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/version'
  Property 'workerGroup' =
    Description            = 'Identifier for the worker-group within which this run started.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerGroup'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/workerGroup'
  Property 'workerId' =
    Description            = 'Identifier for the worker executing this run.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Type                   = 'string'
    TypeName               = 'WorkerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#/properties/workerId'
Required               = '[version status runId workerGroup workerId takenUntil]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Running Message'
Type                   = 'object'
TypeName               = 'TaskRunningMessage'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-running-message.json#'


http://schemas.taskcluster.net/queue/v1/task-status.json#
=========================================================
Additional Properties  = 'false'
Description            = 'A representation of **task status** as known by the queue
'
ID                     = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'
Properties
  Property 'deadline' =
    Description            = 'Deadline of the task, `pending` and `running` runs are
    resolved as **exception** if not resolved by other means
    before the deadline. Note, deadline cannot be more than
    5 days into the future
    '
    Format                 = 'date-time'
    Title                  = 'Deadline'
    Type                   = 'string'
    TypeName               = 'Deadline'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/deadline'
  Property 'expires' =
    Description            = 'Task expiration, time at which task definition and
    status is deleted. Notice that all artifacts for the task
    must have an expiration that is no later than this.
    '
    Format                 = 'date-time'
    Title                  = 'Expiration'
    Type                   = 'string'
    TypeName               = 'Expiration'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/expires'
  Property 'provisionerId' =
    Description            = 'Unique identifier for the provisioner that this task must be scheduled on
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Provisioner Id'
    Type                   = 'string'
    TypeName               = 'ProvisionerID'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/provisionerId'
  Property 'retriesLeft' =
    Description            = 'Number of retries left for the task in case of infrastructure issues
    '
    Maximum                = '999'
    Minimum                = '0'
    Title                  = 'Retries Left'
    Type                   = 'integer'
    TypeName               = 'RetriesLeft'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/retriesLeft'
  Property 'runs' =
    Description            = 'List of runs, ordered so that index `i` has `runId == i`
    '
    Items
      Additional Properties  = 'false'
      Description            = 'JSON object with information about a run
      '
      Properties
        Property 'reasonCreated' =
          Description            = 'Reason for the creation of this run,
          **more reasons may be added in the future**.
          '
          Enum                   = '[scheduled retry task-retry rerun exception]'
          Title                  = 'Reason Created'
          Type                   = 'string'
          TypeName               = 'ReasonCreated'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonCreated'
        Property 'reasonResolved' =
          Description            = 'Reason that run was resolved, this is mainly
          useful for runs resolved as `exception`.
          Note, **more reasons may be added in the future**, also this
          property is only available after the run is resolved. Some of these
          reasons, notably `intermittent-task`, `worker-shutdown`, and
          `claim-expired`, will trigger an automatic retry of the task.
          '
          Enum                   = '[completed failed deadline-exceeded canceled superseded claim-expired worker-shutdown malformed-payload resource-unavailable internal-error intermittent-task]'
          Title                  = 'Reason Resolved'
          Type                   = 'string'
          TypeName               = 'ReasonResolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/reasonResolved'
        Property 'resolved' =
          Description            = 'Date-time at which this run was resolved, ie. when the run changed
          state from `running` to either `completed`, `failed` or `exception`.
          This property is only present after the run as been resolved.
          '
          Format                 = 'date-time'
          Title                  = 'Resolved'
          Type                   = 'string'
          TypeName               = 'Resolved'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/resolved'
        Property 'runId' =
          Description            = 'Id of this task run, `run-id`s always starts from `0`
          '
          Maximum                = '1000'
          Minimum                = '0'
          Title                  = 'Run Identifier'
          Type                   = 'integer'
          TypeName               = 'RunIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/runId'
        Property 'scheduled' =
          Description            = 'Date-time at which this run was scheduled, ie. when the run was
          created in state `pending`.
          '
          Format                 = 'date-time'
          Title                  = 'Scheduled'
          Type                   = 'string'
          TypeName               = 'Scheduled'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/scheduled'
        Property 'started' =
          Description            = 'Date-time at which this run was claimed, ie. when the run changed
          state from `pending` to `running`. This property is only present
          after the run has been claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Started'
          Type                   = 'string'
          TypeName               = 'Started'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/started'
        Property 'state' =
          Description            = 'State of this run
          '
          Enum                   = '[pending running completed failed exception]'
          Title                  = 'Run State'
          Type                   = 'string'
          TypeName               = 'RunState'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/state'
        Property 'takenUntil' =
          Description            = 'Time at which the run expires and is resolved as `failed`, if the
          run isn't reclaimed. Note, only present after the run has been
          claimed.
          '
          Format                 = 'date-time'
          Title                  = 'Taken Until'
          Type                   = 'string'
          TypeName               = 'TakenUntil'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/takenUntil'
        Property 'workerGroup' =
          Description            = 'Identifier for group that worker who executes this run is a part of,
          this identifier is mainly used for efficient routing.
          Note, this property is only present after the run is claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Group'
          Type                   = 'string'
          TypeName               = 'WorkerGroup'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerGroup'
        Property 'workerId' =
          Description            = 'Identifier for worker evaluating this run within given
          `workerGroup`. Note, this property is only available after the run
          has been claimed.
          '
          MaxLength              = '22'
          MinLength              = '1'
          Pattern                = '^([a-zA-Z0-9-_]*)$'
          Title                  = 'Worker Identifier'
          Type                   = 'string'
          TypeName               = 'WorkerIdentifier'
          SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items/properties/workerId'
      Required               = '[runId state reasonCreated scheduled]'
      Title                  = 'Run Information'
      Type                   = 'object'
      TypeName               = 'RunInformation'
      SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs/items'
    Title                  = 'List of Runs'
    Type                   = 'array'
    TypeName               = 'ListOfRuns'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/runs'
  Property 'schedulerId' =
    Description            = 'Identifier for the scheduler that _defined_ this task.
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Scheduler Identifier'
    Type                   = 'string'
    TypeName               = 'SchedulerIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/schedulerId'
  Property 'state' =
    Description            = 'State of this task. This is just an auxiliary property derived from state
    of latests run, or `unscheduled` if none.
    '
    Enum                   = '[unscheduled pending running completed failed exception]'
    Title                  = 'State'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/state'
  Property 'taskGroupId' =
    Description            = 'Identifier for a group of tasks scheduled together with this task, by
    scheduler identified by `schedulerId`. For tasks scheduled by the
    task-graph scheduler, this is the `taskGraphId`.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task-Group Identifier'
    Type                   = 'string'
    TypeName               = 'TaskGroupIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskGroupId'
  Property 'taskId' =
    Description            = 'Unique task identifier, this is UUID encoded as
    [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and
    stripped of `=` padding.
    '
    Pattern                = '^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$'
    Title                  = 'Task Identifier'
    Type                   = 'string'
    TypeName               = 'TaskIdentifier'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/taskId'
  Property 'workerType' =
    Description            = 'Identifier for worker type within the specified provisioner
    '
    MaxLength              = '22'
    MinLength              = '1'
    Pattern                = '^([a-zA-Z0-9-_]*)$'
    Title                  = 'Worker Type'
    Type                   = 'string'
    TypeName               = 'WorkerType'
    SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#/properties/workerType'
Required               = '[taskId provisionerId workerType schedulerId taskGroupId deadline expires retriesLeft state runs]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Task Status Structure'
Type                   = 'object'
TypeName               = 'TaskStatusStructure'
SourceURL              = 'http://schemas.taskcluster.net/queue/v1/task-status.json#'


http://references.taskcluster.net/secrets/v1/api.json
=====================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'TaskCluster Secrets API Documentation'
Description = 'The secrets service provides a simple key/value store for small bits of secret
data.  Access is limited by scopes, so values can be considered secret from
those who do not have the relevant scopes.

Secrets also have an expiration date, and once a secret has expired it can no
longer be read.  This is useful for short-term secrets such as a temporary
service credential or a one-time signing key.'
Base URL    = 'https://secrets.taskcluster.net/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/secret/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'set'
    Entry Stability   = 'stable'
    Entry Scopes      = 'secrets:set:<name>'
    Entry Input       = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'
    Entry Output      = ''
    Entry Title       = 'Set Secret'
    Entry Description = 'Set the secret associated with some key.  If the secret already exists, it is
updated instead.'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/secret/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'remove'
    Entry Stability   = 'stable'
    Entry Scopes      = 'secrets:set:<name>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Delete Secret'
    Entry Description = 'Delete the secret associated with some key.'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/secret/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'get'
    Entry Stability   = 'stable'
    Entry Scopes      = 'secrets:get:<name>'
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'
    Entry Title       = 'Read Secret'
    Entry Description = 'Read the secret associated with some key.  If the secret has recently
expired, the response code 410 is returned.  If the caller lacks the
scope necessary to get the secret, the call will fail with a 403 code
regardless of whether the secret exists.'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/secrets'
    Entry Args        = '[]'
    Entry Query        = '[continuationToken limit]'
    Entry Name        = 'list'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#'
    Entry Title       = 'List Secrets'
    Entry Description = 'List the names of all secrets.

By default this end-point will try to return up to 1000 secret names in one
request. But it **may return less**, even if more tasks are available.
It may also return a `continuationToken` even though there are no more
results. However, you can only be sure to have seen all results if you
keep calling `listTaskGroup` with the last `continuationToken` until you
get a result without a `continuationToken`.

If you are not interested in listing all the members at once, you may
use the query-string option `limit` to return fewer.'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/secrets/v1/secret-list.json#
===========================================================
Additional Properties  = 'false'
Description            = 'Message containing a list of secret names
'
ID                     = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#'
Properties
  Property 'continuationToken' =
    Description            = 'Opaque `continuationToken` to be given as query-string option to get the
    next set of provisioners.
    This property is only present if another request is necessary to fetch all
    results. In practice the next request with a `continuationToken` may not
    return additional results, but it can. Thus, you can only be sure to have
    all the results if you've called with `continuationToken` until you get a
    result without a `continuationToken`.
    '
    Title                  = 'Continuation Token'
    Type                   = 'string'
    TypeName               = 'ContinuationToken'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#/properties/continuationToken'
  Property 'secrets' =
    Description            = 'Secret names'
    Items
      Description            = 'Secret name'
      Title                  = 'Secret'
      Type                   = 'string'
      TypeName               = 'Secret'
      SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#/properties/secrets/items'
    Type                   = 'array'
    TypeName               = 'Secrets'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#/properties/secrets'
Required               = '[secrets]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Secrets List'
Type                   = 'object'
TypeName               = 'SecretsList'
SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret-list.json#'


http://schemas.taskcluster.net/secrets/v1/secret.json#
======================================================
Additional Properties  = 'false'
Description            = 'Message containing a TaskCluster Secret
'
ID                     = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'
Properties
  Property 'expires' =
    Description            = 'An expiration date for this secret.
    '
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'Expires'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret.json#/properties/expires'
  Property 'secret' =
    Description            = 'The secret value to be encrypted.
    '
    Type                   = 'object'
    TypeName               = 'Secret'
    SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret.json#/properties/secret'
Required               = '[secret expires]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Secret'
Type                   = 'object'
TypeName               = 'Secret'
SourceURL              = 'http://schemas.taskcluster.net/secrets/v1/secret.json#'


http://references.taskcluster.net/taskcluster-treeherder/v1/exchanges.json
==========================================================================
Version         = '0'
Schema          = 'http://schemas.taskcluster.net/base/v1/exchanges-reference.json#'
Title           = 'Taskcluster-treeherder Pulse Exchange'
Description     = 'The taskcluster-treeherder service is responsible for processing
task events published by TaskCluster Queue and producing job messages
that are consumable by Treeherder.

This exchange provides that job messages to be consumed by any queue that
attached to the exchange.  This could be a production Treeheder instance,
a local development environment, or a custom dashboard.'
Exchange Prefix = 'exchange/taskcluster-treeherder/v1/'
Entry 0     = 
    Entry Type        = 'topic-exchange'
    Entry Exchange    = 'jobs'
    Entry Name        = 'jobs'
    Entry Title       = 'Job Messages'
    Entry Description = 'When a task run is scheduled or resolved, a message is posted to
this exchange in a Treeherder consumable format.'
    Routing Key Element 0     = 
        Element Name      = 'destination'
        Element Summary   = 'destination'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 1     = 
        Element Name      = 'project'
        Element Summary   = 'project'
        Element Constant  = ''
        Element M Words   = 'false'
        Element Required  = 'true'
    Routing Key Element 2     = 
        Element Name      = 'reserved'
        Element Summary   = 'Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.'
        Element Constant  = ''
        Element M Words   = 'true'
        Element Required  = 'false'
    Entry Schema      = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#'


http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Definition of a single job that can be added to Treeherder
Project is determined by the routing key, so we don't need to specify it here.
'
ID                     = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#'
Properties
  Property 'buildMachine' =
    Ref                    = '#/definitions/machine'
    TypeName               = 'BuildMachine'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/buildMachine'
  Property 'buildSystem' =
    Description            = 'The name of the build system that initiated this content.  Some examples
    are "buildbot" and "taskcluster".  But this could be any name.  This
    value will be used in the routing key for retriggering jobs in the
    publish-job-action task.
    '
    MaxLength              = '25'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'BuildSystem'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/buildSystem'
  Property 'coalesced' =
    Description            = 'The job guids that were coalesced to this job.'
    Items
      MaxLength              = '50'
      MinLength              = '1'
      Pattern                = '^[\w/+-]+$'
      Title                  = 'job guid'
      Type                   = 'string'
      TypeName               = 'JobGUID'
      SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/coalesced/items'
    Title                  = 'coalesced'
    Type                   = 'array'
    TypeName               = 'Coalesced'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/coalesced'
  Property 'display' =
    Additional Properties  = 'false'
    Properties
      Property 'chunkCount' =
        Minimum                = '1'
        Title                  = 'chunkCount'
        Type                   = 'integer'
        TypeName               = 'ChunkCount'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display/properties/chunkCount'
      Property 'chunkId' =
        Minimum                = '1'
        Title                  = 'chunkId'
        Type                   = 'integer'
        TypeName               = 'ChunkID'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display/properties/chunkId'
      Property 'groupName' =
        MaxLength              = '100'
        MinLength              = '1'
        Title                  = 'group name'
        Type                   = 'string'
        TypeName               = 'GroupName'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display/properties/groupName'
      Property 'groupSymbol' =
        MaxLength              = '25'
        MinLength              = '1'
        Title                  = 'group symbol'
        Type                   = 'string'
        TypeName               = 'GroupSymbol'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display/properties/groupSymbol'
      Property 'jobName' =
        MaxLength              = '100'
        MinLength              = '1'
        Title                  = 'job name'
        Type                   = 'string'
        TypeName               = 'JobName'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display/properties/jobName'
      Property 'jobSymbol' =
        MaxLength              = '25'
        MinLength              = '0'
        Title                  = 'jobSymbol'
        Type                   = 'string'
        TypeName               = 'JobSymbol'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display/properties/jobSymbol'
    Required               = '[jobName jobSymbol groupSymbol]'
    Type                   = 'object'
    TypeName               = 'Display'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/display'
  Property 'extra' =
    Description            = 'Extra information that Treeherder reads on a best-effort basis'
    Type                   = 'object'
    TypeName               = 'Extra'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/extra'
  Property 'isRetried' =
    Description            = 'True indicates this job has been retried.'
    Type                   = 'boolean'
    TypeName               = 'IsRetried'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/isRetried'
  Property 'jobInfo' =
    Additional Properties  = 'false'
    Description            = 'Definition of the Job Info for a job.  These are extra data
    fields that go along with a job that will be displayed in
    the details panel within Treeherder.
    '
    ID                     = 'jobInfo'
    Properties
      Property 'links' =
        Items
          Additional Properties  = 'false'
          Description            = 'List of URLs shown as key/value pairs.  Shown as:
          "<label>: <linkText>" where linkText will be a link to the url.
          '
          Properties
            Property 'label' =
              MaxLength              = '70'
              MinLength              = '1'
              Type                   = 'string'
              TypeName               = 'Label'
              SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo/properties/links/items/properties/label'
            Property 'linkText' =
              MaxLength              = '125'
              MinLength              = '1'
              Type                   = 'string'
              TypeName               = 'LinkText'
              SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo/properties/links/items/properties/linkText'
            Property 'url' =
              Format                 = 'url'
              MaxLength              = '512'
              Type                   = 'string'
              TypeName               = 'URL'
              SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo/properties/links/items/properties/url'
          Required               = '[url linkText label]'
          Type                   = 'object'
          TypeName               = 'LinksEntry'
          SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo/properties/links/items'
        Type                   = 'array'
        TypeName               = 'Links'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo/properties/links'
      Property 'summary' =
        Description            = 'Plain text description of the job and its state.  Submitted with
        the final message about a task.
        '
        Type                   = 'string'
        TypeName               = 'Summary'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo/properties/summary'
    Type                   = 'object'
    TypeName               = 'JobInfo'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobInfo'
  Property 'jobKind' =
    Default                = 'other'
    Enum                   = '[build test other]'
    Type                   = 'string'
    TypeName               = 'JobKind'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/jobKind'
  Property 'labels' =
    Description            = 'Labels are a dimension of a platform.  The values here can vary wildly,
    so most strings are valid for this.  The list of labels that are used
    is maleable going forward.
    
    These were formerly known as "Options" within "Option Collections" but
    calling labels now so they can be understood to be just strings that
    denotes a characteristic of the job.
    
    Some examples of labels that have been used:
      opt    Optimize Compiler GCC optimize flags
      debug  Debug flags passed in
      pgo    Profile Guided Optimization - Like opt, but runs with profiling, then builds again using that profiling
      asan   Address Sanitizer
      tsan   Thread Sanitizer Build
    '
    Items
      MaxLength              = '50'
      MinLength              = '1'
      Pattern                = '^[\w-]+$'
      Type                   = 'string'
      TypeName               = 'LabelsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/labels/items'
    Title                  = 'labels'
    Type                   = 'array'
    TypeName               = 'Labels'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/labels'
  Property 'logs' =
    Items
      Additional Properties  = 'false'
      Properties
        Property 'errorsTruncated' =
          Description            = 'If true, indicates that the number of errors in the log was too
          large and not all of those lines are indicated here.
          '
          Type                   = 'boolean'
          TypeName               = 'ErrorsTruncated'
          SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/errorsTruncated'
        Property 'name' =
          MaxLength              = '50'
          MinLength              = '1'
          Type                   = 'string'
          TypeName               = 'Name'
          SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/name'
        Property 'steps' =
          Description            = 'This object defines what is seen in the Treeherder Log Viewer.
          These values can be submitted here, or they will be generated
          by Treeherder's internal log parsing process from the
          submitted log.  If this value is submitted, Treeherder will
          consider the log already parsed and skip parsing.
          '
          Items
            Additional Properties  = 'false'
            Properties
              Property 'errors' =
                Items
                  Additional Properties  = 'false'
                  Properties
                    Property 'line' =
                      MaxLength              = '255'
                      MinLength              = '1'
                      Type                   = 'string'
                      TypeName               = 'Line'
                      SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/errors/items/properties/line'
                    Property 'linenumber' =
                      Minimum                = '0'
                      Type                   = 'integer'
                      TypeName               = 'Linenumber'
                      SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/errors/items/properties/linenumber'
                  Type                   = 'object'
                  TypeName               = 'ErrorsEntry'
                  SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/errors/items'
                Type                   = 'array'
                TypeName               = 'Errors'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/errors'
              Property 'lineFinished' =
                Minimum                = '0'
                Type                   = 'integer'
                TypeName               = 'LineFinished'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/lineFinished'
              Property 'lineStarted' =
                Minimum                = '0'
                Type                   = 'integer'
                TypeName               = 'LineStarted'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/lineStarted'
              Property 'name' =
                MaxLength              = '255'
                MinLength              = '1'
                Type                   = 'string'
                TypeName               = 'Name'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/name'
              Property 'result' =
                Enum                   = '[success fail exception canceled unknown]'
                Type                   = 'string'
                TypeName               = 'Result'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/result'
              Property 'timeFinished' =
                Format                 = 'date-time'
                Type                   = 'string'
                TypeName               = 'TimeFinished'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/timeFinished'
              Property 'timeStarted' =
                Format                 = 'date-time'
                Type                   = 'string'
                TypeName               = 'TimeStarted'
                SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items/properties/timeStarted'
            Required               = '[name timeStarted lineStarted lineFinished timeFinished result]'
            Type                   = 'object'
            TypeName               = 'StepsEntry'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps/items'
          Type                   = 'array'
          TypeName               = 'Steps'
          SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/steps'
        Property 'url' =
          Format                 = 'uri'
          MaxLength              = '255'
          MinLength              = '1'
          Type                   = 'string'
          TypeName               = 'URL'
          SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items/properties/url'
      Required               = '[url name]'
      Type                   = 'object'
      TypeName               = 'LogsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs/items'
    Type                   = 'array'
    TypeName               = 'Logs'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/logs'
  Property 'origin' =
    OneOf
      Item '0' =
        Additional Properties  = 'false'
        Properties
          Property 'kind' =
            Enum                   = '[hg.mozilla.org]'
            Type                   = 'string'
            TypeName               = 'Kind'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/kind'
          Property 'project' =
            MaxLength              = '50'
            MinLength              = '1'
            Pattern                = '^[\w-]+$'
            Type                   = 'string'
            TypeName               = 'Project'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/project'
          Property 'pushLogID' =
            Type                   = 'integer'
            TypeName               = 'PushLogID'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/pushLogID'
          Property 'revision' =
            MaxLength              = '40'
            MinLength              = '40'
            Pattern                = '^[0-9a-f]+$'
            Type                   = 'string'
            TypeName               = 'Revision'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/revision'
        Required               = '[kind project revision]'
        Title                  = 'HG Push'
        Type                   = 'object'
        TypeName               = 'HGPush'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]'
      Item '1' =
        Additional Properties  = 'false'
        Description            = 'BACKWARD COMPATABILITY: An HG job that only has a revision_hash.
        Some repos like mozilla-beta have not yet merged in the code that
        allows them access to the revision.
        '
        Properties
          Property 'kind' =
            Enum                   = '[hg.mozilla.org]'
            Type                   = 'string'
            TypeName               = 'Kind'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/kind'
          Property 'project' =
            MaxLength              = '50'
            MinLength              = '1'
            Pattern                = '^[\w-]+$'
            Type                   = 'string'
            TypeName               = 'Project'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/project'
          Property 'pushLogID' =
            Type                   = 'integer'
            TypeName               = 'PushLogID'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/pushLogID'
          Property 'revision_hash' =
            MaxLength              = '40'
            MinLength              = '40'
            Pattern                = '^[0-9a-f]+$'
            Type                   = 'string'
            TypeName               = 'Revision_Hash'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/revision_hash'
        Required               = '[kind project revision_hash]'
        Title                  = 'HG Push Legacy'
        Type                   = 'object'
        TypeName               = 'HGPushLegacy'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]'
      Item '2' =
        Additional Properties  = 'false'
        Properties
          Property 'kind' =
            Enum                   = '[github.com]'
            Type                   = 'string'
            TypeName               = 'Kind'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/kind'
          Property 'owner' =
            Description            = 'This could be the organization or the individual git username
            depending on who owns the repo.
            '
            MaxLength              = '50'
            MinLength              = '1'
            Pattern                = '^[\w-]+$'
            Type                   = 'string'
            TypeName               = 'Owner'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/owner'
          Property 'project' =
            MaxLength              = '50'
            MinLength              = '1'
            Pattern                = '^[\w-]+$'
            Type                   = 'string'
            TypeName               = 'Project'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/project'
          Property 'pullRequestID' =
            Type                   = 'integer'
            TypeName               = 'PullRequestID'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/pullRequestID'
          Property 'revision' =
            MaxLength              = '40'
            MinLength              = '40'
            Type                   = 'string'
            TypeName               = 'Revision'
            SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/revision'
        Required               = '[kind project revision]'
        Title                  = 'Github Pull Request'
        Type                   = 'object'
        TypeName               = 'GithubPullRequest'
        SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]'
    Type HAS NOT BEEN SET!!!
    TypeName               = 'Origin'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin'
  Property 'owner' =
    Description            = 'Description of who submitted the job: gaia | scheduler name | username | email
    '
    MaxLength              = '50'
    MinLength              = '1'
    Title                  = 'owner'
    Type                   = 'string'
    TypeName               = 'Owner'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/owner'
  Property 'productName' =
    Description            = 'Examples include:
    -  'b2g'
    -  'firefox'
    -  'taskcluster'
    -  'xulrunner'
    '
    MaxLength              = '125'
    MinLength              = '1'
    Type                   = 'string'
    TypeName               = 'ProductName'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/productName'
  Property 'reason' =
    Description            = 'Examples include:
    - scheduled
    - scheduler
    - Self-serve: Rebuilt by foo@example.com
    - Self-serve: Requested by foo@example.com
    - The Nightly scheduler named 'b2g_mozilla-inbound periodic' triggered this build
    - unknown
    '
    MaxLength              = '125'
    MinLength              = '1'
    Type                   = 'string'
    TypeName               = 'Reason'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/reason'
  Property 'result' =
    Description            = 'fail: A failure
    exception: An infrastructure error/exception
    success: Build/Test executed without error or failure
    canceled: The job was cancelled by a user
    unknown: When the job is not yet completed
    superseded: When a job has been superseded by another job
    '
    Enum                   = '[success fail exception canceled unknown superseded]'
    Title                  = 'result'
    Type                   = 'string'
    TypeName               = 'Result'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/result'
  Property 'retryId' =
    Default                = '0'
    Description            = 'The infrastructure retry iteration on this job.  The number of times this
    job has been retried by the infrastructure.
    If it's the 1st time running, then it should be 0. If this is the first
    retry, it will be 1, etc.
    '
    Minimum                = '0'
    Title                  = 'retryId'
    Type                   = 'integer'
    TypeName               = 'RetryID'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/retryId'
  Property 'runMachine' =
    Ref                    = '#/definitions/machine'
    TypeName               = 'RunMachine'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/runMachine'
  Property 'state' =
    Description            = 'unscheduled: not yet scheduled
    pending: not yet started
    running: currently in progress
    completed: Job ran through to completion
    '
    Enum                   = '[unscheduled pending running completed]'
    Title                  = 'state'
    Type                   = 'string'
    TypeName               = 'State'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/state'
  Property 'taskId' =
    Description            = 'This could just be what was formerly submitted as a job_guid in the
    REST API.
    '
    MaxLength              = '50'
    MinLength              = '1'
    Pattern                = '^[A-Za-z0-9/+-]+$'
    Title                  = 'taskId'
    Type                   = 'string'
    TypeName               = 'TaskID'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/taskId'
  Property 'tier' =
    Maximum                = '3'
    Minimum                = '1'
    Type                   = 'integer'
    TypeName               = 'Tier'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/tier'
  Property 'timeCompleted' =
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TimeCompleted'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/timeCompleted'
  Property 'timeScheduled' =
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TimeScheduled'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/timeScheduled'
  Property 'timeStarted' =
    Format                 = 'date-time'
    Type                   = 'string'
    TypeName               = 'TimeStarted'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/timeStarted'
  Property 'version' =
    Description            = 'Message version'
    Type                   = 'integer'
    TypeName               = 'Version'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/version'
Required               = '[taskId origin display state jobKind version]'
Schema                 = 'http://json-schema.org/draft-06/schema#'
Title                  = 'Job Definition'
Type                   = 'object'
TypeName               = 'JobDefinition'
SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#'


http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/definitions/machine
============================================================================================
Additional Properties  = 'false'
Properties
  Property 'architecture' =
    MaxLength              = '25'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Architecture'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/definitions/machine/properties/architecture'
  Property 'name' =
    MaxLength              = '50'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Name'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/definitions/machine/properties/name'
  Property 'os' =
    MaxLength              = '25'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'OS'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/definitions/machine/properties/os'
  Property 'platform' =
    MaxLength              = '100'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Platform'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/definitions/machine/properties/platform'
Required               = '[platform os architecture]'
Type                   = 'object'
TypeName               = 'Machine'
SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/definitions/machine'


http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]
===================================================================================================
Additional Properties  = 'false'
Properties
  Property 'kind' =
    Enum                   = '[hg.mozilla.org]'
    Type                   = 'string'
    TypeName               = 'Kind'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/kind'
  Property 'project' =
    MaxLength              = '50'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Project'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/project'
  Property 'pushLogID' =
    Type                   = 'integer'
    TypeName               = 'PushLogID'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/pushLogID'
  Property 'revision' =
    MaxLength              = '40'
    MinLength              = '40'
    Pattern                = '^[0-9a-f]+$'
    Type                   = 'string'
    TypeName               = 'Revision'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]/properties/revision'
Required               = '[kind project revision]'
Title                  = 'HG Push'
Type                   = 'object'
TypeName               = 'HGPush'
SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[0]'


http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]
===================================================================================================
Additional Properties  = 'false'
Description            = 'BACKWARD COMPATABILITY: An HG job that only has a revision_hash.
Some repos like mozilla-beta have not yet merged in the code that
allows them access to the revision.
'
Properties
  Property 'kind' =
    Enum                   = '[hg.mozilla.org]'
    Type                   = 'string'
    TypeName               = 'Kind'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/kind'
  Property 'project' =
    MaxLength              = '50'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Project'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/project'
  Property 'pushLogID' =
    Type                   = 'integer'
    TypeName               = 'PushLogID'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/pushLogID'
  Property 'revision_hash' =
    MaxLength              = '40'
    MinLength              = '40'
    Pattern                = '^[0-9a-f]+$'
    Type                   = 'string'
    TypeName               = 'Revision_Hash'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]/properties/revision_hash'
Required               = '[kind project revision_hash]'
Title                  = 'HG Push Legacy'
Type                   = 'object'
TypeName               = 'HGPushLegacy'
SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[1]'


http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]
===================================================================================================
Additional Properties  = 'false'
Properties
  Property 'kind' =
    Enum                   = '[github.com]'
    Type                   = 'string'
    TypeName               = 'Kind'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/kind'
  Property 'owner' =
    Description            = 'This could be the organization or the individual git username
    depending on who owns the repo.
    '
    MaxLength              = '50'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Owner'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/owner'
  Property 'project' =
    MaxLength              = '50'
    MinLength              = '1'
    Pattern                = '^[\w-]+$'
    Type                   = 'string'
    TypeName               = 'Project'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/project'
  Property 'pullRequestID' =
    Type                   = 'integer'
    TypeName               = 'PullRequestID'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/pullRequestID'
  Property 'revision' =
    MaxLength              = '40'
    MinLength              = '40'
    Type                   = 'string'
    TypeName               = 'Revision'
    SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]/properties/revision'
Required               = '[kind project revision]'
Title                  = 'Github Pull Request'
Type                   = 'object'
TypeName               = 'GithubPullRequest'
SourceURL              = 'http://schemas.taskcluster.net/taskcluster-treeherder/v1/pulse-job.json#/properties/origin/oneOf[2]'


https://references.taskcluster.net/ec2-manager/v1/api.json
==========================================================
Version     = '[48]'
Schema      = 'http://schemas.taskcluster.net/base/v1/api-reference.json#'
Title       = 'EC2 Instance Manager'
Description = 'A taskcluster service which manages EC2 instances.  This service does not understand any taskcluster concepts intrinsicaly other than using the name `workerType` to refer to a group of associated instances.  Unless you are working on building a provisioner for AWS, you almost certainly do not want to use this service'
Base URL    = 'localhost:5555/v1'
Entry 0     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-types'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'listWorkerTypes'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/list-worker-types.json#'
    Entry Title       = 'See the list of worker types which are known to be managed'
    Entry Description = 'This method is only for debugging the ec2-manager'
Entry 1     =
    Entry Type        = 'function'
    Entry Method      = 'put'
    Entry Route       = '/worker-types/<workerType>/instance'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'runInstance'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:manage-resources:<workerType>'
    Entry Input       = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#'
    Entry Output      = ''
    Entry Title       = 'Run an instance'
    Entry Description = 'Request an instance of a worker type'
Entry 2     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/worker-types/<workerType>/resources'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'terminateWorkerType'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:manage-resources:<workerType>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Terminate all resources from a worker type'
    Entry Description = 'Terminate all instances for this worker type'
Entry 3     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-types/<workerType>/stats'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerTypeStats'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#'
    Entry Title       = 'Look up the resource stats for a workerType'
    Entry Description = 'Return an object which has a generic state description. This only contains counts of instances'
Entry 4     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-types/<workerType>/health'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerTypeHealth'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#'
    Entry Title       = 'Look up the resource health for a workerType'
    Entry Description = 'Return a view of the health of a given worker type'
Entry 5     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-types/<workerType>/errors'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerTypeErrors'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#'
    Entry Title       = 'Look up the most recent errors of a workerType'
    Entry Description = 'Return a list of the most recent errors encountered by a worker type'
Entry 6     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/worker-types/<workerType>/state'
    Entry Args        = '[workerType]'
    Entry Query        = '[]'
    Entry Name        = 'workerTypeState'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#'
    Entry Title       = 'Look up the resource state for a workerType'
    Entry Description = 'Return state information for a given worker type'
Entry 7     =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/key-pairs/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'ensureKeyPair'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:manage-key-pairs:<name>'
    Entry Input       = 'http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#'
    Entry Output      = ''
    Entry Title       = 'Ensure a KeyPair for a given worker type exists'
    Entry Description = 'Idempotently ensure that a keypair of a given name exists'
Entry 8     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/key-pairs/<name>'
    Entry Args        = '[name]'
    Entry Query        = '[]'
    Entry Name        = 'removeKeyPair'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:manage-key-pairs:<name>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ensure a KeyPair for a given worker type does not exist'
    Entry Description = 'Ensure that a keypair of a given name does not exist.'
Entry 9     =
    Entry Type        = 'function'
    Entry Method      = 'delete'
    Entry Route       = '/region/<region>/instance/<instanceId>'
    Entry Args        = '[region instanceId]'
    Entry Query        = '[]'
    Entry Name        = 'terminateInstance'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'Any of:
- ec2-manager:manage-instances:<region>:<instanceId>
- ec2-manager:manage-resources:<workerType>'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Terminate an instance'
    Entry Description = 'Terminate an instance in a specified region'
Entry 10    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/prices'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'getPrices'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#'
    Entry Title       = 'Request prices for EC2'
    Entry Description = 'Return a list of possible prices for EC2'
Entry 11    =
    Entry Type        = 'function'
    Entry Method      = 'post'
    Entry Route       = '/prices'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'getSpecificPrices'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#'
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#'
    Entry Title       = 'Request prices for EC2'
    Entry Description = 'Return a list of possible prices for EC2'
Entry 12    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/health'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'getHealth'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#'
    Entry Title       = 'Get EC2 account health metrics'
    Entry Description = 'Give some basic stats on the health of our EC2 account'
Entry 13    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/errors'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'getRecentErrors'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#'
    Entry Title       = 'Look up the most recent errors in the provisioner across all worker types'
    Entry Description = 'Return a list of recent errors encountered'
Entry 14    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/regions'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'regions'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'See the list of regions managed by this ec2-manager'
    Entry Description = 'This method is only for debugging the ec2-manager'
Entry 15    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/ami-usage'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'amiUsage'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'See the list of AMIs and their usage'
    Entry Description = 'List AMIs and their usage by returning a list of objects in the form:
{
region: string
  volumetype: string
  lastused: timestamp
}'
Entry 16    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/ebs-usage'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ebsUsage'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'See the current EBS volume usage list'
    Entry Description = 'Lists current EBS volume usage by returning a list of objects
that are uniquely defined by {region, volumetype, state} in the form:
{
region: string,
  volumetype: string,
  state: string,
  totalcount: integer,
  totalgb: integer,
  touched: timestamp (last time that information was updated),
}'
Entry 17    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/db-pool-stats'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'dbpoolStats'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Statistics on the Database client pool'
    Entry Description = 'This method is only for debugging the ec2-manager'
Entry 18    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/all-state'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'allState'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'List out the entire internal state'
    Entry Description = 'This method is only for debugging the ec2-manager'
Entry 19    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/sqs-stats'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'sqsStats'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Statistics on the sqs queues'
    Entry Description = 'This method is only for debugging the ec2-manager'
Entry 20    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/purge-queues'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'purgeQueues'
    Entry Stability   = 'experimental'
    Entry Scopes      = 'ec2-manager:internals'
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Purge the SQS queues'
    Entry Description = 'This method is only for debugging the ec2-manager'
Entry 21    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/internal/api-reference'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'apiReference'
    Entry Stability   = 'experimental'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'API Reference'
    Entry Description = 'Generate an API reference for this service'
Entry 22    =
    Entry Type        = 'function'
    Entry Method      = 'get'
    Entry Route       = '/ping'
    Entry Args        = '[]'
    Entry Query        = '[]'
    Entry Name        = 'ping'
    Entry Stability   = 'stable'
    Entry Scopes      = ''
    Entry Input       = ''
    Entry Output      = ''
    Entry Title       = 'Ping Server'
    Entry Description = 'Respond without doing anything.
This endpoint is used to check that the service is up.'


http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#
===================================================================
Additional Properties  = 'false'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#'
Properties
  Property 'pubkey' =
    Description            = 'An OpenSSH format Public Key as described by tools.ietf.org/html/rfc4253#section-6.6
    '
    Pattern                = '^(ssh-\S*)\s*(\S*)\s*(.*)$'
    Type                   = 'string'
    TypeName               = 'Pubkey'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#/properties/pubkey'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'ssh public key'
Type                   = 'object'
TypeName               = 'SSHPublicKey'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/create-key-pair.json#'


http://schemas.taskcluster.net/ec2-manager/v1/errors.json#
==========================================================
Additional Properties  = 'false'
Description            = 'This method returns a list of errors.  It currently gives the error code only
because we're not sure of the security implications of exposing the full
message.  We do store complete error messages, but are figuring out how to
best expose them
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#'
Properties
  Property 'errors' =
    Items
      Additional Properties  = 'false'
      Properties
        Property 'az' =
          Type                   = 'string'
          TypeName               = 'Az'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/az'
        Property 'code' =
          Type                   = 'string'
          TypeName               = 'Code'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/code'
        Property 'instanceType' =
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/instanceType'
        Property 'message' =
          Type                   = 'string'
          TypeName               = 'Message'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/message'
        Property 'region' =
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/region'
        Property 'time' =
          Format                 = 'date-time'
          Type                   = 'string'
          TypeName               = 'Time'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/time'
        Property 'type' =
          Enum                   = '[instance-request termination]'
          Type                   = 'string'
          TypeName               = 'Type'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/type'
        Property 'workerType' =
          Type                   = 'string'
          TypeName               = 'WorkerType'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items/properties/workerType'
      Type                   = 'object'
      TypeName               = 'ErrorsEntry'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors/items'
    Type                   = 'array'
    TypeName               = 'Errors'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#/properties/errors'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Errors'
Type                   = 'object'
TypeName               = 'Errors'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/errors.json#'


http://schemas.taskcluster.net/ec2-manager/v1/health.json#
==========================================================
Additional Properties  = 'false'
Description            = 'This method provides a summary of the health in the EC2 account being managed.
Values for the overall account are provided, broken down by Region, Availability
Zone and Instance Type.
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#'
Properties
  Property 'requestHealth' =
    Items
      Description            = 'This is a list of outcomes for a specific region, availability zone and
      instance type.  These are calls to the EC2 runInstances method, which
      is how we request instances.  If a call to this method is successful,
      then we expect to get an instance to match
      '
      Properties
        Property 'az' =
          Type                   = 'string'
          TypeName               = 'Az'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/az'
        Property 'configuration_issue' =
          Description            = 'The number of calls failed due to a misconfiguration of the worker type.  Due to the large number of error codes the EC2 API might return, this is a best effort categorization.  It covers codes which are like "Invalid%" using SQL pattern mattching on the codes from https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html It is not categorized by which field was invalid in this response'
          Type                   = 'integer'
          TypeName               = 'Configuration_Issue'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/configuration_issue'
        Property 'failed' =
          Description            = 'The total number of calls which failed, inrespective of why'
          Type                   = 'integer'
          TypeName               = 'Failed'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/failed'
        Property 'instanceType' =
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/instanceType'
        Property 'insufficient_capacity' =
          Description            = 'Number of runInstances calls which have failed because there aren't
          enough hosts for the resources to be allocated.
          '
          Type                   = 'integer'
          TypeName               = 'Insufficient_Capacity'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/insufficient_capacity'
        Property 'limit_exceeded' =
          Description            = 'The number of calls which failed due to a limit being exceeded.
          Due to the large number of error codes the EC2 API might return,
          this is a best effort categorization.  It covers codes which are
          like "%LimitExceeded" using SQL pattern mattching, but not
          RequestLimitExceeded on the codes from
          https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html
          It is not categorized by which limit was exceeded in this response
          '
          Type                   = 'integer'
          TypeName               = 'Limit_Exceeded'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/limit_exceeded'
        Property 'region' =
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/region'
        Property 'successful' =
          Description            = 'The number of instances which have been requested successfully
          '
          Type                   = 'integer'
          TypeName               = 'Successful'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/successful'
        Property 'throttled_calls' =
          Description            = 'Number of calls which have been throttled in this region.  These
          are errors with the code RequestLimitExceeded.
          '
          Type                   = 'integer'
          TypeName               = 'Throttled_Calls'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items/properties/throttled_calls'
      Type                   = 'object'
      TypeName               = 'RequestHealthEntry'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth/items'
    Type                   = 'array'
    TypeName               = 'RequestHealth'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/requestHealth'
  Property 'running' =
    Description            = 'An overview of currently running instances
    '
    Items
      Additional Properties  = 'false'
      Properties
        Property 'az' =
          Type                   = 'string'
          TypeName               = 'Az'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/az'
        Property 'instanceType' =
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/instanceType'
        Property 'region' =
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/region'
        Property 'running' =
          Description            = 'The number of currently running instances in this configuration
          '
          Type                   = 'integer'
          TypeName               = 'Running'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items/properties/running'
      Type                   = 'object'
      TypeName               = 'RunningEntry'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running/items'
    Type                   = 'array'
    TypeName               = 'Running'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/running'
  Property 'terminationHealth' =
    Items
      Description            = 'This is a list of summaries of instances which have terminated
      '
      Properties
        Property 'az' =
          Type                   = 'string'
          TypeName               = 'Az'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/az'
        Property 'clean_shutdown' =
          Description            = 'A count of the instances which were shutdown cleanty.  For the
          purposes of this API, a clean shutdown is one which was initiated
          by us.  This includes API shutdowns or workers ending themselves.
          It does not mean the actual workload ran successfully, rather that
          we chose to terminate it
          '
          Type                   = 'integer'
          TypeName               = 'Clean_Shutdown'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/clean_shutdown'
        Property 'instanceType' =
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/instanceType'
        Property 'insufficient_capacity' =
          Description            = 'The number of instances which were terminated due to a lack of
          capacity.  More than likely, this will always be zero because the
          new spot service is now synchronous, so runInstances calls should
          fail
          '
          Type                   = 'integer'
          TypeName               = 'Insufficient_Capacity'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/insufficient_capacity'
        Property 'missing_ami' =
          Description            = 'The number of instances which were terminated due to not being able
          to find the AMI
          '
          Type                   = 'integer'
          TypeName               = 'Missing_Ami'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/missing_ami'
        Property 'no_code' =
          Description            = 'The number of terminations which we cannot find a code.  This means
          we cannot determine whether this should be classified as a good or
          bad outcome.  The specific reason is that the code which polls for
          termination reason was not able to run before the EC2 API dropped
          the instance from its database
          '
          Type                   = 'integer'
          TypeName               = 'No_Code'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/no_code'
        Property 'region' =
          Type                   = 'string'
          TypeName               = 'Region'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/region'
        Property 'spot_kill' =
          Description            = 'The number of instances which were killed by the spot service
          '
          Type                   = 'integer'
          TypeName               = 'Spot_Kill'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/spot_kill'
        Property 'startup_failed' =
          Description            = 'The number of instances which failed to start, either because of an
          error on our side or on the EC2 side
          '
          Type                   = 'integer'
          TypeName               = 'Startup_Failed'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/startup_failed'
        Property 'unknown_code' =
          Description            = 'The number of terminations which have a code which this code does
          not recognize
          '
          Type                   = 'integer'
          TypeName               = 'Unknown_Code'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/unknown_code'
        Property 'volume_limit_exceeded' =
          Description            = 'The number of instances which were terminated due to exceeding the
          limit for number of ebs volumes
          '
          Type                   = 'integer'
          TypeName               = 'Volume_Limit_Exceeded'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items/properties/volume_limit_exceeded'
      Type                   = 'object'
      TypeName               = 'TerminationHealthEntry'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth/items'
    Type                   = 'array'
    TypeName               = 'TerminationHealth'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#/properties/terminationHealth'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Health of the EC2 account'
Type                   = 'object'
TypeName               = 'HealthOfTheEC2Account'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/health.json#'


http://schemas.taskcluster.net/ec2-manager/v1/list-worker-types.json#
=====================================================================
Description            = 'A list of names of worker types
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/list-worker-types.json#'
Items
  Type                   = 'string'
  TypeName               = 'Entry'
  SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/list-worker-types.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List of worker types'
Type                   = 'array'
TypeName               = 'ListOfWorkerTypes'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/list-worker-types.json#'


http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#
==================================================================
Description            = 'A list of prices for EC2
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#'
Items
  Additional Properties  = 'false'
  Properties
    Property 'key' =
      Enum                   = '[instanceType region price minPrice maxPrice zone type]'
      Type                   = 'string'
      TypeName               = 'Key'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/key'
    Property 'restriction' =
      OneOf
        Item '0' =
          Type                   = 'number'
          TypeName               = 'Var'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[0]'
        Item '1' =
          Type                   = 'string'
          TypeName               = 'Var1'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[1]'
        Item '2' =
          Items
            Type                   = 'string'
            TypeName               = 'Entry2'
            SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[2]/items'
          Type                   = 'array'
          TypeName               = 'Var2'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[2]'
      Type HAS NOT BEEN SET!!!
      TypeName               = 'Restriction'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction'
  Type                   = 'object'
  TypeName               = 'Entry3'
  SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List of restrictions for prices'
Type                   = 'array'
TypeName               = 'ListOfRestrictionsForPrices'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#'


http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[0]
========================================================================================================
Type                   = 'number'
TypeName               = 'Var'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[0]'


http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[1]
========================================================================================================
Type                   = 'string'
TypeName               = 'Var1'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[1]'


http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[2]
========================================================================================================
Items
  Type                   = 'string'
  TypeName               = 'Entry2'
  SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[2]/items'
Type                   = 'array'
TypeName               = 'Var2'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices-request.json#/items/properties/restriction/oneOf[2]'


http://schemas.taskcluster.net/ec2-manager/v1/prices.json#
==========================================================
Description            = 'A list of prices for EC2
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#'
Items
  Additional Properties  = 'false'
  Properties
    Property 'instanceType' =
      Description            = 'EC2 instance type'
      Type                   = 'string'
      TypeName               = 'InstanceType'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/instanceType'
    Property 'price' =
      Description            = 'Amount of dollars for an hour of usage for this configuration'
      Type                   = 'number'
      TypeName               = 'Price'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/price'
    Property 'region' =
      Description            = 'EC2 region'
      Type                   = 'string'
      TypeName               = 'Region'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/region'
    Property 'type' =
      Enum                   = '[spot ondemand]'
      Type                   = 'string'
      TypeName               = 'Type'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/type'
    Property 'zone' =
      Description            = 'EC2 availability zone identifier'
      Type                   = 'string'
      TypeName               = 'Zone'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items/properties/zone'
  Type                   = 'object'
  TypeName               = 'Entry1'
  SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#/items'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'List of prices'
Type                   = 'array'
TypeName               = 'ListOfPrices'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/prices.json#'


http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#
========================================================================
Additional Properties  = 'false'
Description            = 'Presented here are the fields that are absolutely 100% required to make a
spot request.  The `LaunchSpecification` property is an opaque datastructure
from EC2, however the fields which we know are absolutely required are
described
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#'
Properties
  Property 'ClientToken' =
    Description            = 'A ClientToken string per the implementation requirements of the EC2 api.
    This string must be no more than 64 characters of ASCII.  We restrict the
    client tokens further to alphanumeric ASCII with the addition of the `-`
    and `_` characters
    '
    MaxLength              = '64'
    MinLength              = '1'
    Pattern                = '^[a-zA-Z0-0_-]{1,64}'
    Type                   = 'string'
    TypeName               = 'ClientToken'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/ClientToken'
  Property 'LaunchInfo' =
    Description            = 'This is an EC2-Manager specific wrapping of the request body for the
    upstream EC2 API.  Values from this are passed through verbatim.  A small
    number of checks are done on the data before making the call, as well as
    having some schema keys set to ensure certain values are either present
    or absent
    '
    Properties
      Property 'ImageId' =
        Description            = 'This is the AMI Identifier for this spot request.  This image must
        already exist and must be in the region of the request.  Note that
        AMI images are per-region, so you must copy or regenerate the image
        for each region.
        '
        Type                   = 'string'
        TypeName               = 'ImageID'
        SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/ImageId'
      Property 'InstanceType' =
        Description            = 'The instance type to use for this spot request
        '
        Type                   = 'string'
        TypeName               = 'InstanceType'
        SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/InstanceType'
      Property 'KeyName' =
        Description            = 'A valid EC2 KeyPair name.  The KeyPair must already exist
        '
        Type                   = 'string'
        TypeName               = 'KeyName'
        SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/KeyName'
      Property 'SecurityGroups' =
        Description            = 'This is a list of the security groups this image will use.  These
        groups must already exist in the region.
        '
        Items
          Type                   = 'string'
          TypeName               = 'SecurityGroupsEntry'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/SecurityGroups/items'
        Type                   = 'array'
        TypeName               = 'SecurityGroups'
        SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo/properties/SecurityGroups'
    Type                   = 'object'
    TypeName               = 'LaunchInfo'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/LaunchInfo'
  Property 'Region' =
    Description            = 'The EC2 region in which this spot request is to be made.  This should be
    the lower case api-identifier.  For example `us-east-1`
    '
    Type                   = 'string'
    TypeName               = 'Region'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/Region'
  Property 'RequestType' =
    Description            = 'Specify whether to use a spot request or an on-demand instance.  This is
    not inferred from the SpotPrice being set or not because we want to allow
    for the default behaviour for spot prices, which is to use the spot
    market with a default price of the on-demand price
    '
    Enum                   = '[spot on-demand]'
    Type                   = 'string'
    TypeName               = 'RequestType'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/RequestType'
  Property 'SpotPrice' =
    Description            = 'The actual price of the bid.  This is passed directly to the EC2 api and
    so should not have any internal multipliers (e.g. capacity or utility)
    applied
    '
    Type                   = 'number'
    TypeName               = 'SpotPrice'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#/properties/SpotPrice'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Make a spot request'
Type                   = 'object'
TypeName               = 'MakeASpotRequest'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/run-instance-request.json#'


http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#
=========================================================================
Additional Properties  = 'false'
Description            = 'Overview of computational resources for a given worker type
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#'
Properties
  Property 'pending' =
    Items
      Properties
        Property 'count' =
          Type                   = 'number'
          TypeName               = 'Count'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/pending/items/properties/count'
        Property 'instanceType' =
          Type                   = 'string'
          TypeName               = 'InstanceType'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/pending/items/properties/instanceType'
        Property 'type' =
          Enum                   = '[instance]'
          Type                   = 'string'
          TypeName               = 'Type'
          SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/pending/items/properties/type'
      Type                   = 'object'
      TypeName               = 'PendingEntry'
      SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/pending/items'
    Type                   = 'array'
    TypeName               = 'Pending'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/pending'
  Property 'running' =
    Type                   = 'array'
    TypeName               = 'Running'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#/properties/running'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Overview of computational resources'
Type                   = 'object'
TypeName               = 'OverviewOfComputationalResources'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-resources.json#'


http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#
=====================================================================
Additional Properties  = 'false'
Description            = 'Overview of computational resources for a given worker type
'
ID                     = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#'
Properties
  Property 'instances' =
    Type                   = 'array'
    TypeName               = 'Instances'
    SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#/properties/instances'
Schema                 = 'http://json-schema.org/draft-04/schema#'
Title                  = 'Overview of computational resources'
Type                   = 'object'
TypeName               = 'OverviewOfComputationalResources1'
SourceURL              = 'http://schemas.taskcluster.net/ec2-manager/v1/worker-type-state.json#'


